// Code generated by protoc-gen-go.
// source: ProtobufRpcEngine.proto
// DO NOT EDIT!

package hproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// This message is the header for the Protobuf Rpc Engine
// when sending a RPC request from  RPC client to the RPC server.
// The actual request (serialized as protobuf) follows this request.
//
// No special header is needed for the Rpc Response for Protobuf Rpc Engine.
// The normal RPC response header (see RpcHeader.proto) are sufficient.
type RequestHeaderProto struct {
	// * Name of the RPC method
	MethodName *string `protobuf:"bytes,1,req,name=methodName" json:"methodName,omitempty"`
	// *
	// RPCs for a particular interface (ie protocol) are done using a
	// IPC connection that is setup using rpcProxy.
	// The rpcProxy's has a declared protocol name that is
	// sent form client to server at connection time.
	//
	// Each Rpc call also sends a protocol name
	// (called declaringClassprotocolName). This name is usually the same
	// as the connection protocol name except in some cases.
	// For example metaProtocols such ProtocolInfoProto which get metainfo
	// about the protocol reuse the connection but need to indicate that
	// the actual protocol is different (i.e. the protocol is
	// ProtocolInfoProto) since they reuse the connection; in this case
	// the declaringClassProtocolName field is set to the ProtocolInfoProto
	DeclaringClassProtocolName *string `protobuf:"bytes,2,req,name=declaringClassProtocolName" json:"declaringClassProtocolName,omitempty"`
	// * protocol version of class declaring the called method
	ClientProtocolVersion *uint64 `protobuf:"varint,3,req,name=clientProtocolVersion" json:"clientProtocolVersion,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *RequestHeaderProto) Reset()                    { *m = RequestHeaderProto{} }
func (m *RequestHeaderProto) String() string            { return proto.CompactTextString(m) }
func (*RequestHeaderProto) ProtoMessage()               {}
func (*RequestHeaderProto) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *RequestHeaderProto) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RequestHeaderProto) GetDeclaringClassProtocolName() string {
	if m != nil && m.DeclaringClassProtocolName != nil {
		return *m.DeclaringClassProtocolName
	}
	return ""
}

func (m *RequestHeaderProto) GetClientProtocolVersion() uint64 {
	if m != nil && m.ClientProtocolVersion != nil {
		return *m.ClientProtocolVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestHeaderProto)(nil), "hadoop.common.RequestHeaderProto")
}

func init() { proto.RegisterFile("ProtobufRpcEngine.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x8f, 0x31, 0x6b, 0x02, 0x31,
	0x18, 0x86, 0xc9, 0xb5, 0x4b, 0x03, 0x5d, 0x02, 0xa5, 0x47, 0x87, 0xa3, 0x74, 0xea, 0x94, 0xc9,
	0x51, 0x1c, 0x4e, 0x04, 0x27, 0x91, 0x0c, 0xee, 0x31, 0xf9, 0xbc, 0x0b, 0x24, 0xf9, 0x62, 0x92,
	0xfb, 0x3f, 0xce, 0xfe, 0x4a, 0xcf, 0xa8, 0x20, 0x28, 0xae, 0xcf, 0xfb, 0x3e, 0xc3, 0x43, 0xbf,
	0xd7, 0x11, 0x33, 0x6e, 0x87, 0x9d, 0x08, 0x6a, 0xe1, 0x3b, 0xe3, 0x81, 0x87, 0x33, 0x61, 0x9f,
	0xbd, 0xd4, 0x88, 0x81, 0x2b, 0x74, 0x0e, 0xfd, 0xdf, 0x91, 0x50, 0x26, 0x60, 0x3f, 0x40, 0xca,
	0x4b, 0x90, 0x1a, 0x62, 0xf1, 0x58, 0x43, 0xa9, 0x83, 0xdc, 0xa3, 0x5e, 0x49, 0x07, 0x35, 0xf9,
	0xad, 0xfe, 0x3f, 0xc4, 0x1d, 0x61, 0x33, 0xfa, 0xa3, 0x41, 0x59, 0x19, 0x8d, 0xef, 0xe6, 0x56,
	0xa6, 0x54, 0x34, 0x85, 0xb6, 0xfc, 0xab, 0xf2, 0x7f, 0xf1, 0x60, 0x13, 0xfa, 0xa5, 0xac, 0x01,
	0x9f, 0x6f, 0x74, 0x03, 0x31, 0x19, 0xf4, 0xf5, 0xdb, 0xa8, 0xbe, 0x8b, 0xe7, 0x63, 0x3b, 0xa5,
	0x0d, 0xc6, 0x8e, 0xcb, 0x20, 0x55, 0x0f, 0xfc, 0x1a, 0x62, 0x82, 0xba, 0xa4, 0x8d, 0xb1, 0xed,
	0x63, 0x76, 0x01, 0xe9, 0x40, 0xc8, 0x29, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xe2, 0xf0, 0x01, 0x13,
	0x01, 0x00, 0x00,
}
