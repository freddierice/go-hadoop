// Code generated by protoc-gen-go.
// source: NamenodeProtocol.proto
// DO NOT EDIT!

package hproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Get list of blocks for a given datanode with the total length
// of adding up to given size
// datanode - Datanode ID to get list of block from
// size - size to which the block lengths must add up to
type GetBlocksRequestProto struct {
	Datanode         *DatanodeIDProto `protobuf:"bytes,1,req,name=datanode" json:"datanode,omitempty"`
	Size             *uint64          `protobuf:"varint,2,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *GetBlocksRequestProto) Reset()                    { *m = GetBlocksRequestProto{} }
func (m *GetBlocksRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksRequestProto) ProtoMessage()               {}
func (*GetBlocksRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *GetBlocksRequestProto) GetDatanode() *DatanodeIDProto {
	if m != nil {
		return m.Datanode
	}
	return nil
}

func (m *GetBlocksRequestProto) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// *
// blocks - List of returned blocks
type GetBlocksResponseProto struct {
	Blocks           *BlocksWithLocationsProto `protobuf:"bytes,1,req,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *GetBlocksResponseProto) Reset()                    { *m = GetBlocksResponseProto{} }
func (m *GetBlocksResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksResponseProto) ProtoMessage()               {}
func (*GetBlocksResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *GetBlocksResponseProto) GetBlocks() *BlocksWithLocationsProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// *
// void request
type GetBlockKeysRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetBlockKeysRequestProto) Reset()                    { *m = GetBlockKeysRequestProto{} }
func (m *GetBlockKeysRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetBlockKeysRequestProto) ProtoMessage()               {}
func (*GetBlockKeysRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{2} }

// *
// keys - Information about block keys at the active namenode
type GetBlockKeysResponseProto struct {
	Keys             *ExportedBlockKeysProto `protobuf:"bytes,1,opt,name=keys" json:"keys,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *GetBlockKeysResponseProto) Reset()                    { *m = GetBlockKeysResponseProto{} }
func (m *GetBlockKeysResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetBlockKeysResponseProto) ProtoMessage()               {}
func (*GetBlockKeysResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{3} }

func (m *GetBlockKeysResponseProto) GetKeys() *ExportedBlockKeysProto {
	if m != nil {
		return m.Keys
	}
	return nil
}

// *
// void request
type GetTransactionIdRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetTransactionIdRequestProto) Reset()                    { *m = GetTransactionIdRequestProto{} }
func (m *GetTransactionIdRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionIdRequestProto) ProtoMessage()               {}
func (*GetTransactionIdRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{4} }

// *
// txId - Transaction ID of the most recently persisted edit log record
type GetTransactionIdResponseProto struct {
	TxId             *uint64 `protobuf:"varint,1,req,name=txId" json:"txId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetTransactionIdResponseProto) Reset()                    { *m = GetTransactionIdResponseProto{} }
func (m *GetTransactionIdResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionIdResponseProto) ProtoMessage()               {}
func (*GetTransactionIdResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{5} }

func (m *GetTransactionIdResponseProto) GetTxId() uint64 {
	if m != nil && m.TxId != nil {
		return *m.TxId
	}
	return 0
}

// *
// void request
type RollEditLogRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RollEditLogRequestProto) Reset()                    { *m = RollEditLogRequestProto{} }
func (m *RollEditLogRequestProto) String() string            { return proto.CompactTextString(m) }
func (*RollEditLogRequestProto) ProtoMessage()               {}
func (*RollEditLogRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{6} }

// *
// signature - A unique token to identify checkpoint transaction
type RollEditLogResponseProto struct {
	Signature        *CheckpointSignatureProto `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *RollEditLogResponseProto) Reset()                    { *m = RollEditLogResponseProto{} }
func (m *RollEditLogResponseProto) String() string            { return proto.CompactTextString(m) }
func (*RollEditLogResponseProto) ProtoMessage()               {}
func (*RollEditLogResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{7} }

func (m *RollEditLogResponseProto) GetSignature() *CheckpointSignatureProto {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// void request
type GetMostRecentCheckpointTxIdRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetMostRecentCheckpointTxIdRequestProto) Reset() {
	*m = GetMostRecentCheckpointTxIdRequestProto{}
}
func (m *GetMostRecentCheckpointTxIdRequestProto) String() string { return proto.CompactTextString(m) }
func (*GetMostRecentCheckpointTxIdRequestProto) ProtoMessage()    {}
func (*GetMostRecentCheckpointTxIdRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{8}
}

type GetMostRecentCheckpointTxIdResponseProto struct {
	TxId             *uint64 `protobuf:"varint,1,req,name=txId" json:"txId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetMostRecentCheckpointTxIdResponseProto) Reset() {
	*m = GetMostRecentCheckpointTxIdResponseProto{}
}
func (m *GetMostRecentCheckpointTxIdResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetMostRecentCheckpointTxIdResponseProto) ProtoMessage()    {}
func (*GetMostRecentCheckpointTxIdResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{9}
}

func (m *GetMostRecentCheckpointTxIdResponseProto) GetTxId() uint64 {
	if m != nil && m.TxId != nil {
		return *m.TxId
	}
	return 0
}

// *
// registration - Namenode reporting the error
// errorCode - error code indicating the error
// msg - Free text description of the error
type ErrorReportRequestProto struct {
	Registration     *NamenodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	ErrorCode        *uint32                    `protobuf:"varint,2,req,name=errorCode" json:"errorCode,omitempty"`
	Msg              *string                    `protobuf:"bytes,3,req,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *ErrorReportRequestProto) Reset()                    { *m = ErrorReportRequestProto{} }
func (m *ErrorReportRequestProto) String() string            { return proto.CompactTextString(m) }
func (*ErrorReportRequestProto) ProtoMessage()               {}
func (*ErrorReportRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{10} }

func (m *ErrorReportRequestProto) GetRegistration() *NamenodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *ErrorReportRequestProto) GetErrorCode() uint32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ErrorReportRequestProto) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// *
// void response
type ErrorReportResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ErrorReportResponseProto) Reset()                    { *m = ErrorReportResponseProto{} }
func (m *ErrorReportResponseProto) String() string            { return proto.CompactTextString(m) }
func (*ErrorReportResponseProto) ProtoMessage()               {}
func (*ErrorReportResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{11} }

// *
// registration - Information of the namenode registering with primary namenode
type RegisterRequestProto struct {
	Registration     *NamenodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RegisterRequestProto) Reset()                    { *m = RegisterRequestProto{} }
func (m *RegisterRequestProto) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequestProto) ProtoMessage()               {}
func (*RegisterRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{12} }

func (m *RegisterRequestProto) GetRegistration() *NamenodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

// *
// registration - Updated registration information of the newly registered
//                datanode.
type RegisterResponseProto struct {
	Registration     *NamenodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RegisterResponseProto) Reset()                    { *m = RegisterResponseProto{} }
func (m *RegisterResponseProto) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponseProto) ProtoMessage()               {}
func (*RegisterResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{13} }

func (m *RegisterResponseProto) GetRegistration() *NamenodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

// *
// Start checkpoint request
// registration - Namenode that is starting the checkpoint
type StartCheckpointRequestProto struct {
	Registration     *NamenodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *StartCheckpointRequestProto) Reset()                    { *m = StartCheckpointRequestProto{} }
func (m *StartCheckpointRequestProto) String() string            { return proto.CompactTextString(m) }
func (*StartCheckpointRequestProto) ProtoMessage()               {}
func (*StartCheckpointRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{14} }

func (m *StartCheckpointRequestProto) GetRegistration() *NamenodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

// *
// command - Command returned by the active namenode to be
//           be handled by the caller.
type StartCheckpointResponseProto struct {
	Command          *NamenodeCommandProto `protobuf:"bytes,1,req,name=command" json:"command,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *StartCheckpointResponseProto) Reset()                    { *m = StartCheckpointResponseProto{} }
func (m *StartCheckpointResponseProto) String() string            { return proto.CompactTextString(m) }
func (*StartCheckpointResponseProto) ProtoMessage()               {}
func (*StartCheckpointResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{15} }

func (m *StartCheckpointResponseProto) GetCommand() *NamenodeCommandProto {
	if m != nil {
		return m.Command
	}
	return nil
}

// *
// End or finalize the previously started checkpoint
// registration - Namenode that is ending the checkpoint
// signature - unique token to identify checkpoint transaction,
//             that was received when checkpoint was started.
type EndCheckpointRequestProto struct {
	Registration     *NamenodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	Signature        *CheckpointSignatureProto  `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *EndCheckpointRequestProto) Reset()                    { *m = EndCheckpointRequestProto{} }
func (m *EndCheckpointRequestProto) String() string            { return proto.CompactTextString(m) }
func (*EndCheckpointRequestProto) ProtoMessage()               {}
func (*EndCheckpointRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{16} }

func (m *EndCheckpointRequestProto) GetRegistration() *NamenodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *EndCheckpointRequestProto) GetSignature() *CheckpointSignatureProto {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// void response
type EndCheckpointResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EndCheckpointResponseProto) Reset()                    { *m = EndCheckpointResponseProto{} }
func (m *EndCheckpointResponseProto) String() string            { return proto.CompactTextString(m) }
func (*EndCheckpointResponseProto) ProtoMessage()               {}
func (*EndCheckpointResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{17} }

// *
// sinceTxId - return the editlog information for transactions >= sinceTxId
type GetEditLogManifestRequestProto struct {
	SinceTxId        *uint64 `protobuf:"varint,1,req,name=sinceTxId" json:"sinceTxId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEditLogManifestRequestProto) Reset()         { *m = GetEditLogManifestRequestProto{} }
func (m *GetEditLogManifestRequestProto) String() string { return proto.CompactTextString(m) }
func (*GetEditLogManifestRequestProto) ProtoMessage()    {}
func (*GetEditLogManifestRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{18}
}

func (m *GetEditLogManifestRequestProto) GetSinceTxId() uint64 {
	if m != nil && m.SinceTxId != nil {
		return *m.SinceTxId
	}
	return 0
}

// *
// manifest - Enumeration of editlogs from namenode for
//            logs >= sinceTxId in the request
type GetEditLogManifestResponseProto struct {
	Manifest         *RemoteEditLogManifestProto `protobuf:"bytes,1,req,name=manifest" json:"manifest,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *GetEditLogManifestResponseProto) Reset()         { *m = GetEditLogManifestResponseProto{} }
func (m *GetEditLogManifestResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetEditLogManifestResponseProto) ProtoMessage()    {}
func (*GetEditLogManifestResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{19}
}

func (m *GetEditLogManifestResponseProto) GetManifest() *RemoteEditLogManifestProto {
	if m != nil {
		return m.Manifest
	}
	return nil
}

// *
// void request
type IsUpgradeFinalizedRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsUpgradeFinalizedRequestProto) Reset()         { *m = IsUpgradeFinalizedRequestProto{} }
func (m *IsUpgradeFinalizedRequestProto) String() string { return proto.CompactTextString(m) }
func (*IsUpgradeFinalizedRequestProto) ProtoMessage()    {}
func (*IsUpgradeFinalizedRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{20}
}

type IsUpgradeFinalizedResponseProto struct {
	IsUpgradeFinalized *bool  `protobuf:"varint,1,req,name=isUpgradeFinalized" json:"isUpgradeFinalized,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *IsUpgradeFinalizedResponseProto) Reset()         { *m = IsUpgradeFinalizedResponseProto{} }
func (m *IsUpgradeFinalizedResponseProto) String() string { return proto.CompactTextString(m) }
func (*IsUpgradeFinalizedResponseProto) ProtoMessage()    {}
func (*IsUpgradeFinalizedResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{21}
}

func (m *IsUpgradeFinalizedResponseProto) GetIsUpgradeFinalized() bool {
	if m != nil && m.IsUpgradeFinalized != nil {
		return *m.IsUpgradeFinalized
	}
	return false
}

func init() {
	proto.RegisterType((*GetBlocksRequestProto)(nil), "hadoop.hdfs.namenode.GetBlocksRequestProto")
	proto.RegisterType((*GetBlocksResponseProto)(nil), "hadoop.hdfs.namenode.GetBlocksResponseProto")
	proto.RegisterType((*GetBlockKeysRequestProto)(nil), "hadoop.hdfs.namenode.GetBlockKeysRequestProto")
	proto.RegisterType((*GetBlockKeysResponseProto)(nil), "hadoop.hdfs.namenode.GetBlockKeysResponseProto")
	proto.RegisterType((*GetTransactionIdRequestProto)(nil), "hadoop.hdfs.namenode.GetTransactionIdRequestProto")
	proto.RegisterType((*GetTransactionIdResponseProto)(nil), "hadoop.hdfs.namenode.GetTransactionIdResponseProto")
	proto.RegisterType((*RollEditLogRequestProto)(nil), "hadoop.hdfs.namenode.RollEditLogRequestProto")
	proto.RegisterType((*RollEditLogResponseProto)(nil), "hadoop.hdfs.namenode.RollEditLogResponseProto")
	proto.RegisterType((*GetMostRecentCheckpointTxIdRequestProto)(nil), "hadoop.hdfs.namenode.GetMostRecentCheckpointTxIdRequestProto")
	proto.RegisterType((*GetMostRecentCheckpointTxIdResponseProto)(nil), "hadoop.hdfs.namenode.GetMostRecentCheckpointTxIdResponseProto")
	proto.RegisterType((*ErrorReportRequestProto)(nil), "hadoop.hdfs.namenode.ErrorReportRequestProto")
	proto.RegisterType((*ErrorReportResponseProto)(nil), "hadoop.hdfs.namenode.ErrorReportResponseProto")
	proto.RegisterType((*RegisterRequestProto)(nil), "hadoop.hdfs.namenode.RegisterRequestProto")
	proto.RegisterType((*RegisterResponseProto)(nil), "hadoop.hdfs.namenode.RegisterResponseProto")
	proto.RegisterType((*StartCheckpointRequestProto)(nil), "hadoop.hdfs.namenode.StartCheckpointRequestProto")
	proto.RegisterType((*StartCheckpointResponseProto)(nil), "hadoop.hdfs.namenode.StartCheckpointResponseProto")
	proto.RegisterType((*EndCheckpointRequestProto)(nil), "hadoop.hdfs.namenode.EndCheckpointRequestProto")
	proto.RegisterType((*EndCheckpointResponseProto)(nil), "hadoop.hdfs.namenode.EndCheckpointResponseProto")
	proto.RegisterType((*GetEditLogManifestRequestProto)(nil), "hadoop.hdfs.namenode.GetEditLogManifestRequestProto")
	proto.RegisterType((*GetEditLogManifestResponseProto)(nil), "hadoop.hdfs.namenode.GetEditLogManifestResponseProto")
	proto.RegisterType((*IsUpgradeFinalizedRequestProto)(nil), "hadoop.hdfs.namenode.IsUpgradeFinalizedRequestProto")
	proto.RegisterType((*IsUpgradeFinalizedResponseProto)(nil), "hadoop.hdfs.namenode.IsUpgradeFinalizedResponseProto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NamenodeProtocolService service

type NamenodeProtocolServiceClient interface {
	// *
	// Get list of blocks for a given datanode with length
	// of blocks adding up to given size.
	GetBlocks(ctx context.Context, in *GetBlocksRequestProto, opts ...grpc.CallOption) (*GetBlocksResponseProto, error)
	// *
	// Get the current block keys
	GetBlockKeys(ctx context.Context, in *GetBlockKeysRequestProto, opts ...grpc.CallOption) (*GetBlockKeysResponseProto, error)
	// *
	// Get the transaction ID of the most recently persisted editlog record
	GetTransactionId(ctx context.Context, in *GetTransactionIdRequestProto, opts ...grpc.CallOption) (*GetTransactionIdResponseProto, error)
	// *
	// Get the transaction ID of the most recently persisted editlog record
	GetMostRecentCheckpointTxId(ctx context.Context, in *GetMostRecentCheckpointTxIdRequestProto, opts ...grpc.CallOption) (*GetMostRecentCheckpointTxIdResponseProto, error)
	// *
	// Close the current editlog and open a new one for checkpointing purposes
	RollEditLog(ctx context.Context, in *RollEditLogRequestProto, opts ...grpc.CallOption) (*RollEditLogResponseProto, error)
	// *
	// Request info about the version running on this NameNode
	VersionRequest(ctx context.Context, in *VersionRequestProto, opts ...grpc.CallOption) (*VersionResponseProto, error)
	// *
	// Report from a sub-ordinate namenode of an error to the active namenode.
	// Active namenode may decide to unregister the reporting namenode
	// depending on the error.
	ErrorReport(ctx context.Context, in *ErrorReportRequestProto, opts ...grpc.CallOption) (*ErrorReportResponseProto, error)
	// *
	// Request to register a sub-ordinate namenode
	RegisterSubordinateNamenode(ctx context.Context, in *RegisterRequestProto, opts ...grpc.CallOption) (*RegisterResponseProto, error)
	// *
	// Request to start a checkpoint.
	StartCheckpoint(ctx context.Context, in *StartCheckpointRequestProto, opts ...grpc.CallOption) (*StartCheckpointResponseProto, error)
	// *
	// End of finalize the previously started checkpoint
	EndCheckpoint(ctx context.Context, in *EndCheckpointRequestProto, opts ...grpc.CallOption) (*EndCheckpointResponseProto, error)
	// *
	// Get editlog manifests from the active namenode for all the editlogs
	GetEditLogManifest(ctx context.Context, in *GetEditLogManifestRequestProto, opts ...grpc.CallOption) (*GetEditLogManifestResponseProto, error)
	// *
	// Return whether the NameNode is in upgrade state (false) or not (true)
	IsUpgradeFinalized(ctx context.Context, in *IsUpgradeFinalizedRequestProto, opts ...grpc.CallOption) (*IsUpgradeFinalizedResponseProto, error)
}

type namenodeProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewNamenodeProtocolServiceClient(cc *grpc.ClientConn) NamenodeProtocolServiceClient {
	return &namenodeProtocolServiceClient{cc}
}

func (c *namenodeProtocolServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequestProto, opts ...grpc.CallOption) (*GetBlocksResponseProto, error) {
	out := new(GetBlocksResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/getBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) GetBlockKeys(ctx context.Context, in *GetBlockKeysRequestProto, opts ...grpc.CallOption) (*GetBlockKeysResponseProto, error) {
	out := new(GetBlockKeysResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/getBlockKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) GetTransactionId(ctx context.Context, in *GetTransactionIdRequestProto, opts ...grpc.CallOption) (*GetTransactionIdResponseProto, error) {
	out := new(GetTransactionIdResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/getTransactionId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) GetMostRecentCheckpointTxId(ctx context.Context, in *GetMostRecentCheckpointTxIdRequestProto, opts ...grpc.CallOption) (*GetMostRecentCheckpointTxIdResponseProto, error) {
	out := new(GetMostRecentCheckpointTxIdResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/getMostRecentCheckpointTxId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) RollEditLog(ctx context.Context, in *RollEditLogRequestProto, opts ...grpc.CallOption) (*RollEditLogResponseProto, error) {
	out := new(RollEditLogResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/rollEditLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) VersionRequest(ctx context.Context, in *VersionRequestProto, opts ...grpc.CallOption) (*VersionResponseProto, error) {
	out := new(VersionResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/versionRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) ErrorReport(ctx context.Context, in *ErrorReportRequestProto, opts ...grpc.CallOption) (*ErrorReportResponseProto, error) {
	out := new(ErrorReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/errorReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) RegisterSubordinateNamenode(ctx context.Context, in *RegisterRequestProto, opts ...grpc.CallOption) (*RegisterResponseProto, error) {
	out := new(RegisterResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/registerSubordinateNamenode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) StartCheckpoint(ctx context.Context, in *StartCheckpointRequestProto, opts ...grpc.CallOption) (*StartCheckpointResponseProto, error) {
	out := new(StartCheckpointResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/startCheckpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) EndCheckpoint(ctx context.Context, in *EndCheckpointRequestProto, opts ...grpc.CallOption) (*EndCheckpointResponseProto, error) {
	out := new(EndCheckpointResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/endCheckpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) GetEditLogManifest(ctx context.Context, in *GetEditLogManifestRequestProto, opts ...grpc.CallOption) (*GetEditLogManifestResponseProto, error) {
	out := new(GetEditLogManifestResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/getEditLogManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeProtocolServiceClient) IsUpgradeFinalized(ctx context.Context, in *IsUpgradeFinalizedRequestProto, opts ...grpc.CallOption) (*IsUpgradeFinalizedResponseProto, error) {
	out := new(IsUpgradeFinalizedResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.namenode.NamenodeProtocolService/isUpgradeFinalized", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamenodeProtocolService service

type NamenodeProtocolServiceServer interface {
	// *
	// Get list of blocks for a given datanode with length
	// of blocks adding up to given size.
	GetBlocks(context.Context, *GetBlocksRequestProto) (*GetBlocksResponseProto, error)
	// *
	// Get the current block keys
	GetBlockKeys(context.Context, *GetBlockKeysRequestProto) (*GetBlockKeysResponseProto, error)
	// *
	// Get the transaction ID of the most recently persisted editlog record
	GetTransactionId(context.Context, *GetTransactionIdRequestProto) (*GetTransactionIdResponseProto, error)
	// *
	// Get the transaction ID of the most recently persisted editlog record
	GetMostRecentCheckpointTxId(context.Context, *GetMostRecentCheckpointTxIdRequestProto) (*GetMostRecentCheckpointTxIdResponseProto, error)
	// *
	// Close the current editlog and open a new one for checkpointing purposes
	RollEditLog(context.Context, *RollEditLogRequestProto) (*RollEditLogResponseProto, error)
	// *
	// Request info about the version running on this NameNode
	VersionRequest(context.Context, *VersionRequestProto) (*VersionResponseProto, error)
	// *
	// Report from a sub-ordinate namenode of an error to the active namenode.
	// Active namenode may decide to unregister the reporting namenode
	// depending on the error.
	ErrorReport(context.Context, *ErrorReportRequestProto) (*ErrorReportResponseProto, error)
	// *
	// Request to register a sub-ordinate namenode
	RegisterSubordinateNamenode(context.Context, *RegisterRequestProto) (*RegisterResponseProto, error)
	// *
	// Request to start a checkpoint.
	StartCheckpoint(context.Context, *StartCheckpointRequestProto) (*StartCheckpointResponseProto, error)
	// *
	// End of finalize the previously started checkpoint
	EndCheckpoint(context.Context, *EndCheckpointRequestProto) (*EndCheckpointResponseProto, error)
	// *
	// Get editlog manifests from the active namenode for all the editlogs
	GetEditLogManifest(context.Context, *GetEditLogManifestRequestProto) (*GetEditLogManifestResponseProto, error)
	// *
	// Return whether the NameNode is in upgrade state (false) or not (true)
	IsUpgradeFinalized(context.Context, *IsUpgradeFinalizedRequestProto) (*IsUpgradeFinalizedResponseProto, error)
}

func RegisterNamenodeProtocolServiceServer(s *grpc.Server, srv NamenodeProtocolServiceServer) {
	s.RegisterService(&_NamenodeProtocolService_serviceDesc, srv)
}

func _NamenodeProtocolService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).GetBlocks(ctx, req.(*GetBlocksRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_GetBlockKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockKeysRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).GetBlockKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/GetBlockKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).GetBlockKeys(ctx, req.(*GetBlockKeysRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_GetTransactionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionIdRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).GetTransactionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/GetTransactionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).GetTransactionId(ctx, req.(*GetTransactionIdRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_GetMostRecentCheckpointTxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostRecentCheckpointTxIdRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).GetMostRecentCheckpointTxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/GetMostRecentCheckpointTxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).GetMostRecentCheckpointTxId(ctx, req.(*GetMostRecentCheckpointTxIdRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_RollEditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollEditLogRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).RollEditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/RollEditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).RollEditLog(ctx, req.(*RollEditLogRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_VersionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).VersionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/VersionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).VersionRequest(ctx, req.(*VersionRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_ErrorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).ErrorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/ErrorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).ErrorReport(ctx, req.(*ErrorReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_RegisterSubordinateNamenode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).RegisterSubordinateNamenode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/RegisterSubordinateNamenode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).RegisterSubordinateNamenode(ctx, req.(*RegisterRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_StartCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCheckpointRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).StartCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/StartCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).StartCheckpoint(ctx, req.(*StartCheckpointRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_EndCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCheckpointRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).EndCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/EndCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).EndCheckpoint(ctx, req.(*EndCheckpointRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_GetEditLogManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditLogManifestRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).GetEditLogManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/GetEditLogManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).GetEditLogManifest(ctx, req.(*GetEditLogManifestRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeProtocolService_IsUpgradeFinalized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUpgradeFinalizedRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeProtocolServiceServer).IsUpgradeFinalized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.namenode.NamenodeProtocolService/IsUpgradeFinalized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeProtocolServiceServer).IsUpgradeFinalized(ctx, req.(*IsUpgradeFinalizedRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamenodeProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.hdfs.namenode.NamenodeProtocolService",
	HandlerType: (*NamenodeProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlocks",
			Handler:    _NamenodeProtocolService_GetBlocks_Handler,
		},
		{
			MethodName: "getBlockKeys",
			Handler:    _NamenodeProtocolService_GetBlockKeys_Handler,
		},
		{
			MethodName: "getTransactionId",
			Handler:    _NamenodeProtocolService_GetTransactionId_Handler,
		},
		{
			MethodName: "getMostRecentCheckpointTxId",
			Handler:    _NamenodeProtocolService_GetMostRecentCheckpointTxId_Handler,
		},
		{
			MethodName: "rollEditLog",
			Handler:    _NamenodeProtocolService_RollEditLog_Handler,
		},
		{
			MethodName: "versionRequest",
			Handler:    _NamenodeProtocolService_VersionRequest_Handler,
		},
		{
			MethodName: "errorReport",
			Handler:    _NamenodeProtocolService_ErrorReport_Handler,
		},
		{
			MethodName: "registerSubordinateNamenode",
			Handler:    _NamenodeProtocolService_RegisterSubordinateNamenode_Handler,
		},
		{
			MethodName: "startCheckpoint",
			Handler:    _NamenodeProtocolService_StartCheckpoint_Handler,
		},
		{
			MethodName: "endCheckpoint",
			Handler:    _NamenodeProtocolService_EndCheckpoint_Handler,
		},
		{
			MethodName: "getEditLogManifest",
			Handler:    _NamenodeProtocolService_GetEditLogManifest_Handler,
		},
		{
			MethodName: "isUpgradeFinalized",
			Handler:    _NamenodeProtocolService_IsUpgradeFinalized_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor21,
}

func init() { proto.RegisterFile("NamenodeProtocol.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x57, 0x5d, 0x53, 0xf3, 0x44,
	0x14, 0x9e, 0x00, 0xa3, 0xf4, 0x00, 0xca, 0xec, 0xf0, 0x51, 0x42, 0xe5, 0x23, 0x0e, 0x82, 0xa2,
	0x51, 0x8b, 0x8e, 0xce, 0x38, 0x70, 0x41, 0xa9, 0x5a, 0x05, 0x47, 0xd3, 0x22, 0x17, 0x5e, 0x38,
	0x21, 0xd9, 0xa6, 0x19, 0xda, 0x6c, 0xdc, 0x5d, 0x98, 0xaa, 0x57, 0xde, 0xf9, 0x07, 0xbc, 0xf3,
	0xe2, 0xfd, 0x01, 0xef, 0xcc, 0xfb, 0x17, 0xdf, 0xcd, 0x47, 0xc9, 0x6e, 0x9a, 0xb4, 0x1d, 0xe6,
	0xe5, 0x8a, 0x65, 0xf7, 0x3c, 0xe7, 0x39, 0xcf, 0x76, 0xcf, 0x79, 0x5a, 0xd8, 0xf8, 0xc9, 0x1e,
	0xe0, 0x80, 0xb8, 0xf8, 0x67, 0x4a, 0x38, 0x71, 0x48, 0xdf, 0x0c, 0xa3, 0x05, 0x5a, 0xeb, 0xd9,
	0x2e, 0x21, 0xa1, 0xd9, 0x73, 0xbb, 0xcc, 0x0c, 0xd2, 0x18, 0x1d, 0xe2, 0x7f, 0xe3, 0x08, 0x7d,
	0xf5, 0x7b, 0xb1, 0x6e, 0x63, 0xfa, 0x80, 0x69, 0xb2, 0x63, 0x60, 0x58, 0xff, 0x0e, 0xf3, 0xf3,
	0x3e, 0x71, 0xee, 0x98, 0x85, 0xff, 0xb8, 0xc7, 0x8c, 0xc7, 0x59, 0xd1, 0xd7, 0xb0, 0xe8, 0xda,
	0xdc, 0x8e, 0x52, 0x54, 0xb5, 0xbd, 0xb9, 0xa3, 0xa5, 0x7a, 0xcd, 0x94, 0xf3, 0x5f, 0xa4, 0x87,
	0xad, 0x8b, 0x38, 0xde, 0x7a, 0x8c, 0x46, 0x08, 0x16, 0x98, 0xff, 0x17, 0xae, 0xce, 0x09, 0xd4,
	0x82, 0x15, 0xaf, 0x8d, 0x1b, 0xd8, 0x90, 0x68, 0x58, 0x48, 0x02, 0x96, 0x54, 0x8f, 0x4e, 0xe1,
	0xad, 0xdb, 0x78, 0x3b, 0x65, 0x39, 0x50, 0x58, 0x12, 0xc4, 0x8d, 0xcf, 0x7b, 0x97, 0xc4, 0xb1,
	0xb9, 0x2f, 0x70, 0x09, 0x5d, 0x0a, 0x32, 0x74, 0xa8, 0x8e, 0x12, 0xff, 0x88, 0xff, 0x54, 0x24,
	0x18, 0x1d, 0xd8, 0x52, 0xcf, 0x64, 0xde, 0xaf, 0x60, 0xe1, 0x4e, 0x6c, 0x0a, 0x56, 0x4d, 0xb0,
	0xbe, 0xaf, 0xb0, 0x36, 0x87, 0x21, 0xa1, 0x1c, 0xbb, 0x8f, 0xd0, 0x84, 0x33, 0x06, 0x18, 0x3b,
	0x50, 0x13, 0x59, 0x3b, 0xd4, 0x0e, 0x98, 0xed, 0x44, 0x15, 0xb5, 0x5c, 0x85, 0xf5, 0x04, 0xde,
	0x1b, 0x3f, 0x97, 0x99, 0xc5, 0xfd, 0xf0, 0x61, 0xcb, 0x8d, 0xf5, 0x8a, 0xfb, 0x89, 0xd6, 0xc6,
	0x16, 0x6c, 0x5a, 0xa4, 0xdf, 0x6f, 0xba, 0x3e, 0xbf, 0x24, 0x9e, 0x92, 0xef, 0x77, 0xa8, 0x2a,
	0x47, 0x72, 0xaa, 0x06, 0x54, 0x98, 0xef, 0x05, 0x36, 0xbf, 0xa7, 0xb8, 0xf0, 0xfe, 0x1a, 0x3d,
	0xec, 0xdc, 0x85, 0xc4, 0x0f, 0x78, 0x7b, 0x14, 0x97, 0x68, 0xc9, 0x70, 0xc6, 0x87, 0x70, 0x28,
	0x0a, 0xbe, 0x22, 0x8c, 0x5b, 0xd8, 0xc1, 0x01, 0xcf, 0x30, 0x9d, 0x61, 0x4e, 0xdb, 0x19, 0x1c,
	0x4d, 0x0c, 0x9d, 0x26, 0xf3, 0x3f, 0x0d, 0x36, 0x9b, 0x94, 0x12, 0x6a, 0xe1, 0xe8, 0x86, 0x95,
	0x07, 0xf7, 0x03, 0x2c, 0x53, 0xec, 0xf9, 0x8c, 0xd3, 0xf8, 0x73, 0x4e, 0xe5, 0x7c, 0xa0, 0xc8,
	0x19, 0x3d, 0x7c, 0x4b, 0x0a, 0x4c, 0xf4, 0x28, 0x58, 0x54, 0x83, 0x0a, 0x8e, 0x68, 0x1a, 0xd1,
	0xeb, 0x8d, 0xde, 0xe1, 0x8a, 0x95, 0x6d, 0xa0, 0x55, 0x98, 0x1f, 0x30, 0xaf, 0x3a, 0x2f, 0xf6,
	0x2b, 0x56, 0xb4, 0x8c, 0x5e, 0x91, 0x52, 0x96, 0xa4, 0xc3, 0xb8, 0x85, 0xb5, 0x84, 0x0e, 0xd3,
	0xe7, 0xaa, 0xd7, 0x70, 0x60, 0x3d, 0xe3, 0x90, 0x2f, 0xf1, 0x4d, 0x92, 0xf8, 0xb0, 0xdd, 0xe6,
	0x36, 0x95, 0x3e, 0xb4, 0x67, 0xd3, 0xf3, 0x1b, 0xd4, 0xc6, 0xa8, 0x64, 0x59, 0xdf, 0xc0, 0xdb,
	0x0e, 0x19, 0x0c, 0xec, 0xc0, 0x4d, 0x69, 0xf6, 0x0b, 0x69, 0x1a, 0x49, 0x4c, 0xc2, 0x30, 0x42,
	0x18, 0x2f, 0x35, 0xd8, 0x6a, 0x06, 0xee, 0xf3, 0xcb, 0x50, 0xdb, 0x6b, 0xee, 0x89, 0xed, 0x55,
	0x03, 0x3d, 0x57, 0xad, 0xfc, 0xba, 0xce, 0x60, 0x47, 0x74, 0x54, 0xda, 0xdc, 0x57, 0x76, 0xe0,
	0x77, 0x31, 0x53, 0x05, 0xd5, 0xa2, 0x22, 0x02, 0x07, 0x77, 0xb2, 0x66, 0xca, 0x36, 0x8c, 0x2e,
	0xec, 0x16, 0xe1, 0xd5, 0x21, 0xb1, 0x38, 0x48, 0x0f, 0xd2, 0xdb, 0x38, 0x54, 0x44, 0x58, 0x78,
	0x40, 0x38, 0xce, 0xa5, 0x48, 0x87, 0xfa, 0x08, 0x68, 0xec, 0xc1, 0x4e, 0x8b, 0x5d, 0x87, 0x1e,
	0xb5, 0x5d, 0xfc, 0xad, 0x1f, 0xd8, 0x7d, 0x31, 0xd5, 0xd5, 0xd9, 0xf0, 0x0b, 0xec, 0x16, 0x45,
	0xc8, 0x95, 0x98, 0x80, 0xfc, 0xb1, 0x90, 0xb8, 0xa6, 0x45, 0xab, 0xe0, 0xa4, 0xfe, 0x6a, 0x09,
	0x36, 0xf3, 0x5e, 0x17, 0xb9, 0x97, 0xef, 0x60, 0xd4, 0x85, 0x8a, 0x37, 0x72, 0x14, 0x74, 0x6c,
	0x16, 0x59, 0x9f, 0x59, 0xe8, 0x6c, 0xfa, 0xc7, 0x53, 0x83, 0xe5, 0x9a, 0x09, 0x2c, 0x7b, 0x92,
	0x89, 0x20, 0x73, 0x32, 0x3a, 0x6f, 0x42, 0xfa, 0xa7, 0xb3, 0xc4, 0xcb, 0x84, 0x7f, 0xc3, 0xaa,
	0x97, 0xf3, 0x0f, 0x54, 0x2f, 0x4d, 0x52, 0xea, 0x43, 0xfa, 0xc9, 0xac, 0x18, 0x99, 0xfc, 0x7f,
	0x0d, 0xb6, 0xbd, 0xf2, 0x09, 0x8f, 0x4e, 0x4b, 0x93, 0xce, 0xe2, 0x1f, 0xfa, 0xd9, 0x13, 0xe0,
	0x72, 0x79, 0x7d, 0x58, 0xa2, 0x99, 0x17, 0xa2, 0x4f, 0x8a, 0xd3, 0x95, 0x38, 0xa9, 0x6e, 0xce,
	0x10, 0x2e, 0xb3, 0x5d, 0xc3, 0x3b, 0xe2, 0x8b, 0x12, 0x13, 0xd7, 0x94, 0xa6, 0x41, 0x7b, 0x4a,
	0x86, 0x5f, 0x95, 0xc3, 0x84, 0x63, 0xbf, 0x38, 0x22, 0x27, 0x02, 0x67, 0x66, 0x53, 0x26, 0xa2,
	0xc4, 0x26, 0xcb, 0x44, 0x94, 0xd9, 0x17, 0x7a, 0x80, 0x6d, 0x9a, 0x5a, 0x4b, 0xfb, 0xfe, 0x96,
	0x50, 0x57, 0x74, 0x17, 0xc7, 0xa3, 0xae, 0x42, 0x1f, 0x95, 0xdc, 0x49, 0x81, 0xe3, 0xe9, 0xc7,
	0xd3, 0x62, 0x65, 0xde, 0x21, 0xbc, 0xcb, 0x54, 0x0b, 0x40, 0x9f, 0x17, 0xe3, 0x27, 0x98, 0x92,
	0x5e, 0x9f, 0x11, 0x22, 0x33, 0x53, 0x58, 0xc1, 0xf2, 0xc0, 0x45, 0x25, 0x2d, 0x58, 0xea, 0x21,
	0xfa, 0x67, 0x33, 0x01, 0x64, 0xce, 0x7f, 0x34, 0x40, 0xde, 0xd8, 0x1c, 0x46, 0x5f, 0x94, 0xbe,
	0xf7, 0x09, 0x13, 0x5f, 0xff, 0x72, 0x76, 0x54, 0xbe, 0x86, 0xf1, 0x21, 0x5a, 0x56, 0xc3, 0xe4,
	0x69, 0x5e, 0x56, 0xc3, 0x94, 0x09, 0x7f, 0xde, 0x84, 0x03, 0x42, 0x3d, 0xd3, 0x0e, 0x6d, 0xa7,
	0x87, 0x95, 0x14, 0xa1, 0xf2, 0x5b, 0xe5, 0x7c, 0xec, 0x37, 0x4c, 0xfc, 0x97, 0xfd, 0xab, 0x69,
	0x2f, 0x34, 0xed, 0x75, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x58, 0x42, 0xcc, 0xe2, 0x0c, 0x00,
	0x00,
}
