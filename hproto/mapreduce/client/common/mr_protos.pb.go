// Code generated by protoc-gen-go.
// source: mr_protos.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	mr_protos.proto

It has these top-level messages:
	JobIdProto
	TaskIdProto
	TaskAttemptIdProto
	CounterProto
	CounterGroupProto
	CountersProto
	TaskReportProto
	TaskAttemptReportProto
	JobReportProto
	AMInfoProto
	TaskAttemptCompletionEventProto
	StringCounterMapProto
	StringCounterGroupMapProto
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_yarn "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskTypeProto int32

const (
	TaskTypeProto_MAP    TaskTypeProto = 1
	TaskTypeProto_REDUCE TaskTypeProto = 2
)

var TaskTypeProto_name = map[int32]string{
	1: "MAP",
	2: "REDUCE",
}
var TaskTypeProto_value = map[string]int32{
	"MAP":    1,
	"REDUCE": 2,
}

func (x TaskTypeProto) Enum() *TaskTypeProto {
	p := new(TaskTypeProto)
	*p = x
	return p
}
func (x TaskTypeProto) String() string {
	return proto.EnumName(TaskTypeProto_name, int32(x))
}
func (x *TaskTypeProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskTypeProto_value, data, "TaskTypeProto")
	if err != nil {
		return err
	}
	*x = TaskTypeProto(value)
	return nil
}
func (TaskTypeProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TaskStateProto int32

const (
	TaskStateProto_TS_NEW       TaskStateProto = 1
	TaskStateProto_TS_SCHEDULED TaskStateProto = 2
	TaskStateProto_TS_RUNNING   TaskStateProto = 3
	TaskStateProto_TS_SUCCEEDED TaskStateProto = 4
	TaskStateProto_TS_FAILED    TaskStateProto = 5
	TaskStateProto_TS_KILLED    TaskStateProto = 6
)

var TaskStateProto_name = map[int32]string{
	1: "TS_NEW",
	2: "TS_SCHEDULED",
	3: "TS_RUNNING",
	4: "TS_SUCCEEDED",
	5: "TS_FAILED",
	6: "TS_KILLED",
}
var TaskStateProto_value = map[string]int32{
	"TS_NEW":       1,
	"TS_SCHEDULED": 2,
	"TS_RUNNING":   3,
	"TS_SUCCEEDED": 4,
	"TS_FAILED":    5,
	"TS_KILLED":    6,
}

func (x TaskStateProto) Enum() *TaskStateProto {
	p := new(TaskStateProto)
	*p = x
	return p
}
func (x TaskStateProto) String() string {
	return proto.EnumName(TaskStateProto_name, int32(x))
}
func (x *TaskStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskStateProto_value, data, "TaskStateProto")
	if err != nil {
		return err
	}
	*x = TaskStateProto(value)
	return nil
}
func (TaskStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PhaseProto int32

const (
	PhaseProto_P_STARTING PhaseProto = 1
	PhaseProto_P_MAP      PhaseProto = 2
	PhaseProto_P_SHUFFLE  PhaseProto = 3
	PhaseProto_P_SORT     PhaseProto = 4
	PhaseProto_P_REDUCE   PhaseProto = 5
	PhaseProto_P_CLEANUP  PhaseProto = 6
)

var PhaseProto_name = map[int32]string{
	1: "P_STARTING",
	2: "P_MAP",
	3: "P_SHUFFLE",
	4: "P_SORT",
	5: "P_REDUCE",
	6: "P_CLEANUP",
}
var PhaseProto_value = map[string]int32{
	"P_STARTING": 1,
	"P_MAP":      2,
	"P_SHUFFLE":  3,
	"P_SORT":     4,
	"P_REDUCE":   5,
	"P_CLEANUP":  6,
}

func (x PhaseProto) Enum() *PhaseProto {
	p := new(PhaseProto)
	*p = x
	return p
}
func (x PhaseProto) String() string {
	return proto.EnumName(PhaseProto_name, int32(x))
}
func (x *PhaseProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhaseProto_value, data, "PhaseProto")
	if err != nil {
		return err
	}
	*x = PhaseProto(value)
	return nil
}
func (PhaseProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TaskAttemptStateProto int32

const (
	TaskAttemptStateProto_TA_NEW            TaskAttemptStateProto = 1
	TaskAttemptStateProto_TA_STARTING       TaskAttemptStateProto = 2
	TaskAttemptStateProto_TA_RUNNING        TaskAttemptStateProto = 3
	TaskAttemptStateProto_TA_COMMIT_PENDING TaskAttemptStateProto = 4
	TaskAttemptStateProto_TA_SUCCEEDED      TaskAttemptStateProto = 5
	TaskAttemptStateProto_TA_FAILED         TaskAttemptStateProto = 6
	TaskAttemptStateProto_TA_KILLED         TaskAttemptStateProto = 7
)

var TaskAttemptStateProto_name = map[int32]string{
	1: "TA_NEW",
	2: "TA_STARTING",
	3: "TA_RUNNING",
	4: "TA_COMMIT_PENDING",
	5: "TA_SUCCEEDED",
	6: "TA_FAILED",
	7: "TA_KILLED",
}
var TaskAttemptStateProto_value = map[string]int32{
	"TA_NEW":            1,
	"TA_STARTING":       2,
	"TA_RUNNING":        3,
	"TA_COMMIT_PENDING": 4,
	"TA_SUCCEEDED":      5,
	"TA_FAILED":         6,
	"TA_KILLED":         7,
}

func (x TaskAttemptStateProto) Enum() *TaskAttemptStateProto {
	p := new(TaskAttemptStateProto)
	*p = x
	return p
}
func (x TaskAttemptStateProto) String() string {
	return proto.EnumName(TaskAttemptStateProto_name, int32(x))
}
func (x *TaskAttemptStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskAttemptStateProto_value, data, "TaskAttemptStateProto")
	if err != nil {
		return err
	}
	*x = TaskAttemptStateProto(value)
	return nil
}
func (TaskAttemptStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JobStateProto int32

const (
	JobStateProto_J_NEW       JobStateProto = 1
	JobStateProto_J_INITED    JobStateProto = 2
	JobStateProto_J_RUNNING   JobStateProto = 3
	JobStateProto_J_SUCCEEDED JobStateProto = 4
	JobStateProto_J_FAILED    JobStateProto = 5
	JobStateProto_J_KILLED    JobStateProto = 6
	JobStateProto_J_ERROR     JobStateProto = 7
)

var JobStateProto_name = map[int32]string{
	1: "J_NEW",
	2: "J_INITED",
	3: "J_RUNNING",
	4: "J_SUCCEEDED",
	5: "J_FAILED",
	6: "J_KILLED",
	7: "J_ERROR",
}
var JobStateProto_value = map[string]int32{
	"J_NEW":       1,
	"J_INITED":    2,
	"J_RUNNING":   3,
	"J_SUCCEEDED": 4,
	"J_FAILED":    5,
	"J_KILLED":    6,
	"J_ERROR":     7,
}

func (x JobStateProto) Enum() *JobStateProto {
	p := new(JobStateProto)
	*p = x
	return p
}
func (x JobStateProto) String() string {
	return proto.EnumName(JobStateProto_name, int32(x))
}
func (x *JobStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JobStateProto_value, data, "JobStateProto")
	if err != nil {
		return err
	}
	*x = JobStateProto(value)
	return nil
}
func (JobStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TaskAttemptCompletionEventStatusProto int32

const (
	TaskAttemptCompletionEventStatusProto_TACE_FAILED    TaskAttemptCompletionEventStatusProto = 1
	TaskAttemptCompletionEventStatusProto_TACE_KILLED    TaskAttemptCompletionEventStatusProto = 2
	TaskAttemptCompletionEventStatusProto_TACE_SUCCEEDED TaskAttemptCompletionEventStatusProto = 3
	TaskAttemptCompletionEventStatusProto_TACE_OBSOLETE  TaskAttemptCompletionEventStatusProto = 4
	TaskAttemptCompletionEventStatusProto_TACE_TIPFAILED TaskAttemptCompletionEventStatusProto = 5
)

var TaskAttemptCompletionEventStatusProto_name = map[int32]string{
	1: "TACE_FAILED",
	2: "TACE_KILLED",
	3: "TACE_SUCCEEDED",
	4: "TACE_OBSOLETE",
	5: "TACE_TIPFAILED",
}
var TaskAttemptCompletionEventStatusProto_value = map[string]int32{
	"TACE_FAILED":    1,
	"TACE_KILLED":    2,
	"TACE_SUCCEEDED": 3,
	"TACE_OBSOLETE":  4,
	"TACE_TIPFAILED": 5,
}

func (x TaskAttemptCompletionEventStatusProto) Enum() *TaskAttemptCompletionEventStatusProto {
	p := new(TaskAttemptCompletionEventStatusProto)
	*p = x
	return p
}
func (x TaskAttemptCompletionEventStatusProto) String() string {
	return proto.EnumName(TaskAttemptCompletionEventStatusProto_name, int32(x))
}
func (x *TaskAttemptCompletionEventStatusProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskAttemptCompletionEventStatusProto_value, data, "TaskAttemptCompletionEventStatusProto")
	if err != nil {
		return err
	}
	*x = TaskAttemptCompletionEventStatusProto(value)
	return nil
}
func (TaskAttemptCompletionEventStatusProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

type JobIdProto struct {
	AppId            *hadoop_yarn.ApplicationIdProto `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Id               *int32                          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *JobIdProto) Reset()                    { *m = JobIdProto{} }
func (m *JobIdProto) String() string            { return proto.CompactTextString(m) }
func (*JobIdProto) ProtoMessage()               {}
func (*JobIdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobIdProto) GetAppId() *hadoop_yarn.ApplicationIdProto {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *JobIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type TaskIdProto struct {
	JobId            *JobIdProto    `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	TaskType         *TaskTypeProto `protobuf:"varint,2,opt,name=task_type,json=taskType,enum=hadoop.mapreduce.TaskTypeProto" json:"task_type,omitempty"`
	Id               *int32         `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TaskIdProto) Reset()                    { *m = TaskIdProto{} }
func (m *TaskIdProto) String() string            { return proto.CompactTextString(m) }
func (*TaskIdProto) ProtoMessage()               {}
func (*TaskIdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskIdProto) GetJobId() *JobIdProto {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *TaskIdProto) GetTaskType() TaskTypeProto {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return TaskTypeProto_MAP
}

func (m *TaskIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type TaskAttemptIdProto struct {
	TaskId           *TaskIdProto `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Id               *int32       `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TaskAttemptIdProto) Reset()                    { *m = TaskAttemptIdProto{} }
func (m *TaskAttemptIdProto) String() string            { return proto.CompactTextString(m) }
func (*TaskAttemptIdProto) ProtoMessage()               {}
func (*TaskAttemptIdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskAttemptIdProto) GetTaskId() *TaskIdProto {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskAttemptIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type CounterProto struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Value            *int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterProto) Reset()                    { *m = CounterProto{} }
func (m *CounterProto) String() string            { return proto.CompactTextString(m) }
func (*CounterProto) ProtoMessage()               {}
func (*CounterProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CounterProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CounterProto) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *CounterProto) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type CounterGroupProto struct {
	Name             *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      *string                  `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Counters         []*StringCounterMapProto `protobuf:"bytes,3,rep,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CounterGroupProto) Reset()                    { *m = CounterGroupProto{} }
func (m *CounterGroupProto) String() string            { return proto.CompactTextString(m) }
func (*CounterGroupProto) ProtoMessage()               {}
func (*CounterGroupProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CounterGroupProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CounterGroupProto) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *CounterGroupProto) GetCounters() []*StringCounterMapProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

type CountersProto struct {
	CounterGroups    []*StringCounterGroupMapProto `protobuf:"bytes,1,rep,name=counter_groups,json=counterGroups" json:"counter_groups,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CountersProto) Reset()                    { *m = CountersProto{} }
func (m *CountersProto) String() string            { return proto.CompactTextString(m) }
func (*CountersProto) ProtoMessage()               {}
func (*CountersProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CountersProto) GetCounterGroups() []*StringCounterGroupMapProto {
	if m != nil {
		return m.CounterGroups
	}
	return nil
}

type TaskReportProto struct {
	TaskId            *TaskIdProto          `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	TaskState         *TaskStateProto       `protobuf:"varint,2,opt,name=task_state,json=taskState,enum=hadoop.mapreduce.TaskStateProto" json:"task_state,omitempty"`
	Progress          *float32              `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime         *int64                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime        *int64                `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters          *CountersProto        `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	RunningAttempts   []*TaskAttemptIdProto `protobuf:"bytes,7,rep,name=running_attempts,json=runningAttempts" json:"running_attempts,omitempty"`
	SuccessfulAttempt *TaskAttemptIdProto   `protobuf:"bytes,8,opt,name=successful_attempt,json=successfulAttempt" json:"successful_attempt,omitempty"`
	Diagnostics       []string              `protobuf:"bytes,9,rep,name=diagnostics" json:"diagnostics,omitempty"`
	XXX_unrecognized  []byte                `json:"-"`
}

func (m *TaskReportProto) Reset()                    { *m = TaskReportProto{} }
func (m *TaskReportProto) String() string            { return proto.CompactTextString(m) }
func (*TaskReportProto) ProtoMessage()               {}
func (*TaskReportProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TaskReportProto) GetTaskId() *TaskIdProto {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskReportProto) GetTaskState() TaskStateProto {
	if m != nil && m.TaskState != nil {
		return *m.TaskState
	}
	return TaskStateProto_TS_NEW
}

func (m *TaskReportProto) GetProgress() float32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *TaskReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TaskReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *TaskReportProto) GetCounters() *CountersProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *TaskReportProto) GetRunningAttempts() []*TaskAttemptIdProto {
	if m != nil {
		return m.RunningAttempts
	}
	return nil
}

func (m *TaskReportProto) GetSuccessfulAttempt() *TaskAttemptIdProto {
	if m != nil {
		return m.SuccessfulAttempt
	}
	return nil
}

func (m *TaskReportProto) GetDiagnostics() []string {
	if m != nil {
		return m.Diagnostics
	}
	return nil
}

type TaskAttemptReportProto struct {
	TaskAttemptId       *TaskAttemptIdProto           `protobuf:"bytes,1,opt,name=task_attempt_id,json=taskAttemptId" json:"task_attempt_id,omitempty"`
	TaskAttemptState    *TaskAttemptStateProto        `protobuf:"varint,2,opt,name=task_attempt_state,json=taskAttemptState,enum=hadoop.mapreduce.TaskAttemptStateProto" json:"task_attempt_state,omitempty"`
	Progress            *float32                      `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime           *int64                        `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime          *int64                        `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters            *CountersProto                `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	DiagnosticInfo      *string                       `protobuf:"bytes,7,opt,name=diagnostic_info,json=diagnosticInfo" json:"diagnostic_info,omitempty"`
	StateString         *string                       `protobuf:"bytes,8,opt,name=state_string,json=stateString" json:"state_string,omitempty"`
	Phase               *PhaseProto                   `protobuf:"varint,9,opt,name=phase,enum=hadoop.mapreduce.PhaseProto" json:"phase,omitempty"`
	ShuffleFinishTime   *int64                        `protobuf:"varint,10,opt,name=shuffle_finish_time,json=shuffleFinishTime" json:"shuffle_finish_time,omitempty"`
	SortFinishTime      *int64                        `protobuf:"varint,11,opt,name=sort_finish_time,json=sortFinishTime" json:"sort_finish_time,omitempty"`
	NodeManagerHost     *string                       `protobuf:"bytes,12,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort     *int32                        `protobuf:"varint,13,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort *int32                        `protobuf:"varint,14,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
	ContainerId         *hadoop_yarn.ContainerIdProto `protobuf:"bytes,15,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	XXX_unrecognized    []byte                        `json:"-"`
}

func (m *TaskAttemptReportProto) Reset()                    { *m = TaskAttemptReportProto{} }
func (m *TaskAttemptReportProto) String() string            { return proto.CompactTextString(m) }
func (*TaskAttemptReportProto) ProtoMessage()               {}
func (*TaskAttemptReportProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TaskAttemptReportProto) GetTaskAttemptId() *TaskAttemptIdProto {
	if m != nil {
		return m.TaskAttemptId
	}
	return nil
}

func (m *TaskAttemptReportProto) GetTaskAttemptState() TaskAttemptStateProto {
	if m != nil && m.TaskAttemptState != nil {
		return *m.TaskAttemptState
	}
	return TaskAttemptStateProto_TA_NEW
}

func (m *TaskAttemptReportProto) GetProgress() float32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *TaskAttemptReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetCounters() *CountersProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *TaskAttemptReportProto) GetDiagnosticInfo() string {
	if m != nil && m.DiagnosticInfo != nil {
		return *m.DiagnosticInfo
	}
	return ""
}

func (m *TaskAttemptReportProto) GetStateString() string {
	if m != nil && m.StateString != nil {
		return *m.StateString
	}
	return ""
}

func (m *TaskAttemptReportProto) GetPhase() PhaseProto {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return PhaseProto_P_STARTING
}

func (m *TaskAttemptReportProto) GetShuffleFinishTime() int64 {
	if m != nil && m.ShuffleFinishTime != nil {
		return *m.ShuffleFinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetSortFinishTime() int64 {
	if m != nil && m.SortFinishTime != nil {
		return *m.SortFinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetNodeManagerHost() string {
	if m != nil && m.NodeManagerHost != nil {
		return *m.NodeManagerHost
	}
	return ""
}

func (m *TaskAttemptReportProto) GetNodeManagerPort() int32 {
	if m != nil && m.NodeManagerPort != nil {
		return *m.NodeManagerPort
	}
	return 0
}

func (m *TaskAttemptReportProto) GetNodeManagerHttpPort() int32 {
	if m != nil && m.NodeManagerHttpPort != nil {
		return *m.NodeManagerHttpPort
	}
	return 0
}

func (m *TaskAttemptReportProto) GetContainerId() *hadoop_yarn.ContainerIdProto {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

type JobReportProto struct {
	JobId            *JobIdProto                `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobState         *JobStateProto             `protobuf:"varint,2,opt,name=job_state,json=jobState,enum=hadoop.mapreduce.JobStateProto" json:"job_state,omitempty"`
	MapProgress      *float32                   `protobuf:"fixed32,3,opt,name=map_progress,json=mapProgress" json:"map_progress,omitempty"`
	ReduceProgress   *float32                   `protobuf:"fixed32,4,opt,name=reduce_progress,json=reduceProgress" json:"reduce_progress,omitempty"`
	CleanupProgress  *float32                   `protobuf:"fixed32,5,opt,name=cleanup_progress,json=cleanupProgress" json:"cleanup_progress,omitempty"`
	SetupProgress    *float32                   `protobuf:"fixed32,6,opt,name=setup_progress,json=setupProgress" json:"setup_progress,omitempty"`
	StartTime        *int64                     `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime       *int64                     `protobuf:"varint,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	User             *string                    `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	JobName          *string                    `protobuf:"bytes,10,opt,name=jobName" json:"jobName,omitempty"`
	TrackingUrl      *string                    `protobuf:"bytes,11,opt,name=trackingUrl" json:"trackingUrl,omitempty"`
	Diagnostics      *string                    `protobuf:"bytes,12,opt,name=diagnostics" json:"diagnostics,omitempty"`
	JobFile          *string                    `protobuf:"bytes,13,opt,name=jobFile" json:"jobFile,omitempty"`
	AmInfos          []*AMInfoProto             `protobuf:"bytes,14,rep,name=am_infos,json=amInfos" json:"am_infos,omitempty"`
	SubmitTime       *int64                     `protobuf:"varint,15,opt,name=submit_time,json=submitTime" json:"submit_time,omitempty"`
	IsUber           *bool                      `protobuf:"varint,16,opt,name=is_uber,json=isUber,def=0" json:"is_uber,omitempty"`
	JobPriority      *hadoop_yarn.PriorityProto `protobuf:"bytes,17,opt,name=jobPriority" json:"jobPriority,omitempty"`
	HistoryFile      *string                    `protobuf:"bytes,18,opt,name=historyFile" json:"historyFile,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *JobReportProto) Reset()                    { *m = JobReportProto{} }
func (m *JobReportProto) String() string            { return proto.CompactTextString(m) }
func (*JobReportProto) ProtoMessage()               {}
func (*JobReportProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

const Default_JobReportProto_IsUber bool = false

func (m *JobReportProto) GetJobId() *JobIdProto {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *JobReportProto) GetJobState() JobStateProto {
	if m != nil && m.JobState != nil {
		return *m.JobState
	}
	return JobStateProto_J_NEW
}

func (m *JobReportProto) GetMapProgress() float32 {
	if m != nil && m.MapProgress != nil {
		return *m.MapProgress
	}
	return 0
}

func (m *JobReportProto) GetReduceProgress() float32 {
	if m != nil && m.ReduceProgress != nil {
		return *m.ReduceProgress
	}
	return 0
}

func (m *JobReportProto) GetCleanupProgress() float32 {
	if m != nil && m.CleanupProgress != nil {
		return *m.CleanupProgress
	}
	return 0
}

func (m *JobReportProto) GetSetupProgress() float32 {
	if m != nil && m.SetupProgress != nil {
		return *m.SetupProgress
	}
	return 0
}

func (m *JobReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *JobReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *JobReportProto) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *JobReportProto) GetJobName() string {
	if m != nil && m.JobName != nil {
		return *m.JobName
	}
	return ""
}

func (m *JobReportProto) GetTrackingUrl() string {
	if m != nil && m.TrackingUrl != nil {
		return *m.TrackingUrl
	}
	return ""
}

func (m *JobReportProto) GetDiagnostics() string {
	if m != nil && m.Diagnostics != nil {
		return *m.Diagnostics
	}
	return ""
}

func (m *JobReportProto) GetJobFile() string {
	if m != nil && m.JobFile != nil {
		return *m.JobFile
	}
	return ""
}

func (m *JobReportProto) GetAmInfos() []*AMInfoProto {
	if m != nil {
		return m.AmInfos
	}
	return nil
}

func (m *JobReportProto) GetSubmitTime() int64 {
	if m != nil && m.SubmitTime != nil {
		return *m.SubmitTime
	}
	return 0
}

func (m *JobReportProto) GetIsUber() bool {
	if m != nil && m.IsUber != nil {
		return *m.IsUber
	}
	return Default_JobReportProto_IsUber
}

func (m *JobReportProto) GetJobPriority() *hadoop_yarn.PriorityProto {
	if m != nil {
		return m.JobPriority
	}
	return nil
}

func (m *JobReportProto) GetHistoryFile() string {
	if m != nil && m.HistoryFile != nil {
		return *m.HistoryFile
	}
	return ""
}

type AMInfoProto struct {
	ApplicationAttemptId *hadoop_yarn.ApplicationAttemptIdProto `protobuf:"bytes,1,opt,name=application_attempt_id,json=applicationAttemptId" json:"application_attempt_id,omitempty"`
	StartTime            *int64                                 `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ContainerId          *hadoop_yarn.ContainerIdProto          `protobuf:"bytes,3,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	NodeManagerHost      *string                                `protobuf:"bytes,4,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort      *int32                                 `protobuf:"varint,5,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort  *int32                                 `protobuf:"varint,6,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
	XXX_unrecognized     []byte                                 `json:"-"`
}

func (m *AMInfoProto) Reset()                    { *m = AMInfoProto{} }
func (m *AMInfoProto) String() string            { return proto.CompactTextString(m) }
func (*AMInfoProto) ProtoMessage()               {}
func (*AMInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AMInfoProto) GetApplicationAttemptId() *hadoop_yarn.ApplicationAttemptIdProto {
	if m != nil {
		return m.ApplicationAttemptId
	}
	return nil
}

func (m *AMInfoProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *AMInfoProto) GetContainerId() *hadoop_yarn.ContainerIdProto {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

func (m *AMInfoProto) GetNodeManagerHost() string {
	if m != nil && m.NodeManagerHost != nil {
		return *m.NodeManagerHost
	}
	return ""
}

func (m *AMInfoProto) GetNodeManagerPort() int32 {
	if m != nil && m.NodeManagerPort != nil {
		return *m.NodeManagerPort
	}
	return 0
}

func (m *AMInfoProto) GetNodeManagerHttpPort() int32 {
	if m != nil && m.NodeManagerHttpPort != nil {
		return *m.NodeManagerHttpPort
	}
	return 0
}

type TaskAttemptCompletionEventProto struct {
	AttemptId              *TaskAttemptIdProto                    `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId" json:"attempt_id,omitempty"`
	Status                 *TaskAttemptCompletionEventStatusProto `protobuf:"varint,2,opt,name=status,enum=hadoop.mapreduce.TaskAttemptCompletionEventStatusProto" json:"status,omitempty"`
	MapOutputServerAddress *string                                `protobuf:"bytes,3,opt,name=map_output_server_address,json=mapOutputServerAddress" json:"map_output_server_address,omitempty"`
	AttemptRunTime         *int32                                 `protobuf:"varint,4,opt,name=attempt_run_time,json=attemptRunTime" json:"attempt_run_time,omitempty"`
	EventId                *int32                                 `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	XXX_unrecognized       []byte                                 `json:"-"`
}

func (m *TaskAttemptCompletionEventProto) Reset()         { *m = TaskAttemptCompletionEventProto{} }
func (m *TaskAttemptCompletionEventProto) String() string { return proto.CompactTextString(m) }
func (*TaskAttemptCompletionEventProto) ProtoMessage()    {}
func (*TaskAttemptCompletionEventProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *TaskAttemptCompletionEventProto) GetAttemptId() *TaskAttemptIdProto {
	if m != nil {
		return m.AttemptId
	}
	return nil
}

func (m *TaskAttemptCompletionEventProto) GetStatus() TaskAttemptCompletionEventStatusProto {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskAttemptCompletionEventStatusProto_TACE_FAILED
}

func (m *TaskAttemptCompletionEventProto) GetMapOutputServerAddress() string {
	if m != nil && m.MapOutputServerAddress != nil {
		return *m.MapOutputServerAddress
	}
	return ""
}

func (m *TaskAttemptCompletionEventProto) GetAttemptRunTime() int32 {
	if m != nil && m.AttemptRunTime != nil {
		return *m.AttemptRunTime
	}
	return 0
}

func (m *TaskAttemptCompletionEventProto) GetEventId() int32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

type StringCounterMapProto struct {
	Key              *string       `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *CounterProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *StringCounterMapProto) Reset()                    { *m = StringCounterMapProto{} }
func (m *StringCounterMapProto) String() string            { return proto.CompactTextString(m) }
func (*StringCounterMapProto) ProtoMessage()               {}
func (*StringCounterMapProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StringCounterMapProto) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringCounterMapProto) GetValue() *CounterProto {
	if m != nil {
		return m.Value
	}
	return nil
}

type StringCounterGroupMapProto struct {
	Key              *string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *CounterGroupProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *StringCounterGroupMapProto) Reset()                    { *m = StringCounterGroupMapProto{} }
func (m *StringCounterGroupMapProto) String() string            { return proto.CompactTextString(m) }
func (*StringCounterGroupMapProto) ProtoMessage()               {}
func (*StringCounterGroupMapProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StringCounterGroupMapProto) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringCounterGroupMapProto) GetValue() *CounterGroupProto {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*JobIdProto)(nil), "hadoop.mapreduce.JobIdProto")
	proto.RegisterType((*TaskIdProto)(nil), "hadoop.mapreduce.TaskIdProto")
	proto.RegisterType((*TaskAttemptIdProto)(nil), "hadoop.mapreduce.TaskAttemptIdProto")
	proto.RegisterType((*CounterProto)(nil), "hadoop.mapreduce.CounterProto")
	proto.RegisterType((*CounterGroupProto)(nil), "hadoop.mapreduce.CounterGroupProto")
	proto.RegisterType((*CountersProto)(nil), "hadoop.mapreduce.CountersProto")
	proto.RegisterType((*TaskReportProto)(nil), "hadoop.mapreduce.TaskReportProto")
	proto.RegisterType((*TaskAttemptReportProto)(nil), "hadoop.mapreduce.TaskAttemptReportProto")
	proto.RegisterType((*JobReportProto)(nil), "hadoop.mapreduce.JobReportProto")
	proto.RegisterType((*AMInfoProto)(nil), "hadoop.mapreduce.AMInfoProto")
	proto.RegisterType((*TaskAttemptCompletionEventProto)(nil), "hadoop.mapreduce.TaskAttemptCompletionEventProto")
	proto.RegisterType((*StringCounterMapProto)(nil), "hadoop.mapreduce.StringCounterMapProto")
	proto.RegisterType((*StringCounterGroupMapProto)(nil), "hadoop.mapreduce.StringCounterGroupMapProto")
	proto.RegisterEnum("hadoop.mapreduce.TaskTypeProto", TaskTypeProto_name, TaskTypeProto_value)
	proto.RegisterEnum("hadoop.mapreduce.TaskStateProto", TaskStateProto_name, TaskStateProto_value)
	proto.RegisterEnum("hadoop.mapreduce.PhaseProto", PhaseProto_name, PhaseProto_value)
	proto.RegisterEnum("hadoop.mapreduce.TaskAttemptStateProto", TaskAttemptStateProto_name, TaskAttemptStateProto_value)
	proto.RegisterEnum("hadoop.mapreduce.JobStateProto", JobStateProto_name, JobStateProto_value)
	proto.RegisterEnum("hadoop.mapreduce.TaskAttemptCompletionEventStatusProto", TaskAttemptCompletionEventStatusProto_name, TaskAttemptCompletionEventStatusProto_value)
}

func init() { proto.RegisterFile("mr_protos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xed, 0xac, 0x7f, 0x8e, 0xe3, 0xbf, 0x69, 0x1b, 0xb9, 0x11, 0x6d, 0x8a, 0x69, 0x69,
	0x89, 0x90, 0x2f, 0x0a, 0x2a, 0x14, 0x90, 0xc0, 0x75, 0x9c, 0xd6, 0x21, 0xb1, 0xad, 0xb5, 0x2d,
	0x2e, 0xa8, 0xb4, 0xda, 0xd8, 0x9b, 0x64, 0x5b, 0x7b, 0x77, 0xd9, 0xd9, 0x8d, 0x94, 0x7b, 0x2e,
	0x90, 0xb8, 0x80, 0x47, 0xe0, 0x2d, 0x78, 0x05, 0x5e, 0x81, 0x67, 0xe0, 0x21, 0xe0, 0xcc, 0x99,
	0x59, 0xef, 0xda, 0x71, 0xfa, 0x7b, 0xc3, 0x55, 0x76, 0xce, 0xdf, 0x9c, 0xef, 0xcc, 0x37, 0xe7,
	0x8c, 0x03, 0x95, 0xb9, 0x6f, 0x78, 0xbe, 0x1b, 0xb8, 0xbc, 0x49, 0x7f, 0x58, 0xf5, 0xcc, 0x9c,
	0xba, 0xae, 0xd7, 0x9c, 0x9b, 0x9e, 0x6f, 0x4d, 0xc3, 0x89, 0xb5, 0x5d, 0xbb, 0x30, 0x7d, 0x67,
	0xc9, 0xa8, 0x31, 0x02, 0x38, 0x70, 0x8f, 0xbb, 0xd3, 0x01, 0xb9, 0x3c, 0x82, 0xac, 0xe9, 0x79,
	0x86, 0x3d, 0xad, 0xa7, 0xee, 0xa4, 0x1e, 0x14, 0x1f, 0xee, 0x34, 0x55, 0x0c, 0xe1, 0xd8, 0x6c,
	0x79, 0xde, 0xcc, 0x9e, 0x98, 0x81, 0xed, 0x3a, 0xca, 0x41, 0xd7, 0xd0, 0xbc, 0x3b, 0x65, 0x65,
	0x48, 0xa3, 0x4f, 0x1a, 0x7d, 0x34, 0x1d, 0xbf, 0x1a, 0xbf, 0xa7, 0xa0, 0x38, 0x32, 0xf9, 0xcb,
	0x28, 0xee, 0x67, 0x90, 0x7d, 0xe1, 0x1e, 0xc7, 0x71, 0x3f, 0x68, 0xae, 0xe6, 0xd6, 0x8c, 0xb3,
	0xd0, 0xb5, 0x17, 0xe2, 0x9b, 0x7d, 0x03, 0x85, 0x00, 0x63, 0x18, 0xc1, 0x85, 0x67, 0x51, 0xec,
	0x72, 0x9c, 0x4f, 0xec, 0x27, 0xb6, 0x19, 0xa1, 0x85, 0x74, 0xcd, 0x07, 0x6a, 0xa9, 0x52, 0xca,
	0x2c, 0x52, 0x7a, 0x0e, 0x4c, 0x98, 0xb6, 0x82, 0xc0, 0x9a, 0x7b, 0x41, 0x0c, 0x38, 0x47, 0x7b,
	0x2c, 0x32, 0xbb, 0xb5, 0x7e, 0x87, 0x28, 0xb5, 0x6c, 0x40, 0x8b, 0x4b, 0x80, 0x7f, 0x84, 0xcd,
	0xb6, 0x1b, 0x3a, 0x81, 0xe5, 0xcb, 0xb8, 0x0c, 0x36, 0x1c, 0x73, 0x6e, 0x51, 0xd0, 0x82, 0x4e,
	0xdf, 0xec, 0x43, 0xd8, 0x9c, 0xda, 0xdc, 0x9b, 0x99, 0x17, 0x06, 0xe9, 0xd2, 0xa4, 0x2b, 0x2a,
	0x59, 0x4f, 0x98, 0x5c, 0x07, 0xed, 0xdc, 0x9c, 0x85, 0x16, 0xe5, 0x9d, 0xd1, 0xe5, 0xa2, 0xf1,
	0x5b, 0x0a, 0x6a, 0x2a, 0xfa, 0x53, 0xdf, 0x0d, 0xbd, 0xf7, 0xda, 0xa2, 0x0d, 0xf9, 0x89, 0x8c,
	0xc5, 0x71, 0x97, 0x0c, 0x42, 0xbe, 0x7f, 0x19, 0xf2, 0x30, 0xf0, 0x6d, 0xe7, 0x54, 0xed, 0x79,
	0x64, 0x7a, 0xaa, 0xb8, 0x91, 0x63, 0x63, 0x0a, 0x25, 0xa5, 0xe4, 0x32, 0x99, 0x21, 0x94, 0x95,
	0xd2, 0x38, 0x15, 0x29, 0x72, 0x4c, 0x4b, 0xc4, 0xfe, 0xf4, 0x35, 0xb1, 0x09, 0xcf, 0x62, 0x83,
	0xd2, 0x24, 0x21, 0xe5, 0x8d, 0x7f, 0x32, 0x50, 0x11, 0xc5, 0xd7, 0x2d, 0xcf, 0xf5, 0x83, 0xf7,
	0x3b, 0xb0, 0x6f, 0x01, 0xc8, 0x8f, 0x07, 0x66, 0x10, 0xb1, 0xe9, 0xce, 0x7a, 0xd7, 0xa1, 0x30,
	0x91, 0xde, 0x44, 0x40, 0x5a, 0xb3, 0x6d, 0xc8, 0xe3, 0x8d, 0x39, 0xf5, 0x2d, 0xce, 0xe9, 0x74,
	0xd2, 0xfa, 0x62, 0xcd, 0x6e, 0x01, 0x60, 0x5c, 0x3f, 0x30, 0x02, 0x1b, 0x8b, 0xbe, 0x41, 0x67,
	0x57, 0x20, 0xc9, 0x08, 0x05, 0x6c, 0x07, 0x8a, 0x27, 0xb6, 0x63, 0xf3, 0x33, 0xa9, 0xd7, 0x48,
	0x0f, 0x52, 0x44, 0x06, 0x5f, 0x27, 0xce, 0x24, 0xbb, 0x7c, 0xf1, 0xe2, 0xd4, 0x96, 0x0a, 0x1e,
	0x9f, 0x05, 0xeb, 0x43, 0xd5, 0x0f, 0x1d, 0x07, 0x6b, 0x6a, 0x98, 0x92, 0xdc, 0xbc, 0x9e, 0xa3,
	0xe2, 0xdf, 0x5d, 0x8f, 0x6f, 0xf9, 0x0a, 0xe8, 0x15, 0xe5, 0xad, 0xc4, 0x1c, 0xcf, 0x92, 0xf1,
	0x70, 0x32, 0x41, 0x60, 0x27, 0xe1, 0x2c, 0x8a, 0x59, 0xcf, 0x53, 0x5e, 0x6f, 0x16, 0xb2, 0x16,
	0xfb, 0x2b, 0x0d, 0xbb, 0x03, 0xc8, 0x42, 0xf3, 0xd4, 0x71, 0x79, 0x60, 0x4f, 0x78, 0xbd, 0x80,
	0x09, 0x12, 0x31, 0x17, 0xa2, 0xc6, 0xbf, 0x1a, 0x6c, 0x25, 0x62, 0x25, 0x0f, 0xfd, 0x10, 0x2a,
	0x74, 0x78, 0x2a, 0x97, 0xf8, 0xf0, 0xdf, 0x2c, 0x9d, 0x52, 0x90, 0x94, 0xb1, 0x31, 0xb0, 0xa5,
	0x68, 0x49, 0x4a, 0xdc, 0x7f, 0x65, 0xc0, 0x04, 0x33, 0xaa, 0xc1, 0x8a, 0xf8, 0xff, 0x4b, 0x90,
	0xfb, 0x50, 0x89, 0xeb, 0x6c, 0xd8, 0xce, 0x89, 0x8b, 0xfc, 0x10, 0x7d, 0xa1, 0x1c, 0x8b, 0xbb,
	0x28, 0x15, 0xdd, 0x83, 0x6a, 0x81, 0x15, 0x11, 0x57, 0x94, 0x8e, 0x1c, 0x0f, 0x89, 0x64, 0xf2,
	0xd6, 0xb2, 0x87, 0xa0, 0x79, 0x67, 0x26, 0xb7, 0xf0, 0x00, 0x45, 0xb9, 0xd6, 0xf4, 0xf1, 0x81,
	0x50, 0xab, 0x3e, 0x4e, 0xa6, 0xac, 0x09, 0xd7, 0xf8, 0x59, 0x78, 0x72, 0x32, 0xb3, 0x8c, 0x24,
	0x4a, 0x20, 0x94, 0x35, 0xa5, 0xda, 0x8f, 0xc1, 0x3e, 0x80, 0x2a, 0xc7, 0xa3, 0x5f, 0x32, 0x2e,
	0x92, 0x71, 0x59, 0xc8, 0x13, 0x96, 0xbb, 0x50, 0x73, 0xdc, 0xa9, 0x65, 0xcc, 0x4d, 0xc7, 0x3c,
	0xc5, 0xd6, 0x73, 0x86, 0x58, 0xea, 0x9b, 0x94, 0x75, 0x45, 0x28, 0x8e, 0xa4, 0xfc, 0x19, 0x8a,
	0x2f, 0xd9, 0x0a, 0x76, 0xd5, 0x4b, 0xd4, 0xc0, 0x93, 0xb6, 0x03, 0x14, 0xe3, 0xb8, 0xda, 0x5a,
	0x8e, 0x1b, 0x04, 0x9e, 0x74, 0x28, 0x93, 0xc3, 0xb5, 0x64, 0x70, 0xd4, 0x91, 0xd3, 0x77, 0xb0,
	0x39, 0x71, 0x9d, 0xc0, 0xb4, 0x1d, 0xf4, 0x40, 0x86, 0x56, 0x96, 0xdb, 0x13, 0x4d, 0xd0, 0x76,
	0x64, 0x10, 0x51, 0xb3, 0x38, 0x89, 0x25, 0x8d, 0xbf, 0x34, 0x28, 0xe3, 0x18, 0x4c, 0x32, 0xff,
	0x5d, 0x07, 0xa7, 0x70, 0x4a, 0xf2, 0x7a, 0x67, 0xad, 0x5f, 0x82, 0xcf, 0xf9, 0x17, 0x6a, 0x29,
	0x58, 0x80, 0x46, 0xc6, 0x0a, 0x97, 0x8b, 0x73, 0x6a, 0xd2, 0x92, 0xce, 0xc8, 0x28, 0x19, 0x24,
	0xb6, 0xda, 0x20, 0xab, 0xb2, 0x14, 0x2f, 0x0c, 0x3f, 0x81, 0xea, 0x64, 0x66, 0x99, 0x4e, 0x98,
	0x88, 0xa7, 0x91, 0x65, 0x45, 0xc9, 0x17, 0xa6, 0xf7, 0xa0, 0xcc, 0xad, 0x20, 0x69, 0x98, 0x25,
	0xc3, 0x12, 0x49, 0x07, 0xeb, 0x6f, 0x52, 0xee, 0x35, 0x37, 0x29, 0x7f, 0xe9, 0x26, 0xe1, 0xd4,
	0x0c, 0xb9, 0xe5, 0x13, 0x7f, 0x71, 0x6a, 0x8a, 0x6f, 0x56, 0x87, 0x1c, 0xa2, 0x17, 0xd3, 0x91,
	0x48, 0x59, 0xd0, 0xa3, 0xa5, 0xe8, 0x5a, 0x81, 0x6f, 0x4e, 0x5e, 0x22, 0xf5, 0xc7, 0xfe, 0x8c,
	0x58, 0x88, 0x17, 0x22, 0x21, 0x5a, 0xed, 0x6b, 0x9b, 0xd1, 0xc0, 0x5d, 0x88, 0x54, 0xf4, 0x7d,
	0x7b, 0x66, 0x11, 0xdd, 0x64, 0x74, 0xb1, 0x64, 0x5f, 0x42, 0xde, 0x9c, 0xd3, 0x85, 0xe4, 0x48,
	0xac, 0xcc, 0xfa, 0x61, 0xd6, 0x3a, 0x12, 0x77, 0x53, 0x1e, 0x52, 0xce, 0x9c, 0x8b, 0x05, 0x17,
	0x30, 0x79, 0x78, 0x3c, 0xb7, 0x55, 0x19, 0x2a, 0x12, 0xa6, 0x14, 0x11, 0xcc, 0xdb, 0x90, 0xb3,
	0xb9, 0x11, 0x1e, 0x23, 0xd2, 0x2a, 0x2a, 0xf3, 0x5f, 0x69, 0x27, 0xe6, 0x8c, 0x5b, 0x7a, 0xd6,
	0xe6, 0x63, 0x14, 0x22, 0x45, 0x8a, 0x98, 0xc5, 0xc0, 0xb7, 0x5d, 0xdf, 0x0e, 0x2e, 0xea, 0x35,
	0x22, 0xd7, 0xf6, 0x12, 0x57, 0x23, 0xa5, 0x22, 0x6a, 0xc2, 0x5c, 0x80, 0x3e, 0xb3, 0x79, 0xe0,
	0xfa, 0x17, 0x04, 0x8b, 0x49, 0xd0, 0x09, 0x51, 0xe3, 0xef, 0x34, 0x14, 0x13, 0x99, 0xb3, 0xe7,
	0xb0, 0x65, 0xc6, 0xaf, 0xc7, 0xcb, 0x8d, 0xfc, 0xe3, 0xab, 0x1e, 0x9a, 0x2b, 0xad, 0xfc, 0xba,
	0xb9, 0x46, 0xb5, 0x42, 0x8a, 0xf4, 0x2a, 0x29, 0x56, 0x6f, 0x66, 0xe6, 0x6d, 0x6f, 0xe6, 0xfa,
	0x46, 0xb3, 0xf1, 0x16, 0x8d, 0x46, 0x7b, 0xdb, 0x46, 0x93, 0xbd, 0xb2, 0xd1, 0x34, 0xfe, 0x4c,
	0xc3, 0x4e, 0x62, 0x28, 0xb5, 0xdd, 0xb9, 0x37, 0xb3, 0x44, 0x41, 0x3a, 0xe7, 0x96, 0xa3, 0xfa,
	0x46, 0x1b, 0xe0, 0x1d, 0x87, 0x65, 0xc1, 0x5c, 0x94, 0xb5, 0x0f, 0x59, 0xd1, 0x43, 0x42, 0xae,
	0x9a, 0xc8, 0x17, 0xaf, 0x0c, 0xb0, 0x92, 0xc7, 0x90, 0x3c, 0xd5, 0x23, 0x4c, 0x86, 0x61, 0x8f,
	0xe1, 0xa6, 0x68, 0x2d, 0x6e, 0x18, 0x78, 0x21, 0xce, 0x5d, 0xcb, 0x3f, 0x47, 0xcc, 0xe6, 0x74,
	0xba, 0xe8, 0x33, 0x05, 0x7d, 0x0b, 0x0d, 0xfa, 0xa4, 0x1f, 0x92, 0xba, 0x25, 0xb5, 0x62, 0x28,
	0x44, 0x80, 0xf0, 0xbd, 0x12, 0xcf, 0x51, 0x4d, 0x2f, 0x2b, 0xb9, 0x1e, 0x3a, 0x74, 0xda, 0x37,
	0x21, 0x6f, 0x89, 0x04, 0x04, 0x70, 0x59, 0xf6, 0x1c, 0xad, 0xb1, 0xc1, 0x1a, 0x70, 0x63, 0xed,
	0xcb, 0x96, 0x55, 0x21, 0xf3, 0xd2, 0xba, 0x50, 0x4f, 0x69, 0xf1, 0xc9, 0x3e, 0x8f, 0x5e, 0xe2,
	0x69, 0xaa, 0xdd, 0xed, 0x2b, 0xc7, 0xad, 0xea, 0xbc, 0xf2, 0xa5, 0x6e, 0xc3, 0xf6, 0xd5, 0xcf,
	0xdb, 0x35, 0xbb, 0x3c, 0x5e, 0xde, 0xe5, 0xa3, 0x2b, 0x77, 0x89, 0xdf, 0xfd, 0x6a, 0xab, 0xdd,
	0xbb, 0x50, 0x5a, 0xfa, 0xe9, 0xc3, 0x72, 0x90, 0x39, 0x6a, 0x0d, 0xaa, 0x29, 0x06, 0x90, 0xd5,
	0x3b, 0x7b, 0xe3, 0x76, 0xa7, 0x9a, 0xde, 0x75, 0xa0, 0xbc, 0xfc, 0xa4, 0x15, 0xda, 0xd1, 0xd0,
	0xe8, 0x75, 0x7e, 0x40, 0xcb, 0x2a, 0x6c, 0xe2, 0xf7, 0xb0, 0xfd, 0x0c, 0xcd, 0x0f, 0x3b, 0x7b,
	0xd5, 0x34, 0xfe, 0xae, 0x01, 0x94, 0xe8, 0xe3, 0x5e, 0xaf, 0xdb, 0x7b, 0x5a, 0xcd, 0x44, 0x16,
	0xe3, 0x76, 0xbb, 0xd3, 0xd9, 0x43, 0x8b, 0x0d, 0x56, 0x82, 0x02, 0x4a, 0xf6, 0x5b, 0x5d, 0xe1,
	0xa0, 0xa9, 0xe5, 0xf7, 0xdd, 0x43, 0xb1, 0xcc, 0xee, 0x1a, 0x00, 0xf1, 0x03, 0x40, 0x44, 0x1b,
	0x18, 0xc3, 0x51, 0x4b, 0x1f, 0x89, 0x68, 0x29, 0x56, 0x00, 0x6d, 0x60, 0x88, 0x24, 0xd3, 0xc2,
	0x0f, 0x55, 0xcf, 0xc6, 0xfb, 0xfb, 0x87, 0x1d, 0xdc, 0x07, 0xb3, 0xc2, 0x65, 0x5f, 0x1f, 0xe1,
	0x0e, 0x9b, 0x90, 0x1f, 0x18, 0x0a, 0x81, 0x26, 0x0d, 0xdb, 0x87, 0x9d, 0x56, 0x6f, 0x3c, 0xc0,
	0x0d, 0x7e, 0x4d, 0xc1, 0x8d, 0xb5, 0x2f, 0x32, 0x02, 0xd6, 0x52, 0xc0, 0x2a, 0xf8, 0xf3, 0xb3,
	0x15, 0xef, 0x2c, 0x71, 0xb5, 0x12, 0xb8, 0x6e, 0x40, 0x0d, 0xd7, 0xed, 0xfe, 0xd1, 0x51, 0x77,
	0x64, 0x0c, 0x3a, 0xbd, 0x3d, 0x21, 0xde, 0x20, 0xb8, 0xad, 0x04, 0x5c, 0x89, 0xaf, 0x15, 0xc1,
	0xcd, 0xaa, 0xa5, 0x82, 0x9b, 0xdb, 0xfd, 0x09, 0x4a, 0x4b, 0x63, 0x54, 0x20, 0x3c, 0x50, 0x39,
	0x20, 0x8c, 0x03, 0xa3, 0xdb, 0xeb, 0x8e, 0xa8, 0xb0, 0xe8, 0x78, 0x90, 0xd8, 0x1f, 0x13, 0x3c,
	0x58, 0x2a, 0x2b, 0x59, 0x2f, 0xaa, 0x4a, 0xab, 0xa8, 0xa8, 0xac, 0x08, 0xb9, 0x03, 0xa3, 0xa3,
	0xeb, 0x7d, 0x1d, 0xb7, 0xfc, 0x39, 0x05, 0xf7, 0xde, 0xe8, 0xd6, 0xc9, 0x22, 0xb4, 0x3b, 0x51,
	0xd4, 0xd4, 0x42, 0xa0, 0x02, 0xa7, 0x71, 0x18, 0x96, 0x49, 0x10, 0x27, 0x92, 0x61, 0x35, 0xe4,
	0x95, 0x90, 0xf5, 0x9f, 0x0c, 0xfb, 0x87, 0x9d, 0x51, 0x07, 0x73, 0x8b, 0xcc, 0x46, 0xdd, 0x41,
	0x94, 0xe1, 0x93, 0x47, 0x70, 0xd7, 0xf5, 0x4f, 0x9b, 0xa6, 0x67, 0x4e, 0xce, 0xac, 0xcb, 0xb4,
	0x3d, 0x7f, 0x28, 0xff, 0xbf, 0xf0, 0x24, 0x7f, 0xa4, 0x53, 0x36, 0xfc, 0x97, 0x54, 0xea, 0x8f,
	0x54, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xfc, 0x24, 0xe3, 0xa6, 0x10, 0x00, 0x00,
}
