// Code generated by protoc-gen-go.
// source: DatanodeProtocol.proto
// DO NOT EDIT!

/*
Package hproto is a generated protocol buffer package.

It is generated from these files:
	DatanodeProtocol.proto
	GenericRefreshProtocol.proto
	GetUserMappingsProtocol.proto
	HAServiceProtocol.proto
	hdfs.proto
	InterDatanodeProtocol.proto
	IpcConnectionContext.proto
	ProtobufRpcEngine.proto
	ProtocolInfo.proto
	RefreshAuthorizationPolicyProtocol.proto
	RefreshCallQueueProtocol.proto
	RefreshUserMappingsProtocol.proto
	RpcHeader.proto
	Security.proto
	TraceAdmin.proto
	ZKFCProtocol.proto

It has these top-level messages:
	DatanodeRegistrationProto
	DatanodeCommandProto
	BalancerBandwidthCommandProto
	BlockCommandProto
	BlockIdCommandProto
	BlockRecoveryCommandProto
	FinalizeCommandProto
	KeyUpdateCommandProto
	RegisterCommandProto
	RegisterDatanodeRequestProto
	RegisterDatanodeResponseProto
	VolumeFailureSummaryProto
	HeartbeatRequestProto
	NNHAStatusHeartbeatProto
	HeartbeatResponseProto
	BlockReportRequestProto
	BlockReportContextProto
	StorageBlockReportProto
	BlockReportResponseProto
	CacheReportRequestProto
	CacheReportResponseProto
	ReceivedDeletedBlockInfoProto
	StorageReceivedDeletedBlocksProto
	BlockReceivedAndDeletedRequestProto
	BlockReceivedAndDeletedResponseProto
	ErrorReportRequestProto
	ErrorReportResponseProto
	ReportBadBlocksRequestProto
	ReportBadBlocksResponseProto
	CommitBlockSynchronizationRequestProto
	CommitBlockSynchronizationResponseProto
	GenericRefreshRequestProto
	GenericRefreshResponseProto
	GenericRefreshResponseCollectionProto
	GetGroupsForUserRequestProto
	GetGroupsForUserResponseProto
	HAStateChangeRequestInfoProto
	MonitorHealthRequestProto
	MonitorHealthResponseProto
	TransitionToActiveRequestProto
	TransitionToActiveResponseProto
	TransitionToStandbyRequestProto
	TransitionToStandbyResponseProto
	GetServiceStatusRequestProto
	GetServiceStatusResponseProto
	ExtendedBlockProto
	DatanodeIDProto
	DatanodeLocalInfoProto
	DatanodeInfosProto
	DatanodeInfoProto
	DatanodeStorageProto
	StorageReportProto
	ContentSummaryProto
	CorruptFileBlocksProto
	FsPermissionProto
	StorageTypesProto
	BlockStoragePolicyProto
	StorageUuidsProto
	LocatedBlockProto
	DataEncryptionKeyProto
	FileEncryptionInfoProto
	PerFileEncryptionInfoProto
	ZoneEncryptionInfoProto
	CipherOptionProto
	LocatedBlocksProto
	HdfsFileStatusProto
	FsServerDefaultsProto
	DirectoryListingProto
	SnapshottableDirectoryStatusProto
	SnapshottableDirectoryListingProto
	SnapshotDiffReportEntryProto
	SnapshotDiffReportProto
	StorageInfoProto
	NamenodeRegistrationProto
	CheckpointSignatureProto
	NamenodeCommandProto
	CheckpointCommandProto
	BlockProto
	BlockWithLocationsProto
	BlocksWithLocationsProto
	RemoteEditLogProto
	RemoteEditLogManifestProto
	NamespaceInfoProto
	BlockKeyProto
	ExportedBlockKeysProto
	RecoveringBlockProto
	VersionRequestProto
	VersionResponseProto
	SnapshotInfoProto
	RollingUpgradeStatusProto
	InitReplicaRecoveryRequestProto
	InitReplicaRecoveryResponseProto
	UpdateReplicaUnderRecoveryRequestProto
	UpdateReplicaUnderRecoveryResponseProto
	UserInformationProto
	IpcConnectionContextProto
	RequestHeaderProto
	GetProtocolVersionsRequestProto
	ProtocolVersionProto
	GetProtocolVersionsResponseProto
	GetProtocolSignatureRequestProto
	GetProtocolSignatureResponseProto
	ProtocolSignatureProto
	RefreshServiceAclRequestProto
	RefreshServiceAclResponseProto
	RefreshCallQueueRequestProto
	RefreshCallQueueResponseProto
	RefreshUserToGroupsMappingsRequestProto
	RefreshUserToGroupsMappingsResponseProto
	RefreshSuperUserGroupsConfigurationRequestProto
	RefreshSuperUserGroupsConfigurationResponseProto
	RPCTraceInfoProto
	RPCCallerContextProto
	RpcRequestHeaderProto
	RpcResponseHeaderProto
	RpcSaslProto
	TokenProto
	CredentialsKVProto
	CredentialsProto
	GetDelegationTokenRequestProto
	GetDelegationTokenResponseProto
	RenewDelegationTokenRequestProto
	RenewDelegationTokenResponseProto
	CancelDelegationTokenRequestProto
	CancelDelegationTokenResponseProto
	ListSpanReceiversRequestProto
	SpanReceiverListInfo
	ListSpanReceiversResponseProto
	ConfigPair
	AddSpanReceiverRequestProto
	AddSpanReceiverResponseProto
	RemoveSpanReceiverRequestProto
	RemoveSpanReceiverResponseProto
	CedeActiveRequestProto
	CedeActiveResponseProto
	GracefulFailoverRequestProto
	GracefulFailoverResponseProto
*/
package hproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DatanodeCommandProto_Type int32

const (
	DatanodeCommandProto_BalancerBandwidthCommand DatanodeCommandProto_Type = 0
	DatanodeCommandProto_BlockCommand             DatanodeCommandProto_Type = 1
	DatanodeCommandProto_BlockRecoveryCommand     DatanodeCommandProto_Type = 2
	DatanodeCommandProto_FinalizeCommand          DatanodeCommandProto_Type = 3
	DatanodeCommandProto_KeyUpdateCommand         DatanodeCommandProto_Type = 4
	DatanodeCommandProto_RegisterCommand          DatanodeCommandProto_Type = 5
	DatanodeCommandProto_UnusedUpgradeCommand     DatanodeCommandProto_Type = 6
	DatanodeCommandProto_NullDatanodeCommand      DatanodeCommandProto_Type = 7
	DatanodeCommandProto_BlockIdCommand           DatanodeCommandProto_Type = 8
)

var DatanodeCommandProto_Type_name = map[int32]string{
	0: "BalancerBandwidthCommand",
	1: "BlockCommand",
	2: "BlockRecoveryCommand",
	3: "FinalizeCommand",
	4: "KeyUpdateCommand",
	5: "RegisterCommand",
	6: "UnusedUpgradeCommand",
	7: "NullDatanodeCommand",
	8: "BlockIdCommand",
}
var DatanodeCommandProto_Type_value = map[string]int32{
	"BalancerBandwidthCommand": 0,
	"BlockCommand":             1,
	"BlockRecoveryCommand":     2,
	"FinalizeCommand":          3,
	"KeyUpdateCommand":         4,
	"RegisterCommand":          5,
	"UnusedUpgradeCommand":     6,
	"NullDatanodeCommand":      7,
	"BlockIdCommand":           8,
}

func (x DatanodeCommandProto_Type) Enum() *DatanodeCommandProto_Type {
	p := new(DatanodeCommandProto_Type)
	*p = x
	return p
}
func (x DatanodeCommandProto_Type) String() string {
	return proto.EnumName(DatanodeCommandProto_Type_name, int32(x))
}
func (x *DatanodeCommandProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DatanodeCommandProto_Type_value, data, "DatanodeCommandProto_Type")
	if err != nil {
		return err
	}
	*x = DatanodeCommandProto_Type(value)
	return nil
}
func (DatanodeCommandProto_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type BlockCommandProto_Action int32

const (
	BlockCommandProto_TRANSFER   BlockCommandProto_Action = 1
	BlockCommandProto_INVALIDATE BlockCommandProto_Action = 2
	BlockCommandProto_SHUTDOWN   BlockCommandProto_Action = 3
)

var BlockCommandProto_Action_name = map[int32]string{
	1: "TRANSFER",
	2: "INVALIDATE",
	3: "SHUTDOWN",
}
var BlockCommandProto_Action_value = map[string]int32{
	"TRANSFER":   1,
	"INVALIDATE": 2,
	"SHUTDOWN":   3,
}

func (x BlockCommandProto_Action) Enum() *BlockCommandProto_Action {
	p := new(BlockCommandProto_Action)
	*p = x
	return p
}
func (x BlockCommandProto_Action) String() string {
	return proto.EnumName(BlockCommandProto_Action_name, int32(x))
}
func (x *BlockCommandProto_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BlockCommandProto_Action_value, data, "BlockCommandProto_Action")
	if err != nil {
		return err
	}
	*x = BlockCommandProto_Action(value)
	return nil
}
func (BlockCommandProto_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type BlockIdCommandProto_Action int32

const (
	BlockIdCommandProto_CACHE   BlockIdCommandProto_Action = 1
	BlockIdCommandProto_UNCACHE BlockIdCommandProto_Action = 2
)

var BlockIdCommandProto_Action_name = map[int32]string{
	1: "CACHE",
	2: "UNCACHE",
}
var BlockIdCommandProto_Action_value = map[string]int32{
	"CACHE":   1,
	"UNCACHE": 2,
}

func (x BlockIdCommandProto_Action) Enum() *BlockIdCommandProto_Action {
	p := new(BlockIdCommandProto_Action)
	*p = x
	return p
}
func (x BlockIdCommandProto_Action) String() string {
	return proto.EnumName(BlockIdCommandProto_Action_name, int32(x))
}
func (x *BlockIdCommandProto_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BlockIdCommandProto_Action_value, data, "BlockIdCommandProto_Action")
	if err != nil {
		return err
	}
	*x = BlockIdCommandProto_Action(value)
	return nil
}
func (BlockIdCommandProto_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

type NNHAStatusHeartbeatProto_State int32

const (
	NNHAStatusHeartbeatProto_ACTIVE  NNHAStatusHeartbeatProto_State = 0
	NNHAStatusHeartbeatProto_STANDBY NNHAStatusHeartbeatProto_State = 1
)

var NNHAStatusHeartbeatProto_State_name = map[int32]string{
	0: "ACTIVE",
	1: "STANDBY",
}
var NNHAStatusHeartbeatProto_State_value = map[string]int32{
	"ACTIVE":  0,
	"STANDBY": 1,
}

func (x NNHAStatusHeartbeatProto_State) Enum() *NNHAStatusHeartbeatProto_State {
	p := new(NNHAStatusHeartbeatProto_State)
	*p = x
	return p
}
func (x NNHAStatusHeartbeatProto_State) String() string {
	return proto.EnumName(NNHAStatusHeartbeatProto_State_name, int32(x))
}
func (x *NNHAStatusHeartbeatProto_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NNHAStatusHeartbeatProto_State_value, data, "NNHAStatusHeartbeatProto_State")
	if err != nil {
		return err
	}
	*x = NNHAStatusHeartbeatProto_State(value)
	return nil
}
func (NNHAStatusHeartbeatProto_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

type ReceivedDeletedBlockInfoProto_BlockStatus int32

const (
	ReceivedDeletedBlockInfoProto_RECEIVING ReceivedDeletedBlockInfoProto_BlockStatus = 1
	ReceivedDeletedBlockInfoProto_RECEIVED  ReceivedDeletedBlockInfoProto_BlockStatus = 2
	ReceivedDeletedBlockInfoProto_DELETED   ReceivedDeletedBlockInfoProto_BlockStatus = 3
)

var ReceivedDeletedBlockInfoProto_BlockStatus_name = map[int32]string{
	1: "RECEIVING",
	2: "RECEIVED",
	3: "DELETED",
}
var ReceivedDeletedBlockInfoProto_BlockStatus_value = map[string]int32{
	"RECEIVING": 1,
	"RECEIVED":  2,
	"DELETED":   3,
}

func (x ReceivedDeletedBlockInfoProto_BlockStatus) Enum() *ReceivedDeletedBlockInfoProto_BlockStatus {
	p := new(ReceivedDeletedBlockInfoProto_BlockStatus)
	*p = x
	return p
}
func (x ReceivedDeletedBlockInfoProto_BlockStatus) String() string {
	return proto.EnumName(ReceivedDeletedBlockInfoProto_BlockStatus_name, int32(x))
}
func (x *ReceivedDeletedBlockInfoProto_BlockStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReceivedDeletedBlockInfoProto_BlockStatus_value, data, "ReceivedDeletedBlockInfoProto_BlockStatus")
	if err != nil {
		return err
	}
	*x = ReceivedDeletedBlockInfoProto_BlockStatus(value)
	return nil
}
func (ReceivedDeletedBlockInfoProto_BlockStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

type ErrorReportRequestProto_ErrorCode int32

const (
	ErrorReportRequestProto_NOTIFY           ErrorReportRequestProto_ErrorCode = 0
	ErrorReportRequestProto_DISK_ERROR       ErrorReportRequestProto_ErrorCode = 1
	ErrorReportRequestProto_INVALID_BLOCK    ErrorReportRequestProto_ErrorCode = 2
	ErrorReportRequestProto_FATAL_DISK_ERROR ErrorReportRequestProto_ErrorCode = 3
)

var ErrorReportRequestProto_ErrorCode_name = map[int32]string{
	0: "NOTIFY",
	1: "DISK_ERROR",
	2: "INVALID_BLOCK",
	3: "FATAL_DISK_ERROR",
}
var ErrorReportRequestProto_ErrorCode_value = map[string]int32{
	"NOTIFY":           0,
	"DISK_ERROR":       1,
	"INVALID_BLOCK":    2,
	"FATAL_DISK_ERROR": 3,
}

func (x ErrorReportRequestProto_ErrorCode) Enum() *ErrorReportRequestProto_ErrorCode {
	p := new(ErrorReportRequestProto_ErrorCode)
	*p = x
	return p
}
func (x ErrorReportRequestProto_ErrorCode) String() string {
	return proto.EnumName(ErrorReportRequestProto_ErrorCode_name, int32(x))
}
func (x *ErrorReportRequestProto_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorReportRequestProto_ErrorCode_value, data, "ErrorReportRequestProto_ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorReportRequestProto_ErrorCode(value)
	return nil
}
func (ErrorReportRequestProto_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

// *
// Information to identify a datanode to a namenode
type DatanodeRegistrationProto struct {
	DatanodeID       *DatanodeIDProto        `protobuf:"bytes,1,req,name=datanodeID" json:"datanodeID,omitempty"`
	StorageInfo      *StorageInfoProto       `protobuf:"bytes,2,req,name=storageInfo" json:"storageInfo,omitempty"`
	Keys             *ExportedBlockKeysProto `protobuf:"bytes,3,req,name=keys" json:"keys,omitempty"`
	SoftwareVersion  *string                 `protobuf:"bytes,4,req,name=softwareVersion" json:"softwareVersion,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *DatanodeRegistrationProto) Reset()                    { *m = DatanodeRegistrationProto{} }
func (m *DatanodeRegistrationProto) String() string            { return proto.CompactTextString(m) }
func (*DatanodeRegistrationProto) ProtoMessage()               {}
func (*DatanodeRegistrationProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DatanodeRegistrationProto) GetDatanodeID() *DatanodeIDProto {
	if m != nil {
		return m.DatanodeID
	}
	return nil
}

func (m *DatanodeRegistrationProto) GetStorageInfo() *StorageInfoProto {
	if m != nil {
		return m.StorageInfo
	}
	return nil
}

func (m *DatanodeRegistrationProto) GetKeys() *ExportedBlockKeysProto {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *DatanodeRegistrationProto) GetSoftwareVersion() string {
	if m != nil && m.SoftwareVersion != nil {
		return *m.SoftwareVersion
	}
	return ""
}

// *
// Commands sent from namenode to the datanodes
type DatanodeCommandProto struct {
	CmdType *DatanodeCommandProto_Type `protobuf:"varint,1,req,name=cmdType,enum=DatanodeCommandProto_Type" json:"cmdType,omitempty"`
	// One of the following command is available when the corresponding
	// cmdType is set
	BalancerCmd      *BalancerBandwidthCommandProto `protobuf:"bytes,2,opt,name=balancerCmd" json:"balancerCmd,omitempty"`
	BlkCmd           *BlockCommandProto             `protobuf:"bytes,3,opt,name=blkCmd" json:"blkCmd,omitempty"`
	RecoveryCmd      *BlockRecoveryCommandProto     `protobuf:"bytes,4,opt,name=recoveryCmd" json:"recoveryCmd,omitempty"`
	FinalizeCmd      *FinalizeCommandProto          `protobuf:"bytes,5,opt,name=finalizeCmd" json:"finalizeCmd,omitempty"`
	KeyUpdateCmd     *KeyUpdateCommandProto         `protobuf:"bytes,6,opt,name=keyUpdateCmd" json:"keyUpdateCmd,omitempty"`
	RegisterCmd      *RegisterCommandProto          `protobuf:"bytes,7,opt,name=registerCmd" json:"registerCmd,omitempty"`
	BlkIdCmd         *BlockIdCommandProto           `protobuf:"bytes,8,opt,name=blkIdCmd" json:"blkIdCmd,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *DatanodeCommandProto) Reset()                    { *m = DatanodeCommandProto{} }
func (m *DatanodeCommandProto) String() string            { return proto.CompactTextString(m) }
func (*DatanodeCommandProto) ProtoMessage()               {}
func (*DatanodeCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DatanodeCommandProto) GetCmdType() DatanodeCommandProto_Type {
	if m != nil && m.CmdType != nil {
		return *m.CmdType
	}
	return DatanodeCommandProto_BalancerBandwidthCommand
}

func (m *DatanodeCommandProto) GetBalancerCmd() *BalancerBandwidthCommandProto {
	if m != nil {
		return m.BalancerCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetBlkCmd() *BlockCommandProto {
	if m != nil {
		return m.BlkCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetRecoveryCmd() *BlockRecoveryCommandProto {
	if m != nil {
		return m.RecoveryCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetFinalizeCmd() *FinalizeCommandProto {
	if m != nil {
		return m.FinalizeCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetKeyUpdateCmd() *KeyUpdateCommandProto {
	if m != nil {
		return m.KeyUpdateCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetRegisterCmd() *RegisterCommandProto {
	if m != nil {
		return m.RegisterCmd
	}
	return nil
}

func (m *DatanodeCommandProto) GetBlkIdCmd() *BlockIdCommandProto {
	if m != nil {
		return m.BlkIdCmd
	}
	return nil
}

// *
// Command sent from namenode to datanode to set the
// maximum bandwidth to be used for balancing.
type BalancerBandwidthCommandProto struct {
	// Maximum bandwidth to be used by datanode for balancing
	Bandwidth        *uint64 `protobuf:"varint,1,req,name=bandwidth" json:"bandwidth,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BalancerBandwidthCommandProto) Reset()                    { *m = BalancerBandwidthCommandProto{} }
func (m *BalancerBandwidthCommandProto) String() string            { return proto.CompactTextString(m) }
func (*BalancerBandwidthCommandProto) ProtoMessage()               {}
func (*BalancerBandwidthCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BalancerBandwidthCommandProto) GetBandwidth() uint64 {
	if m != nil && m.Bandwidth != nil {
		return *m.Bandwidth
	}
	return 0
}

// *
// Command to instruct datanodes to perform certain action
// on the given set of blocks.
type BlockCommandProto struct {
	Action             *BlockCommandProto_Action `protobuf:"varint,1,req,name=action,enum=BlockCommandProto_Action" json:"action,omitempty"`
	BlockPoolId        *string                   `protobuf:"bytes,2,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	Blocks             []*BlockProto             `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	Targets            []*DatanodeInfosProto     `protobuf:"bytes,4,rep,name=targets" json:"targets,omitempty"`
	TargetStorageUuids []*StorageUuidsProto      `protobuf:"bytes,5,rep,name=targetStorageUuids" json:"targetStorageUuids,omitempty"`
	TargetStorageTypes []*StorageTypesProto      `protobuf:"bytes,6,rep,name=targetStorageTypes" json:"targetStorageTypes,omitempty"`
	XXX_unrecognized   []byte                    `json:"-"`
}

func (m *BlockCommandProto) Reset()                    { *m = BlockCommandProto{} }
func (m *BlockCommandProto) String() string            { return proto.CompactTextString(m) }
func (*BlockCommandProto) ProtoMessage()               {}
func (*BlockCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockCommandProto) GetAction() BlockCommandProto_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return BlockCommandProto_TRANSFER
}

func (m *BlockCommandProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *BlockCommandProto) GetBlocks() []*BlockProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *BlockCommandProto) GetTargets() []*DatanodeInfosProto {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *BlockCommandProto) GetTargetStorageUuids() []*StorageUuidsProto {
	if m != nil {
		return m.TargetStorageUuids
	}
	return nil
}

func (m *BlockCommandProto) GetTargetStorageTypes() []*StorageTypesProto {
	if m != nil {
		return m.TargetStorageTypes
	}
	return nil
}

// *
// Command to instruct datanodes to perform certain action
// on the given set of block IDs.
type BlockIdCommandProto struct {
	Action           *BlockIdCommandProto_Action `protobuf:"varint,1,req,name=action,enum=BlockIdCommandProto_Action" json:"action,omitempty"`
	BlockPoolId      *string                     `protobuf:"bytes,2,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	BlockIds         []uint64                    `protobuf:"varint,3,rep,packed,name=blockIds" json:"blockIds,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *BlockIdCommandProto) Reset()                    { *m = BlockIdCommandProto{} }
func (m *BlockIdCommandProto) String() string            { return proto.CompactTextString(m) }
func (*BlockIdCommandProto) ProtoMessage()               {}
func (*BlockIdCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockIdCommandProto) GetAction() BlockIdCommandProto_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return BlockIdCommandProto_CACHE
}

func (m *BlockIdCommandProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *BlockIdCommandProto) GetBlockIds() []uint64 {
	if m != nil {
		return m.BlockIds
	}
	return nil
}

// *
// List of blocks to be recovered by the datanode
type BlockRecoveryCommandProto struct {
	Blocks           []*RecoveringBlockProto `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BlockRecoveryCommandProto) Reset()                    { *m = BlockRecoveryCommandProto{} }
func (m *BlockRecoveryCommandProto) String() string            { return proto.CompactTextString(m) }
func (*BlockRecoveryCommandProto) ProtoMessage()               {}
func (*BlockRecoveryCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockRecoveryCommandProto) GetBlocks() []*RecoveringBlockProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// *
// Finalize the upgrade at the datanode
type FinalizeCommandProto struct {
	BlockPoolId      *string `protobuf:"bytes,1,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FinalizeCommandProto) Reset()                    { *m = FinalizeCommandProto{} }
func (m *FinalizeCommandProto) String() string            { return proto.CompactTextString(m) }
func (*FinalizeCommandProto) ProtoMessage()               {}
func (*FinalizeCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FinalizeCommandProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

// *
// Update the block keys at the datanode
type KeyUpdateCommandProto struct {
	Keys             *ExportedBlockKeysProto `protobuf:"bytes,1,req,name=keys" json:"keys,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *KeyUpdateCommandProto) Reset()                    { *m = KeyUpdateCommandProto{} }
func (m *KeyUpdateCommandProto) String() string            { return proto.CompactTextString(m) }
func (*KeyUpdateCommandProto) ProtoMessage()               {}
func (*KeyUpdateCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyUpdateCommandProto) GetKeys() *ExportedBlockKeysProto {
	if m != nil {
		return m.Keys
	}
	return nil
}

// *
// Instruct datanode to register with the namenode
type RegisterCommandProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegisterCommandProto) Reset()                    { *m = RegisterCommandProto{} }
func (m *RegisterCommandProto) String() string            { return proto.CompactTextString(m) }
func (*RegisterCommandProto) ProtoMessage()               {}
func (*RegisterCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// *
// registration - Information of the datanode registering with the namenode
type RegisterDatanodeRequestProto struct {
	Registration     *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RegisterDatanodeRequestProto) Reset()                    { *m = RegisterDatanodeRequestProto{} }
func (m *RegisterDatanodeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*RegisterDatanodeRequestProto) ProtoMessage()               {}
func (*RegisterDatanodeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RegisterDatanodeRequestProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

// *
// registration - Update registration of the datanode that successfully
//                registered. StorageInfo will be updated to include new
//                storage ID if the datanode did not have one in the request.
type RegisterDatanodeResponseProto struct {
	Registration     *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RegisterDatanodeResponseProto) Reset()                    { *m = RegisterDatanodeResponseProto{} }
func (m *RegisterDatanodeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*RegisterDatanodeResponseProto) ProtoMessage()               {}
func (*RegisterDatanodeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RegisterDatanodeResponseProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

// *
// failedStorageLocations - storage locations that have failed
// lastVolumeFailureDate - date/time of last volume failure
// estimatedCapacityLost - estimate of total capacity lost due to volume failures
type VolumeFailureSummaryProto struct {
	FailedStorageLocations     []string `protobuf:"bytes,1,rep,name=failedStorageLocations" json:"failedStorageLocations,omitempty"`
	LastVolumeFailureDate      *uint64  `protobuf:"varint,2,req,name=lastVolumeFailureDate" json:"lastVolumeFailureDate,omitempty"`
	EstimatedCapacityLostTotal *uint64  `protobuf:"varint,3,req,name=estimatedCapacityLostTotal" json:"estimatedCapacityLostTotal,omitempty"`
	XXX_unrecognized           []byte   `json:"-"`
}

func (m *VolumeFailureSummaryProto) Reset()                    { *m = VolumeFailureSummaryProto{} }
func (m *VolumeFailureSummaryProto) String() string            { return proto.CompactTextString(m) }
func (*VolumeFailureSummaryProto) ProtoMessage()               {}
func (*VolumeFailureSummaryProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VolumeFailureSummaryProto) GetFailedStorageLocations() []string {
	if m != nil {
		return m.FailedStorageLocations
	}
	return nil
}

func (m *VolumeFailureSummaryProto) GetLastVolumeFailureDate() uint64 {
	if m != nil && m.LastVolumeFailureDate != nil {
		return *m.LastVolumeFailureDate
	}
	return 0
}

func (m *VolumeFailureSummaryProto) GetEstimatedCapacityLostTotal() uint64 {
	if m != nil && m.EstimatedCapacityLostTotal != nil {
		return *m.EstimatedCapacityLostTotal
	}
	return 0
}

// *
// registration - datanode registration information
// capacity - total storage capacity available at the datanode
// dfsUsed - storage used by HDFS
// remaining - remaining storage available for HDFS
// blockPoolUsed - storage used by the block pool
// xmitsInProgress - number of transfers from this datanode to others
// xceiverCount - number of active transceiver threads
// failedVolumes - number of failed volumes.  This is redundant with the
//     information included in volumeFailureSummary, but the field is retained
//     for backwards compatibility.
// cacheCapacity - total cache capacity available at the datanode
// cacheUsed - amount of cache used
// volumeFailureSummary - info about volume failures
type HeartbeatRequestProto struct {
	Registration                *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	Reports                     []*StorageReportProto      `protobuf:"bytes,2,rep,name=reports" json:"reports,omitempty"`
	XmitsInProgress             *uint32                    `protobuf:"varint,3,opt,name=xmitsInProgress,def=0" json:"xmitsInProgress,omitempty"`
	XceiverCount                *uint32                    `protobuf:"varint,4,opt,name=xceiverCount,def=0" json:"xceiverCount,omitempty"`
	FailedVolumes               *uint32                    `protobuf:"varint,5,opt,name=failedVolumes,def=0" json:"failedVolumes,omitempty"`
	CacheCapacity               *uint64                    `protobuf:"varint,6,opt,name=cacheCapacity,def=0" json:"cacheCapacity,omitempty"`
	CacheUsed                   *uint64                    `protobuf:"varint,7,opt,name=cacheUsed,def=0" json:"cacheUsed,omitempty"`
	VolumeFailureSummary        *VolumeFailureSummaryProto `protobuf:"bytes,8,opt,name=volumeFailureSummary" json:"volumeFailureSummary,omitempty"`
	RequestFullBlockReportLease *bool                      `protobuf:"varint,9,opt,name=requestFullBlockReportLease,def=0" json:"requestFullBlockReportLease,omitempty"`
	XXX_unrecognized            []byte                     `json:"-"`
}

func (m *HeartbeatRequestProto) Reset()                    { *m = HeartbeatRequestProto{} }
func (m *HeartbeatRequestProto) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequestProto) ProtoMessage()               {}
func (*HeartbeatRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

const Default_HeartbeatRequestProto_XmitsInProgress uint32 = 0
const Default_HeartbeatRequestProto_XceiverCount uint32 = 0
const Default_HeartbeatRequestProto_FailedVolumes uint32 = 0
const Default_HeartbeatRequestProto_CacheCapacity uint64 = 0
const Default_HeartbeatRequestProto_CacheUsed uint64 = 0
const Default_HeartbeatRequestProto_RequestFullBlockReportLease bool = false

func (m *HeartbeatRequestProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *HeartbeatRequestProto) GetReports() []*StorageReportProto {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *HeartbeatRequestProto) GetXmitsInProgress() uint32 {
	if m != nil && m.XmitsInProgress != nil {
		return *m.XmitsInProgress
	}
	return Default_HeartbeatRequestProto_XmitsInProgress
}

func (m *HeartbeatRequestProto) GetXceiverCount() uint32 {
	if m != nil && m.XceiverCount != nil {
		return *m.XceiverCount
	}
	return Default_HeartbeatRequestProto_XceiverCount
}

func (m *HeartbeatRequestProto) GetFailedVolumes() uint32 {
	if m != nil && m.FailedVolumes != nil {
		return *m.FailedVolumes
	}
	return Default_HeartbeatRequestProto_FailedVolumes
}

func (m *HeartbeatRequestProto) GetCacheCapacity() uint64 {
	if m != nil && m.CacheCapacity != nil {
		return *m.CacheCapacity
	}
	return Default_HeartbeatRequestProto_CacheCapacity
}

func (m *HeartbeatRequestProto) GetCacheUsed() uint64 {
	if m != nil && m.CacheUsed != nil {
		return *m.CacheUsed
	}
	return Default_HeartbeatRequestProto_CacheUsed
}

func (m *HeartbeatRequestProto) GetVolumeFailureSummary() *VolumeFailureSummaryProto {
	if m != nil {
		return m.VolumeFailureSummary
	}
	return nil
}

func (m *HeartbeatRequestProto) GetRequestFullBlockReportLease() bool {
	if m != nil && m.RequestFullBlockReportLease != nil {
		return *m.RequestFullBlockReportLease
	}
	return Default_HeartbeatRequestProto_RequestFullBlockReportLease
}

// *
// state - State the NN is in when returning response to the DN
// txid - Highest transaction ID this NN has seen
type NNHAStatusHeartbeatProto struct {
	State            *NNHAStatusHeartbeatProto_State `protobuf:"varint,1,req,name=state,enum=NNHAStatusHeartbeatProto_State" json:"state,omitempty"`
	Txid             *uint64                         `protobuf:"varint,2,req,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *NNHAStatusHeartbeatProto) Reset()                    { *m = NNHAStatusHeartbeatProto{} }
func (m *NNHAStatusHeartbeatProto) String() string            { return proto.CompactTextString(m) }
func (*NNHAStatusHeartbeatProto) ProtoMessage()               {}
func (*NNHAStatusHeartbeatProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NNHAStatusHeartbeatProto) GetState() NNHAStatusHeartbeatProto_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return NNHAStatusHeartbeatProto_ACTIVE
}

func (m *NNHAStatusHeartbeatProto) GetTxid() uint64 {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return 0
}

// *
// cmds - Commands from namenode to datanode.
// haStatus - Status (from an HA perspective) of the NN sending this response
type HeartbeatResponseProto struct {
	Cmds                   []*DatanodeCommandProto    `protobuf:"bytes,1,rep,name=cmds" json:"cmds,omitempty"`
	HaStatus               *NNHAStatusHeartbeatProto  `protobuf:"bytes,2,req,name=haStatus" json:"haStatus,omitempty"`
	RollingUpgradeStatus   *RollingUpgradeStatusProto `protobuf:"bytes,3,opt,name=rollingUpgradeStatus" json:"rollingUpgradeStatus,omitempty"`
	FullBlockReportLeaseId *uint64                    `protobuf:"varint,4,opt,name=fullBlockReportLeaseId,def=0" json:"fullBlockReportLeaseId,omitempty"`
	RollingUpgradeStatusV2 *RollingUpgradeStatusProto `protobuf:"bytes,5,opt,name=rollingUpgradeStatusV2" json:"rollingUpgradeStatusV2,omitempty"`
	XXX_unrecognized       []byte                     `json:"-"`
}

func (m *HeartbeatResponseProto) Reset()                    { *m = HeartbeatResponseProto{} }
func (m *HeartbeatResponseProto) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponseProto) ProtoMessage()               {}
func (*HeartbeatResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

const Default_HeartbeatResponseProto_FullBlockReportLeaseId uint64 = 0

func (m *HeartbeatResponseProto) GetCmds() []*DatanodeCommandProto {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *HeartbeatResponseProto) GetHaStatus() *NNHAStatusHeartbeatProto {
	if m != nil {
		return m.HaStatus
	}
	return nil
}

func (m *HeartbeatResponseProto) GetRollingUpgradeStatus() *RollingUpgradeStatusProto {
	if m != nil {
		return m.RollingUpgradeStatus
	}
	return nil
}

func (m *HeartbeatResponseProto) GetFullBlockReportLeaseId() uint64 {
	if m != nil && m.FullBlockReportLeaseId != nil {
		return *m.FullBlockReportLeaseId
	}
	return Default_HeartbeatResponseProto_FullBlockReportLeaseId
}

func (m *HeartbeatResponseProto) GetRollingUpgradeStatusV2() *RollingUpgradeStatusProto {
	if m != nil {
		return m.RollingUpgradeStatusV2
	}
	return nil
}

// *
// registration - datanode registration information
// blockPoolID  - block pool ID of the reported blocks
// blocks       - each block is represented as multiple longs in the array.
//                first long represents block ID
//                second long represents length
//                third long represents gen stamp
//                fourth long (if under construction) represents replica state
// context      - An optional field containing information about the context
//                of this block report.
type BlockReportRequestProto struct {
	Registration     *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	BlockPoolId      *string                    `protobuf:"bytes,2,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	Reports          []*StorageBlockReportProto `protobuf:"bytes,3,rep,name=reports" json:"reports,omitempty"`
	Context          *BlockReportContextProto   `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *BlockReportRequestProto) Reset()                    { *m = BlockReportRequestProto{} }
func (m *BlockReportRequestProto) String() string            { return proto.CompactTextString(m) }
func (*BlockReportRequestProto) ProtoMessage()               {}
func (*BlockReportRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BlockReportRequestProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *BlockReportRequestProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *BlockReportRequestProto) GetReports() []*StorageBlockReportProto {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *BlockReportRequestProto) GetContext() *BlockReportContextProto {
	if m != nil {
		return m.Context
	}
	return nil
}

type BlockReportContextProto struct {
	// The total number of RPCs this block report is broken into.
	TotalRpcs *int32 `protobuf:"varint,1,req,name=totalRpcs" json:"totalRpcs,omitempty"`
	// The index of the current RPC (zero-based)
	CurRpc *int32 `protobuf:"varint,2,req,name=curRpc" json:"curRpc,omitempty"`
	// The unique 64-bit ID of this block report
	Id *int64 `protobuf:"varint,3,req,name=id" json:"id,omitempty"`
	// The block report lease ID, or 0 if we are sending without a lease to
	// bypass rate-limiting.
	LeaseId *uint64 `protobuf:"varint,4,opt,name=leaseId,def=0" json:"leaseId,omitempty"`
	// True if the reported blocks are sorted by increasing block IDs
	Sorted           *bool  `protobuf:"varint,5,opt,name=sorted,def=0" json:"sorted,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BlockReportContextProto) Reset()                    { *m = BlockReportContextProto{} }
func (m *BlockReportContextProto) String() string            { return proto.CompactTextString(m) }
func (*BlockReportContextProto) ProtoMessage()               {}
func (*BlockReportContextProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

const Default_BlockReportContextProto_LeaseId uint64 = 0
const Default_BlockReportContextProto_Sorted bool = false

func (m *BlockReportContextProto) GetTotalRpcs() int32 {
	if m != nil && m.TotalRpcs != nil {
		return *m.TotalRpcs
	}
	return 0
}

func (m *BlockReportContextProto) GetCurRpc() int32 {
	if m != nil && m.CurRpc != nil {
		return *m.CurRpc
	}
	return 0
}

func (m *BlockReportContextProto) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BlockReportContextProto) GetLeaseId() uint64 {
	if m != nil && m.LeaseId != nil {
		return *m.LeaseId
	}
	return Default_BlockReportContextProto_LeaseId
}

func (m *BlockReportContextProto) GetSorted() bool {
	if m != nil && m.Sorted != nil {
		return *m.Sorted
	}
	return Default_BlockReportContextProto_Sorted
}

// *
// Report of blocks in a storage
type StorageBlockReportProto struct {
	Storage          *DatanodeStorageProto `protobuf:"bytes,1,req,name=storage" json:"storage,omitempty"`
	Blocks           []uint64              `protobuf:"varint,2,rep,packed,name=blocks" json:"blocks,omitempty"`
	NumberOfBlocks   *uint64               `protobuf:"varint,3,opt,name=numberOfBlocks" json:"numberOfBlocks,omitempty"`
	BlocksBuffers    [][]byte              `protobuf:"bytes,4,rep,name=blocksBuffers" json:"blocksBuffers,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *StorageBlockReportProto) Reset()                    { *m = StorageBlockReportProto{} }
func (m *StorageBlockReportProto) String() string            { return proto.CompactTextString(m) }
func (*StorageBlockReportProto) ProtoMessage()               {}
func (*StorageBlockReportProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StorageBlockReportProto) GetStorage() *DatanodeStorageProto {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *StorageBlockReportProto) GetBlocks() []uint64 {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *StorageBlockReportProto) GetNumberOfBlocks() uint64 {
	if m != nil && m.NumberOfBlocks != nil {
		return *m.NumberOfBlocks
	}
	return 0
}

func (m *StorageBlockReportProto) GetBlocksBuffers() [][]byte {
	if m != nil {
		return m.BlocksBuffers
	}
	return nil
}

// *
// cmd - Command from namenode to the datanode
type BlockReportResponseProto struct {
	Cmd              *DatanodeCommandProto `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *BlockReportResponseProto) Reset()                    { *m = BlockReportResponseProto{} }
func (m *BlockReportResponseProto) String() string            { return proto.CompactTextString(m) }
func (*BlockReportResponseProto) ProtoMessage()               {}
func (*BlockReportResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BlockReportResponseProto) GetCmd() *DatanodeCommandProto {
	if m != nil {
		return m.Cmd
	}
	return nil
}

// *
// registration - datanode registration information
// blockPoolId  - block pool ID of the reported blocks
// blocks       - representation of blocks as longs for efficiency reasons
type CacheReportRequestProto struct {
	Registration     *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	BlockPoolId      *string                    `protobuf:"bytes,2,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	Blocks           []uint64                   `protobuf:"varint,3,rep,packed,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CacheReportRequestProto) Reset()                    { *m = CacheReportRequestProto{} }
func (m *CacheReportRequestProto) String() string            { return proto.CompactTextString(m) }
func (*CacheReportRequestProto) ProtoMessage()               {}
func (*CacheReportRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CacheReportRequestProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *CacheReportRequestProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *CacheReportRequestProto) GetBlocks() []uint64 {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type CacheReportResponseProto struct {
	Cmd              *DatanodeCommandProto `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CacheReportResponseProto) Reset()                    { *m = CacheReportResponseProto{} }
func (m *CacheReportResponseProto) String() string            { return proto.CompactTextString(m) }
func (*CacheReportResponseProto) ProtoMessage()               {}
func (*CacheReportResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CacheReportResponseProto) GetCmd() *DatanodeCommandProto {
	if m != nil {
		return m.Cmd
	}
	return nil
}

// *
// Data structure to send received or deleted block information
// from datanode to namenode.
type ReceivedDeletedBlockInfoProto struct {
	Block            *BlockProto                                `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	Status           *ReceivedDeletedBlockInfoProto_BlockStatus `protobuf:"varint,3,req,name=status,enum=ReceivedDeletedBlockInfoProto_BlockStatus" json:"status,omitempty"`
	DeleteHint       *string                                    `protobuf:"bytes,2,opt,name=deleteHint" json:"deleteHint,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *ReceivedDeletedBlockInfoProto) Reset()                    { *m = ReceivedDeletedBlockInfoProto{} }
func (m *ReceivedDeletedBlockInfoProto) String() string            { return proto.CompactTextString(m) }
func (*ReceivedDeletedBlockInfoProto) ProtoMessage()               {}
func (*ReceivedDeletedBlockInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReceivedDeletedBlockInfoProto) GetBlock() *BlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ReceivedDeletedBlockInfoProto) GetStatus() ReceivedDeletedBlockInfoProto_BlockStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ReceivedDeletedBlockInfoProto_RECEIVING
}

func (m *ReceivedDeletedBlockInfoProto) GetDeleteHint() string {
	if m != nil && m.DeleteHint != nil {
		return *m.DeleteHint
	}
	return ""
}

// *
// List of blocks received and deleted for a storage.
type StorageReceivedDeletedBlocksProto struct {
	StorageUuid      *string                          `protobuf:"bytes,1,req,name=storageUuid" json:"storageUuid,omitempty"`
	Blocks           []*ReceivedDeletedBlockInfoProto `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
	Storage          *DatanodeStorageProto            `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *StorageReceivedDeletedBlocksProto) Reset()         { *m = StorageReceivedDeletedBlocksProto{} }
func (m *StorageReceivedDeletedBlocksProto) String() string { return proto.CompactTextString(m) }
func (*StorageReceivedDeletedBlocksProto) ProtoMessage()    {}
func (*StorageReceivedDeletedBlocksProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *StorageReceivedDeletedBlocksProto) GetStorageUuid() string {
	if m != nil && m.StorageUuid != nil {
		return *m.StorageUuid
	}
	return ""
}

func (m *StorageReceivedDeletedBlocksProto) GetBlocks() []*ReceivedDeletedBlockInfoProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *StorageReceivedDeletedBlocksProto) GetStorage() *DatanodeStorageProto {
	if m != nil {
		return m.Storage
	}
	return nil
}

// *
// registration - datanode registration information
// blockPoolID  - block pool ID of the reported blocks
// blocks       - Received/deleted block list
type BlockReceivedAndDeletedRequestProto struct {
	Registration     *DatanodeRegistrationProto           `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	BlockPoolId      *string                              `protobuf:"bytes,2,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	Blocks           []*StorageReceivedDeletedBlocksProto `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *BlockReceivedAndDeletedRequestProto) Reset()         { *m = BlockReceivedAndDeletedRequestProto{} }
func (m *BlockReceivedAndDeletedRequestProto) String() string { return proto.CompactTextString(m) }
func (*BlockReceivedAndDeletedRequestProto) ProtoMessage()    {}
func (*BlockReceivedAndDeletedRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *BlockReceivedAndDeletedRequestProto) GetRegistration() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *BlockReceivedAndDeletedRequestProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *BlockReceivedAndDeletedRequestProto) GetBlocks() []*StorageReceivedDeletedBlocksProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// *
// void response
type BlockReceivedAndDeletedResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *BlockReceivedAndDeletedResponseProto) Reset()         { *m = BlockReceivedAndDeletedResponseProto{} }
func (m *BlockReceivedAndDeletedResponseProto) String() string { return proto.CompactTextString(m) }
func (*BlockReceivedAndDeletedResponseProto) ProtoMessage()    {}
func (*BlockReceivedAndDeletedResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

// *
// registartion - Datanode reporting the error
// errorCode - error code indicating the error
// msg - Free text description of the error
type ErrorReportRequestProto struct {
	Registartion     *DatanodeRegistrationProto `protobuf:"bytes,1,req,name=registartion" json:"registartion,omitempty"`
	ErrorCode        *uint32                    `protobuf:"varint,2,req,name=errorCode" json:"errorCode,omitempty"`
	Msg              *string                    `protobuf:"bytes,3,req,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *ErrorReportRequestProto) Reset()                    { *m = ErrorReportRequestProto{} }
func (m *ErrorReportRequestProto) String() string            { return proto.CompactTextString(m) }
func (*ErrorReportRequestProto) ProtoMessage()               {}
func (*ErrorReportRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ErrorReportRequestProto) GetRegistartion() *DatanodeRegistrationProto {
	if m != nil {
		return m.Registartion
	}
	return nil
}

func (m *ErrorReportRequestProto) GetErrorCode() uint32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ErrorReportRequestProto) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// *
// void response
type ErrorReportResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ErrorReportResponseProto) Reset()                    { *m = ErrorReportResponseProto{} }
func (m *ErrorReportResponseProto) String() string            { return proto.CompactTextString(m) }
func (*ErrorReportResponseProto) ProtoMessage()               {}
func (*ErrorReportResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

// *
// blocks - list of blocks that are reported as corrupt
type ReportBadBlocksRequestProto struct {
	Blocks           []*LocatedBlockProto `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ReportBadBlocksRequestProto) Reset()                    { *m = ReportBadBlocksRequestProto{} }
func (m *ReportBadBlocksRequestProto) String() string            { return proto.CompactTextString(m) }
func (*ReportBadBlocksRequestProto) ProtoMessage()               {}
func (*ReportBadBlocksRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReportBadBlocksRequestProto) GetBlocks() []*LocatedBlockProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// *
// void response
type ReportBadBlocksResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReportBadBlocksResponseProto) Reset()                    { *m = ReportBadBlocksResponseProto{} }
func (m *ReportBadBlocksResponseProto) String() string            { return proto.CompactTextString(m) }
func (*ReportBadBlocksResponseProto) ProtoMessage()               {}
func (*ReportBadBlocksResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

// *
// Commit block synchronization request during lease recovery
type CommitBlockSynchronizationRequestProto struct {
	Block             *ExtendedBlockProto `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	NewGenStamp       *uint64             `protobuf:"varint,2,req,name=newGenStamp" json:"newGenStamp,omitempty"`
	NewLength         *uint64             `protobuf:"varint,3,req,name=newLength" json:"newLength,omitempty"`
	CloseFile         *bool               `protobuf:"varint,4,req,name=closeFile" json:"closeFile,omitempty"`
	DeleteBlock       *bool               `protobuf:"varint,5,req,name=deleteBlock" json:"deleteBlock,omitempty"`
	NewTaragets       []*DatanodeIDProto  `protobuf:"bytes,6,rep,name=newTaragets" json:"newTaragets,omitempty"`
	NewTargetStorages []string            `protobuf:"bytes,7,rep,name=newTargetStorages" json:"newTargetStorages,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *CommitBlockSynchronizationRequestProto) Reset() {
	*m = CommitBlockSynchronizationRequestProto{}
}
func (m *CommitBlockSynchronizationRequestProto) String() string { return proto.CompactTextString(m) }
func (*CommitBlockSynchronizationRequestProto) ProtoMessage()    {}
func (*CommitBlockSynchronizationRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *CommitBlockSynchronizationRequestProto) GetBlock() *ExtendedBlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *CommitBlockSynchronizationRequestProto) GetNewGenStamp() uint64 {
	if m != nil && m.NewGenStamp != nil {
		return *m.NewGenStamp
	}
	return 0
}

func (m *CommitBlockSynchronizationRequestProto) GetNewLength() uint64 {
	if m != nil && m.NewLength != nil {
		return *m.NewLength
	}
	return 0
}

func (m *CommitBlockSynchronizationRequestProto) GetCloseFile() bool {
	if m != nil && m.CloseFile != nil {
		return *m.CloseFile
	}
	return false
}

func (m *CommitBlockSynchronizationRequestProto) GetDeleteBlock() bool {
	if m != nil && m.DeleteBlock != nil {
		return *m.DeleteBlock
	}
	return false
}

func (m *CommitBlockSynchronizationRequestProto) GetNewTaragets() []*DatanodeIDProto {
	if m != nil {
		return m.NewTaragets
	}
	return nil
}

func (m *CommitBlockSynchronizationRequestProto) GetNewTargetStorages() []string {
	if m != nil {
		return m.NewTargetStorages
	}
	return nil
}

// *
// void response
type CommitBlockSynchronizationResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommitBlockSynchronizationResponseProto) Reset() {
	*m = CommitBlockSynchronizationResponseProto{}
}
func (m *CommitBlockSynchronizationResponseProto) String() string { return proto.CompactTextString(m) }
func (*CommitBlockSynchronizationResponseProto) ProtoMessage()    {}
func (*CommitBlockSynchronizationResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func init() {
	proto.RegisterType((*DatanodeRegistrationProto)(nil), "DatanodeRegistrationProto")
	proto.RegisterType((*DatanodeCommandProto)(nil), "DatanodeCommandProto")
	proto.RegisterType((*BalancerBandwidthCommandProto)(nil), "BalancerBandwidthCommandProto")
	proto.RegisterType((*BlockCommandProto)(nil), "BlockCommandProto")
	proto.RegisterType((*BlockIdCommandProto)(nil), "BlockIdCommandProto")
	proto.RegisterType((*BlockRecoveryCommandProto)(nil), "BlockRecoveryCommandProto")
	proto.RegisterType((*FinalizeCommandProto)(nil), "FinalizeCommandProto")
	proto.RegisterType((*KeyUpdateCommandProto)(nil), "KeyUpdateCommandProto")
	proto.RegisterType((*RegisterCommandProto)(nil), "RegisterCommandProto")
	proto.RegisterType((*RegisterDatanodeRequestProto)(nil), "RegisterDatanodeRequestProto")
	proto.RegisterType((*RegisterDatanodeResponseProto)(nil), "RegisterDatanodeResponseProto")
	proto.RegisterType((*VolumeFailureSummaryProto)(nil), "VolumeFailureSummaryProto")
	proto.RegisterType((*HeartbeatRequestProto)(nil), "HeartbeatRequestProto")
	proto.RegisterType((*NNHAStatusHeartbeatProto)(nil), "NNHAStatusHeartbeatProto")
	proto.RegisterType((*HeartbeatResponseProto)(nil), "HeartbeatResponseProto")
	proto.RegisterType((*BlockReportRequestProto)(nil), "BlockReportRequestProto")
	proto.RegisterType((*BlockReportContextProto)(nil), "BlockReportContextProto")
	proto.RegisterType((*StorageBlockReportProto)(nil), "StorageBlockReportProto")
	proto.RegisterType((*BlockReportResponseProto)(nil), "BlockReportResponseProto")
	proto.RegisterType((*CacheReportRequestProto)(nil), "CacheReportRequestProto")
	proto.RegisterType((*CacheReportResponseProto)(nil), "CacheReportResponseProto")
	proto.RegisterType((*ReceivedDeletedBlockInfoProto)(nil), "ReceivedDeletedBlockInfoProto")
	proto.RegisterType((*StorageReceivedDeletedBlocksProto)(nil), "StorageReceivedDeletedBlocksProto")
	proto.RegisterType((*BlockReceivedAndDeletedRequestProto)(nil), "BlockReceivedAndDeletedRequestProto")
	proto.RegisterType((*BlockReceivedAndDeletedResponseProto)(nil), "BlockReceivedAndDeletedResponseProto")
	proto.RegisterType((*ErrorReportRequestProto)(nil), "ErrorReportRequestProto")
	proto.RegisterType((*ErrorReportResponseProto)(nil), "ErrorReportResponseProto")
	proto.RegisterType((*ReportBadBlocksRequestProto)(nil), "ReportBadBlocksRequestProto")
	proto.RegisterType((*ReportBadBlocksResponseProto)(nil), "ReportBadBlocksResponseProto")
	proto.RegisterType((*CommitBlockSynchronizationRequestProto)(nil), "CommitBlockSynchronizationRequestProto")
	proto.RegisterType((*CommitBlockSynchronizationResponseProto)(nil), "CommitBlockSynchronizationResponseProto")
	proto.RegisterEnum("DatanodeCommandProto_Type", DatanodeCommandProto_Type_name, DatanodeCommandProto_Type_value)
	proto.RegisterEnum("BlockCommandProto_Action", BlockCommandProto_Action_name, BlockCommandProto_Action_value)
	proto.RegisterEnum("BlockIdCommandProto_Action", BlockIdCommandProto_Action_name, BlockIdCommandProto_Action_value)
	proto.RegisterEnum("NNHAStatusHeartbeatProto_State", NNHAStatusHeartbeatProto_State_name, NNHAStatusHeartbeatProto_State_value)
	proto.RegisterEnum("ReceivedDeletedBlockInfoProto_BlockStatus", ReceivedDeletedBlockInfoProto_BlockStatus_name, ReceivedDeletedBlockInfoProto_BlockStatus_value)
	proto.RegisterEnum("ErrorReportRequestProto_ErrorCode", ErrorReportRequestProto_ErrorCode_name, ErrorReportRequestProto_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DatanodeProtocolService service

type DatanodeProtocolServiceClient interface {
	// *
	// Register a datanode at a namenode
	RegisterDatanode(ctx context.Context, in *RegisterDatanodeRequestProto, opts ...grpc.CallOption) (*RegisterDatanodeResponseProto, error)
	// *
	// Send heartbeat from datanode to namenode
	SendHeartbeat(ctx context.Context, in *HeartbeatRequestProto, opts ...grpc.CallOption) (*HeartbeatResponseProto, error)
	// *
	// Report blocks at a given datanode to the namenode
	BlockReport(ctx context.Context, in *BlockReportRequestProto, opts ...grpc.CallOption) (*BlockReportResponseProto, error)
	// *
	// Report cached blocks at a datanode to the namenode
	CacheReport(ctx context.Context, in *CacheReportRequestProto, opts ...grpc.CallOption) (*CacheReportResponseProto, error)
	// *
	// Incremental block report from the DN. This contains info about recently
	// received and deleted blocks, as well as when blocks start being
	// received.
	BlockReceivedAndDeleted(ctx context.Context, in *BlockReceivedAndDeletedRequestProto, opts ...grpc.CallOption) (*BlockReceivedAndDeletedResponseProto, error)
	// *
	// Report from a datanode of an error to the active namenode.
	// Used for debugging.
	ErrorReport(ctx context.Context, in *ErrorReportRequestProto, opts ...grpc.CallOption) (*ErrorReportResponseProto, error)
	// *
	// Request the version
	VersionRequest(ctx context.Context, in *VersionRequestProto, opts ...grpc.CallOption) (*VersionResponseProto, error)
	// *
	// Report corrupt blocks at the specified location
	ReportBadBlocks(ctx context.Context, in *ReportBadBlocksRequestProto, opts ...grpc.CallOption) (*ReportBadBlocksResponseProto, error)
	// *
	// Commit block synchronization during lease recovery.
	CommitBlockSynchronization(ctx context.Context, in *CommitBlockSynchronizationRequestProto, opts ...grpc.CallOption) (*CommitBlockSynchronizationResponseProto, error)
}

type datanodeProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatanodeProtocolServiceClient(cc *grpc.ClientConn) DatanodeProtocolServiceClient {
	return &datanodeProtocolServiceClient{cc}
}

func (c *datanodeProtocolServiceClient) RegisterDatanode(ctx context.Context, in *RegisterDatanodeRequestProto, opts ...grpc.CallOption) (*RegisterDatanodeResponseProto, error) {
	out := new(RegisterDatanodeResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/registerDatanode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequestProto, opts ...grpc.CallOption) (*HeartbeatResponseProto, error) {
	out := new(HeartbeatResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/sendHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) BlockReport(ctx context.Context, in *BlockReportRequestProto, opts ...grpc.CallOption) (*BlockReportResponseProto, error) {
	out := new(BlockReportResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/blockReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) CacheReport(ctx context.Context, in *CacheReportRequestProto, opts ...grpc.CallOption) (*CacheReportResponseProto, error) {
	out := new(CacheReportResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/cacheReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) BlockReceivedAndDeleted(ctx context.Context, in *BlockReceivedAndDeletedRequestProto, opts ...grpc.CallOption) (*BlockReceivedAndDeletedResponseProto, error) {
	out := new(BlockReceivedAndDeletedResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/blockReceivedAndDeleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) ErrorReport(ctx context.Context, in *ErrorReportRequestProto, opts ...grpc.CallOption) (*ErrorReportResponseProto, error) {
	out := new(ErrorReportResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/errorReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) VersionRequest(ctx context.Context, in *VersionRequestProto, opts ...grpc.CallOption) (*VersionResponseProto, error) {
	out := new(VersionResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/versionRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) ReportBadBlocks(ctx context.Context, in *ReportBadBlocksRequestProto, opts ...grpc.CallOption) (*ReportBadBlocksResponseProto, error) {
	out := new(ReportBadBlocksResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/reportBadBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeProtocolServiceClient) CommitBlockSynchronization(ctx context.Context, in *CommitBlockSynchronizationRequestProto, opts ...grpc.CallOption) (*CommitBlockSynchronizationResponseProto, error) {
	out := new(CommitBlockSynchronizationResponseProto)
	err := grpc.Invoke(ctx, "/DatanodeProtocolService/commitBlockSynchronization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatanodeProtocolService service

type DatanodeProtocolServiceServer interface {
	// *
	// Register a datanode at a namenode
	RegisterDatanode(context.Context, *RegisterDatanodeRequestProto) (*RegisterDatanodeResponseProto, error)
	// *
	// Send heartbeat from datanode to namenode
	SendHeartbeat(context.Context, *HeartbeatRequestProto) (*HeartbeatResponseProto, error)
	// *
	// Report blocks at a given datanode to the namenode
	BlockReport(context.Context, *BlockReportRequestProto) (*BlockReportResponseProto, error)
	// *
	// Report cached blocks at a datanode to the namenode
	CacheReport(context.Context, *CacheReportRequestProto) (*CacheReportResponseProto, error)
	// *
	// Incremental block report from the DN. This contains info about recently
	// received and deleted blocks, as well as when blocks start being
	// received.
	BlockReceivedAndDeleted(context.Context, *BlockReceivedAndDeletedRequestProto) (*BlockReceivedAndDeletedResponseProto, error)
	// *
	// Report from a datanode of an error to the active namenode.
	// Used for debugging.
	ErrorReport(context.Context, *ErrorReportRequestProto) (*ErrorReportResponseProto, error)
	// *
	// Request the version
	VersionRequest(context.Context, *VersionRequestProto) (*VersionResponseProto, error)
	// *
	// Report corrupt blocks at the specified location
	ReportBadBlocks(context.Context, *ReportBadBlocksRequestProto) (*ReportBadBlocksResponseProto, error)
	// *
	// Commit block synchronization during lease recovery.
	CommitBlockSynchronization(context.Context, *CommitBlockSynchronizationRequestProto) (*CommitBlockSynchronizationResponseProto, error)
}

func RegisterDatanodeProtocolServiceServer(s *grpc.Server, srv DatanodeProtocolServiceServer) {
	s.RegisterService(&_DatanodeProtocolService_serviceDesc, srv)
}

func _DatanodeProtocolService_RegisterDatanode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDatanodeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).RegisterDatanode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/RegisterDatanode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).RegisterDatanode(ctx, req.(*RegisterDatanodeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/SendHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_BlockReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).BlockReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/BlockReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).BlockReport(ctx, req.(*BlockReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_CacheReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).CacheReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/CacheReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).CacheReport(ctx, req.(*CacheReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_BlockReceivedAndDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReceivedAndDeletedRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).BlockReceivedAndDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/BlockReceivedAndDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).BlockReceivedAndDeleted(ctx, req.(*BlockReceivedAndDeletedRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_ErrorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).ErrorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/ErrorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).ErrorReport(ctx, req.(*ErrorReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_VersionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).VersionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/VersionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).VersionRequest(ctx, req.(*VersionRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_ReportBadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBadBlocksRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).ReportBadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/ReportBadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).ReportBadBlocks(ctx, req.(*ReportBadBlocksRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatanodeProtocolService_CommitBlockSynchronization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitBlockSynchronizationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatanodeProtocolServiceServer).CommitBlockSynchronization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatanodeProtocolService/CommitBlockSynchronization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatanodeProtocolServiceServer).CommitBlockSynchronization(ctx, req.(*CommitBlockSynchronizationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatanodeProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DatanodeProtocolService",
	HandlerType: (*DatanodeProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerDatanode",
			Handler:    _DatanodeProtocolService_RegisterDatanode_Handler,
		},
		{
			MethodName: "sendHeartbeat",
			Handler:    _DatanodeProtocolService_SendHeartbeat_Handler,
		},
		{
			MethodName: "blockReport",
			Handler:    _DatanodeProtocolService_BlockReport_Handler,
		},
		{
			MethodName: "cacheReport",
			Handler:    _DatanodeProtocolService_CacheReport_Handler,
		},
		{
			MethodName: "blockReceivedAndDeleted",
			Handler:    _DatanodeProtocolService_BlockReceivedAndDeleted_Handler,
		},
		{
			MethodName: "errorReport",
			Handler:    _DatanodeProtocolService_ErrorReport_Handler,
		},
		{
			MethodName: "versionRequest",
			Handler:    _DatanodeProtocolService_VersionRequest_Handler,
		},
		{
			MethodName: "reportBadBlocks",
			Handler:    _DatanodeProtocolService_ReportBadBlocks_Handler,
		},
		{
			MethodName: "commitBlockSynchronization",
			Handler:    _DatanodeProtocolService_CommitBlockSynchronization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("DatanodeProtocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x73, 0xe3, 0x48,
	0x15, 0x46, 0xbe, 0x24, 0xf1, 0xc9, 0x65, 0x3c, 0x9d, 0x9b, 0xe3, 0xd9, 0xcc, 0xce, 0x6a, 0x67,
	0xe7, 0x06, 0x88, 0x25, 0x2c, 0xb7, 0x29, 0x96, 0x5a, 0xdf, 0x32, 0x31, 0x93, 0x72, 0x86, 0x8e,
	0x13, 0x6a, 0x5f, 0x98, 0x52, 0xa4, 0x76, 0xe2, 0x1a, 0x59, 0x0a, 0x92, 0x9c, 0x49, 0xf6, 0x0f,
	0xf0, 0x13, 0x78, 0xe0, 0x3f, 0xf0, 0xb0, 0x05, 0xbf, 0x80, 0x27, 0x7e, 0x01, 0xb5, 0xc5, 0x03,
	0x55, 0x50, 0xc5, 0x8f, 0xe0, 0x89, 0xd3, 0x17, 0xc9, 0x92, 0x2d, 0x79, 0xb3, 0xd4, 0x14, 0xbc,
	0xc9, 0xa7, 0xbf, 0x73, 0xba, 0xcf, 0xe9, 0xef, 0x5c, 0xda, 0xb0, 0xd5, 0x36, 0x43, 0xd3, 0xf5,
	0x6c, 0xf6, 0xca, 0xf7, 0x42, 0xcf, 0xf2, 0x1c, 0xe3, 0x92, 0x7f, 0xd4, 0xe1, 0xc2, 0x1e, 0x04,
	0xf2, 0x5b, 0xff, 0x4a, 0x83, 0x9d, 0x08, 0x46, 0xd9, 0xf9, 0x30, 0x08, 0x7d, 0x33, 0x1c, 0x7a,
	0xae, 0x50, 0x21, 0x1f, 0x03, 0xd8, 0x6a, 0xb1, 0xdb, 0xae, 0x69, 0x0f, 0x0a, 0x4f, 0x96, 0xf7,
	0xaa, 0x46, 0x3b, 0x16, 0x09, 0x14, 0x4d, 0x60, 0xc8, 0x0f, 0x60, 0x39, 0x08, 0x3d, 0xdf, 0x3c,
	0x67, 0x5d, 0x77, 0xe0, 0xd5, 0x0a, 0x42, 0xe5, 0xae, 0x71, 0x3c, 0x91, 0x49, 0x9d, 0x24, 0x8a,
	0x7c, 0x1b, 0x4a, 0x6f, 0xd8, 0x4d, 0x50, 0x2b, 0x0a, 0xf4, 0xb6, 0xd1, 0xb9, 0xbe, 0xf4, 0xfc,
	0x90, 0xd9, 0x4d, 0xc7, 0xb3, 0xde, 0xbc, 0xc4, 0x15, 0xa9, 0x23, 0x40, 0xe4, 0x09, 0xdc, 0x09,
	0xbc, 0x41, 0xf8, 0xd6, 0xf4, 0xd9, 0x29, 0xf3, 0x03, 0x3c, 0x6b, 0xad, 0x84, 0x7a, 0x15, 0x3a,
	0x2d, 0xd6, 0xbf, 0x2c, 0xc3, 0x46, 0x74, 0xd6, 0x96, 0x37, 0x1a, 0x99, 0xae, 0x2d, 0xdd, 0xfa,
	0x04, 0x16, 0xad, 0x91, 0xdd, 0xbf, 0xb9, 0x64, 0xc2, 0xa7, 0xb5, 0xbd, 0xba, 0x91, 0x85, 0x33,
	0x38, 0x82, 0x46, 0x50, 0xf2, 0x19, 0x2c, 0x9f, 0x99, 0x8e, 0xe9, 0x5a, 0xcc, 0x6f, 0x8d, 0x6c,
	0x74, 0x4d, 0xc3, 0xc3, 0xde, 0x37, 0x9a, 0x4a, 0xd6, 0x44, 0xb5, 0xb7, 0x43, 0x3b, 0xbc, 0x48,
	0x9a, 0xa0, 0x49, 0x15, 0xf2, 0x0c, 0x16, 0xce, 0x9c, 0x37, 0x5c, 0xb9, 0x28, 0x94, 0x89, 0x21,
	0x3c, 0x4c, 0x29, 0x28, 0x04, 0xf9, 0x19, 0x2c, 0xfb, 0xcc, 0xf2, 0xae, 0x98, 0x7f, 0xc3, 0x15,
	0x4a, 0x42, 0xa1, 0x2e, 0x15, 0x68, 0xb4, 0x90, 0xda, 0x29, 0x01, 0x27, 0x3f, 0x86, 0xe5, 0xc1,
	0xd0, 0x35, 0x9d, 0xe1, 0x17, 0x8c, 0x6b, 0x97, 0x85, 0xf6, 0xa6, 0xb1, 0x1f, 0xc9, 0x52, 0x8a,
	0x09, 0x24, 0x79, 0x0e, 0x2b, 0x18, 0xe5, 0x93, 0x4b, 0xbc, 0x52, 0xa1, 0xb9, 0x20, 0x34, 0xb7,
	0x8c, 0x97, 0xb1, 0x30, 0xa9, 0x9a, 0xc2, 0xf2, 0x4d, 0x7d, 0x41, 0x21, 0x19, 0xa0, 0x45, 0xb5,
	0x29, 0x8d, 0x64, 0x53, 0xa7, 0x8d, 0x91, 0x48, 0xb3, 0x25, 0xf4, 0xba, 0x6b, 0x73, 0xad, 0x25,
	0xa1, 0xb5, 0x21, 0x1d, 0x45, 0x51, 0x52, 0x29, 0x46, 0xe9, 0x7f, 0xd5, 0xa0, 0x24, 0x2e, 0xe5,
	0x3d, 0xa8, 0xe5, 0x5d, 0x40, 0xf5, 0x5b, 0xa4, 0x0a, 0x2b, 0xc9, 0x08, 0x57, 0x35, 0x52, 0x83,
	0x8d, 0xac, 0x10, 0x56, 0x0b, 0x64, 0x1d, 0xee, 0x4c, 0x85, 0xa7, 0x5a, 0x24, 0x1b, 0x50, 0x9d,
	0xf6, 0xbc, 0x5a, 0xe2, 0xd0, 0x29, 0xa7, 0xaa, 0x65, 0x6e, 0xf9, 0xc4, 0x1d, 0x07, 0xcc, 0x3e,
	0xb9, 0x3c, 0xf7, 0xcd, 0x98, 0x49, 0xd5, 0x05, 0xb2, 0x0d, 0xeb, 0xbd, 0xb1, 0xe3, 0x4c, 0x51,
	0xac, 0xba, 0x48, 0x08, 0xac, 0xa5, 0xdd, 0xac, 0x2e, 0xe9, 0x9f, 0xc2, 0xee, 0x5c, 0x46, 0xa1,
	0xc7, 0x95, 0xb3, 0x68, 0x41, 0xd0, 0xb7, 0x44, 0x27, 0x02, 0xfd, 0xdf, 0x05, 0xb8, 0x3b, 0x43,
	0x2a, 0xf2, 0x7d, 0x58, 0x30, 0x2d, 0x9e, 0xd6, 0x8a, 0xef, 0x3b, 0xb3, 0xc4, 0x33, 0x1a, 0x02,
	0x40, 0x15, 0x90, 0x3c, 0x40, 0xb6, 0x73, 0xcc, 0x2b, 0xcf, 0x73, 0xba, 0xb6, 0x48, 0xe4, 0x0a,
	0x4d, 0x8a, 0xc8, 0x87, 0x9c, 0xcd, 0xf8, 0x93, 0xe7, 0x6d, 0x11, 0xef, 0x6c, 0x59, 0x1a, 0x8d,
	0x69, 0xcc, 0x97, 0xc8, 0x77, 0x61, 0x31, 0x34, 0xfd, 0x73, 0x16, 0x06, 0x48, 0x61, 0x8e, 0x5a,
	0x9f, 0x94, 0x0f, 0x4c, 0x7d, 0x95, 0xd9, 0x11, 0x86, 0x34, 0x81, 0xc8, 0x4f, 0x55, 0x30, 0x4e,
	0xc6, 0x43, 0x3b, 0x40, 0xfa, 0x16, 0x45, 0xb6, 0x24, 0x85, 0x52, 0x31, 0x03, 0x3d, 0x63, 0x83,
	0xf3, 0x24, 0x40, 0x22, 0xa7, 0x6c, 0x08, 0x61, 0x96, 0x0d, 0xb1, 0xa0, 0x7f, 0x02, 0x0b, 0x32,
	0x1e, 0x64, 0x05, 0x96, 0xfa, 0xb4, 0xd1, 0x3b, 0xde, 0xef, 0x50, 0xa4, 0xcf, 0x1a, 0x40, 0xb7,
	0x77, 0xda, 0x38, 0xec, 0xb6, 0x1b, 0xfd, 0x0e, 0x92, 0x06, 0x57, 0x8f, 0x0f, 0x4e, 0xfa, 0xed,
	0xa3, 0x5f, 0xf5, 0xaa, 0x45, 0xfd, 0x0f, 0x1a, 0xac, 0x67, 0xf0, 0x16, 0x8b, 0x62, 0x3a, 0xfc,
	0xf7, 0xb2, 0xd8, 0xfd, 0xcd, 0x2f, 0xe0, 0x3e, 0x4f, 0x1b, 0x61, 0x47, 0x5e, 0x41, 0xa9, 0x59,
	0xa8, 0x6a, 0x34, 0x96, 0xe9, 0x0f, 0x62, 0x27, 0x2a, 0x50, 0x6e, 0x35, 0x5a, 0x07, 0x1d, 0xf4,
	0x60, 0x19, 0x16, 0x4f, 0x7a, 0xf2, 0x47, 0x41, 0xff, 0x05, 0xec, 0xe4, 0x16, 0x14, 0xbc, 0xba,
	0xe8, 0x7e, 0x35, 0x11, 0x3b, 0x9e, 0xc9, 0x02, 0x36, 0x74, 0xcf, 0x67, 0x6f, 0x5a, 0xff, 0x09,
	0x6c, 0x64, 0x95, 0x97, 0x69, 0x3f, 0xb4, 0x19, 0x3f, 0xf4, 0x36, 0x6c, 0x66, 0x96, 0x97, 0xb8,
	0x2f, 0x68, 0xb7, 0xe8, 0x0b, 0xfa, 0x16, 0x6c, 0x64, 0x55, 0x1a, 0xfd, 0xd7, 0xf0, 0x5e, 0x24,
	0x9f, 0x34, 0xba, 0xdf, 0x8c, 0x59, 0x10, 0xca, 0x4d, 0x7e, 0x0e, 0x2b, 0x7e, 0xa2, 0xf1, 0xa9,
	0xcd, 0x26, 0x1d, 0x61, 0xa6, 0x2b, 0xd2, 0x14, 0x5e, 0x7f, 0x0d, 0xbb, 0xb3, 0xf6, 0x83, 0x4b,
	0xcf, 0x0d, 0xd8, 0xbb, 0xd9, 0xe0, 0x2f, 0xd8, 0xa2, 0x4f, 0x3d, 0x67, 0x3c, 0x62, 0xfb, 0xe6,
	0xd0, 0x19, 0xfb, 0xec, 0x78, 0x8c, 0xee, 0xf9, 0x37, 0xd2, 0xfa, 0x8f, 0x60, 0x6b, 0x80, 0x62,
	0x66, 0x2b, 0xfe, 0x1e, 0x7a, 0x96, 0x50, 0x93, 0xb7, 0x56, 0xa1, 0x39, 0xab, 0xd8, 0x03, 0x37,
	0x1d, 0x33, 0x08, 0x53, 0x86, 0xf1, 0x44, 0x4c, 0x10, 0xad, 0x44, 0xb3, 0x17, 0xd1, 0x97, 0x3a,
	0x06, 0x6e, 0x38, 0xc2, 0x6f, 0xbb, 0x65, 0x5e, 0x9a, 0xd6, 0x30, 0xbc, 0x39, 0xf4, 0x82, 0xb0,
	0xef, 0x85, 0xa6, 0x23, 0xfa, 0x77, 0x89, 0xce, 0x41, 0xe8, 0xff, 0x2a, 0xc2, 0xe6, 0x01, 0x33,
	0xfd, 0xf0, 0x8c, 0x99, 0xe1, 0xbb, 0xbc, 0x06, 0x5e, 0x68, 0x7c, 0xc6, 0xe9, 0x11, 0xa0, 0x07,
	0xb2, 0xd0, 0x28, 0x9f, 0xa9, 0x10, 0xab, 0x42, 0xa3, 0x30, 0x48, 0xad, 0x3b, 0xd7, 0xa3, 0x61,
	0x18, 0x74, 0xb9, 0xb1, 0x73, 0x9f, 0x05, 0x81, 0xe8, 0xc9, 0xab, 0xcf, 0xb5, 0x8f, 0xe9, 0xf4,
	0x0a, 0xf9, 0x08, 0x56, 0xae, 0x2d, 0x36, 0xbc, 0xe2, 0xcc, 0x1a, 0xbb, 0xa1, 0x68, 0xc6, 0x02,
	0x99, 0x12, 0x93, 0xc7, 0xb0, 0x2a, 0x83, 0x2d, 0xe3, 0x16, 0x88, 0xb6, 0x2b, 0x70, 0x69, 0x39,
	0x07, 0x5a, 0xa6, 0x75, 0xc1, 0xa2, 0xf8, 0x88, 0x2e, 0x5b, 0x12, 0xc0, 0x94, 0x9c, 0xbc, 0x0f,
	0x15, 0x21, 0x38, 0xc1, 0xb6, 0x22, 0xfa, 0xa9, 0x00, 0x4d, 0x64, 0xa4, 0x07, 0x1b, 0x57, 0x19,
	0xd4, 0x50, 0x5d, 0xb4, 0x6e, 0xe4, 0xf2, 0x86, 0x66, 0xea, 0x91, 0x17, 0x70, 0xcf, 0x97, 0xb7,
	0xb2, 0x8f, 0x1d, 0x4b, 0xd5, 0x06, 0x1e, 0xb1, 0x43, 0x66, 0x06, 0xac, 0x56, 0x41, 0xb3, 0x4b,
	0xcf, 0xcb, 0x03, 0xd3, 0x09, 0x18, 0x9d, 0x87, 0xd4, 0x7f, 0xab, 0x41, 0xad, 0xd7, 0x3b, 0x68,
	0x1c, 0x87, 0x66, 0x38, 0x0e, 0xe2, 0x2b, 0x97, 0x77, 0xfd, 0x43, 0x28, 0x07, 0x21, 0xe7, 0x9a,
	0x2c, 0x87, 0xef, 0x1b, 0x79, 0x48, 0x83, 0x0b, 0x19, 0x95, 0x68, 0x6c, 0x97, 0xa5, 0xf0, 0x7a,
	0x68, 0x2b, 0x86, 0x8a, 0x6f, 0xac, 0x71, 0x65, 0x81, 0x21, 0x80, 0xc5, 0xae, 0xd5, 0xef, 0x9e,
	0x76, 0xb0, 0xed, 0x63, 0x8d, 0x3b, 0xee, 0x37, 0x7a, 0xed, 0xe6, 0xe7, 0x55, 0x4d, 0xff, 0xaa,
	0x00, 0x5b, 0x09, 0xca, 0x25, 0x33, 0xf3, 0x29, 0x94, 0x70, 0xb8, 0x9b, 0xd4, 0xb7, 0xac, 0x21,
	0x90, 0x0a, 0x08, 0x1e, 0x79, 0xe9, 0xc2, 0x94, 0x47, 0x54, 0x43, 0xed, 0x4e, 0xee, 0xa9, 0x69,
	0x0c, 0xe5, 0xf7, 0xe3, 0x7b, 0x8e, 0x83, 0x15, 0x53, 0x4d, 0x05, 0xca, 0x44, 0x51, 0xdd, 0x0f,
	0xcd, 0x58, 0x54, 0xf7, 0x93, 0xa5, 0x47, 0x7e, 0x8a, 0xd9, 0x9e, 0x11, 0xee, 0xae, 0x1c, 0x10,
	0x05, 0x3b, 0x72, 0x00, 0x84, 0xc2, 0x56, 0x96, 0xc9, 0xd3, 0x3d, 0x35, 0x1d, 0xce, 0x3b, 0x4c,
	0x8e, 0xa6, 0xfe, 0x4f, 0x0d, 0xb6, 0x13, 0x5b, 0xbd, 0xd3, 0x84, 0xfe, 0xfa, 0xfe, 0xb7, 0x37,
	0x49, 0x79, 0x39, 0x81, 0xd4, 0xa2, 0x94, 0x4f, 0x9c, 0x69, 0x2a, 0xef, 0x51, 0xc7, 0xf2, 0xdc,
	0x90, 0x5d, 0x87, 0x6a, 0xa4, 0xae, 0x19, 0x09, 0x70, 0x4b, 0x2e, 0x29, 0x1d, 0x05, 0xd4, 0x7f,
	0x9f, 0xf6, 0x32, 0x09, 0xe2, 0xd3, 0x58, 0xc8, 0x2b, 0x1b, 0xbd, 0xb4, 0x64, 0x9f, 0x2a, 0xd3,
	0x89, 0x80, 0x6c, 0xc1, 0x82, 0x35, 0xf6, 0xf1, 0x53, 0x1c, 0xbf, 0x4c, 0xd5, 0x2f, 0x1c, 0x23,
	0x0a, 0x43, 0x5b, 0x94, 0xcb, 0x22, 0xc5, 0x2f, 0x72, 0x0f, 0x16, 0x9d, 0xe9, 0x7b, 0x8c, 0x24,
	0x64, 0x17, 0x16, 0x02, 0xd1, 0xf6, 0xc4, 0x45, 0xc5, 0xe9, 0xa7, 0x84, 0xfa, 0x1f, 0xf1, 0x74,
	0x39, 0x6e, 0x93, 0xef, 0xc1, 0xa2, 0x7a, 0x67, 0xa9, 0xf0, 0x4f, 0x38, 0xae, 0x54, 0x94, 0xab,
	0x0a, 0x45, 0xea, 0x71, 0xcf, 0x2f, 0xc4, 0x03, 0x45, 0x34, 0xca, 0x3d, 0x82, 0x35, 0x77, 0x3c,
	0x3a, 0x63, 0xfe, 0xd1, 0xa0, 0x19, 0xcd, 0x7d, 0x78, 0x56, 0x3a, 0x25, 0x25, 0x0f, 0x61, 0x55,
	0x6a, 0x34, 0xc7, 0x83, 0x01, 0x3e, 0xc5, 0xc4, 0xe0, 0xb7, 0x42, 0xd3, 0x42, 0xbd, 0x85, 0x83,
	0x7b, 0x92, 0x39, 0xc9, 0xbc, 0x7c, 0x0c, 0x45, 0x4c, 0x3a, 0x3c, 0xb2, 0x96, 0x9f, 0x96, 0x1c,
	0xa1, 0xff, 0x0e, 0x7d, 0x6f, 0xf1, 0x62, 0xf8, 0x7f, 0xe1, 0x5f, 0x3d, 0x35, 0x00, 0xa7, 0x82,
	0xc5, 0xdd, 0x4b, 0x1d, 0xec, 0xbf, 0x72, 0xef, 0xef, 0x1a, 0x9f, 0x2d, 0x44, 0x8b, 0xb1, 0xdb,
	0xcc, 0x61, 0xd1, 0xe8, 0x13, 0x3f, 0xa3, 0xc9, 0x07, 0x50, 0x16, 0x1b, 0x2a, 0xef, 0x52, 0x23,
	0xb8, 0x5c, 0xc1, 0x71, 0x78, 0x21, 0x88, 0x8a, 0x0e, 0xaf, 0xb6, 0xcf, 0x8c, 0xb9, 0x26, 0xa5,
	0x05, 0x99, 0xe1, 0x54, 0x69, 0xe2, 0xa4, 0x09, 0xb6, 0x00, 0x1f, 0x0c, 0xb1, 0xfd, 0xf1, 0x97,
	0x6f, 0x85, 0x26, 0x24, 0x3a, 0xbe, 0xfc, 0x12, 0x6a, 0x64, 0x15, 0x2a, 0xb4, 0xd3, 0xea, 0x74,
	0x4f, 0xbb, 0xbd, 0x17, 0x38, 0x72, 0xe2, 0x90, 0x2c, 0x7f, 0x76, 0xda, 0x38, 0x32, 0x63, 0x71,
	0x6e, 0x77, 0x0e, 0x3b, 0x7d, 0xfc, 0x51, 0xd4, 0xbf, 0xd4, 0xe0, 0x83, 0xb8, 0x4d, 0xcf, 0x9e,
	0x4a, 0x96, 0x1f, 0x64, 0x54, 0xf4, 0x77, 0x01, 0x9f, 0xf0, 0xe5, 0x08, 0xd9, 0x2c, 0xd4, 0x34,
	0x9a, 0x14, 0xe3, 0x24, 0x94, 0xe4, 0x2e, 0x7f, 0x9a, 0xcf, 0x75, 0x34, 0xe6, 0x75, 0x22, 0x49,
	0x8a, 0x53, 0x57, 0x92, 0x99, 0x24, 0xfa, 0x9f, 0x35, 0xf8, 0x30, 0x1a, 0x9b, 0x85, 0xfd, 0x86,
	0x1b, 0x6d, 0xf1, 0x3f, 0x66, 0xe0, 0xf3, 0xa9, 0x27, 0x98, 0x6e, 0x7c, 0x6d, 0x30, 0x63, 0x86,
	0x3e, 0x82, 0x87, 0xb9, 0x4e, 0x24, 0xd8, 0xaa, 0xff, 0x0d, 0x73, 0xac, 0xe3, 0xfb, 0x9e, 0x3f,
	0x2f, 0xc7, 0xb0, 0xfd, 0x7d, 0x23, 0x0f, 0x25, 0x9e, 0x57, 0x4f, 0xc6, 0x4d, 0xb7, 0x10, 0x2b,
	0xfc, 0x5b, 0xa5, 0x13, 0x01, 0xbe, 0xde, 0x8b, 0xa3, 0xe0, 0x5c, 0xd0, 0xb6, 0x42, 0xf9, 0xa7,
	0xfe, 0x0a, 0x2a, 0x9d, 0x78, 0x19, 0x3b, 0x7e, 0xef, 0xa8, 0xdf, 0xdd, 0xff, 0x1c, 0x3b, 0x3e,
	0xbe, 0xcb, 0xda, 0xdd, 0xe3, 0x97, 0xaf, 0x3b, 0x94, 0x1e, 0xf1, 0x77, 0xda, 0x5d, 0x58, 0x55,
	0xef, 0xb4, 0xd7, 0xcd, 0xc3, 0xa3, 0xd6, 0x4b, 0xe4, 0x1d, 0x3e, 0xe5, 0xf7, 0x1b, 0xfd, 0xc6,
	0xe1, 0xeb, 0x04, 0xb0, 0xa8, 0xd7, 0xa1, 0x96, 0x72, 0x2e, 0xe9, 0x79, 0x17, 0xee, 0x49, 0x71,
	0xd3, 0x54, 0x11, 0x4c, 0x39, 0xff, 0x6c, 0xea, 0x7d, 0x44, 0x0c, 0x31, 0x5d, 0xab, 0x68, 0xa7,
	0x83, 0x7d, 0x9f, 0x3f, 0x42, 0xa6, 0x4c, 0x25, 0xb7, 0xfa, 0x53, 0x01, 0x1e, 0xf1, 0xfc, 0x1f,
	0x86, 0x32, 0x8f, 0x6e, 0x5c, 0xeb, 0xc2, 0xf7, 0xdc, 0xe1, 0x17, 0x22, 0x74, 0xa9, 0x6d, 0x9f,
	0xa6, 0x53, 0x7e, 0x1d, 0x5f, 0x45, 0x21, 0x73, 0xed, 0xd4, 0xb6, 0x2a, 0xf5, 0x91, 0x40, 0x2e,
	0x7b, 0xfb, 0x82, 0xb9, 0x98, 0x97, 0xa3, 0x4b, 0x35, 0x37, 0x25, 0x45, 0xfc, 0x02, 0xf0, 0xe7,
	0x21, 0x73, 0xcf, 0xc3, 0x0b, 0x35, 0xbe, 0x4f, 0x04, 0x7c, 0xd5, 0x72, 0xbc, 0x80, 0xed, 0xe3,
	0xf0, 0x2a, 0xfe, 0x64, 0x5b, 0xa2, 0x13, 0x01, 0xb7, 0x2e, 0x4b, 0x80, 0xd8, 0x18, 0x9b, 0x13,
	0x5f, 0x4f, 0x8a, 0xb0, 0xd9, 0xf2, 0xcd, 0xfa, 0x26, 0x67, 0x64, 0x18, 0x3d, 0xc1, 0x67, 0xff,
	0x3f, 0x4c, 0x82, 0xc8, 0x77, 0xe0, 0xae, 0xfc, 0x39, 0x79, 0x92, 0x07, 0x38, 0xfa, 0xf2, 0xa7,
	0xcc, 0xec, 0x82, 0xfe, 0x14, 0x1e, 0xcf, 0x0b, 0x5b, 0x22, 0xc4, 0x7b, 0xff, 0x28, 0xc3, 0xf6,
	0xf4, 0x1f, 0xa2, 0xc7, 0xcc, 0xbf, 0x1a, 0x5a, 0x8c, 0xfc, 0x12, 0xaa, 0xfe, 0xd4, 0x1b, 0x8e,
	0xec, 0x1a, 0xf3, 0x9e, 0x8d, 0xf5, 0xfb, 0xc6, 0xfc, 0x57, 0xdf, 0x67, 0xb0, 0x1a, 0xe0, 0xb5,
	0xc4, 0x93, 0x21, 0xd9, 0x32, 0x32, 0x1f, 0x3e, 0xf5, 0x6d, 0x23, 0x67, 0x3a, 0x6d, 0xaa, 0xf4,
	0x97, 0xc4, 0x21, 0xa9, 0x41, 0x25, 0x65, 0x61, 0xc7, 0xc8, 0xed, 0xa4, 0x68, 0xc3, 0x9a, 0xb4,
	0x21, 0xb4, 0x91, 0xd3, 0x2d, 0xd1, 0x46, 0x6e, 0xbb, 0x1a, 0xc0, 0xf6, 0x59, 0x76, 0xa1, 0x20,
	0x0f, 0x8d, 0x5b, 0xd4, 0xc1, 0xfa, 0x47, 0xc6, 0x6d, 0x0a, 0x0d, 0x3f, 0x2b, 0x9b, 0xa4, 0x22,
	0x9e, 0x35, 0xa7, 0xea, 0xe0, 0x59, 0xf3, 0x52, 0x96, 0x7c, 0x0a, 0x6b, 0x57, 0xf2, 0xdf, 0x5f,
	0xa5, 0x41, 0x36, 0x8c, 0xd3, 0x94, 0x40, 0x9a, 0xd8, 0x9c, 0x48, 0x93, 0xea, 0x3d, 0xb8, 0xe3,
	0xa7, 0xd3, 0x94, 0xbc, 0x67, 0xcc, 0xa9, 0x01, 0xf5, 0x5d, 0x63, 0x5e, 0x5a, 0x13, 0x0f, 0xea,
	0x56, 0x2e, 0x3d, 0xc9, 0x63, 0xe3, 0x76, 0x29, 0x5f, 0x7f, 0x62, 0xdc, 0x92, 0xe4, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x56, 0xc1, 0xca, 0x51, 0xf3, 0x17, 0x00, 0x00,
}
