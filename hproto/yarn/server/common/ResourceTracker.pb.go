// Code generated by protoc-gen-go.
// source: ResourceTracker.proto
// DO NOT EDIT!

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ResourceTrackerService service

type ResourceTrackerServiceClient interface {
	RegisterNodeManager(ctx context.Context, in *RegisterNodeManagerRequestProto, opts ...grpc.CallOption) (*RegisterNodeManagerResponseProto, error)
	NodeHeartbeat(ctx context.Context, in *NodeHeartbeatRequestProto, opts ...grpc.CallOption) (*NodeHeartbeatResponseProto, error)
	UnRegisterNodeManager(ctx context.Context, in *UnRegisterNodeManagerRequestProto, opts ...grpc.CallOption) (*UnRegisterNodeManagerResponseProto, error)
}

type resourceTrackerServiceClient struct {
	cc *grpc.ClientConn
}

func NewResourceTrackerServiceClient(cc *grpc.ClientConn) ResourceTrackerServiceClient {
	return &resourceTrackerServiceClient{cc}
}

func (c *resourceTrackerServiceClient) RegisterNodeManager(ctx context.Context, in *RegisterNodeManagerRequestProto, opts ...grpc.CallOption) (*RegisterNodeManagerResponseProto, error) {
	out := new(RegisterNodeManagerResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceTrackerService/registerNodeManager", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTrackerServiceClient) NodeHeartbeat(ctx context.Context, in *NodeHeartbeatRequestProto, opts ...grpc.CallOption) (*NodeHeartbeatResponseProto, error) {
	out := new(NodeHeartbeatResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceTrackerService/nodeHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTrackerServiceClient) UnRegisterNodeManager(ctx context.Context, in *UnRegisterNodeManagerRequestProto, opts ...grpc.CallOption) (*UnRegisterNodeManagerResponseProto, error) {
	out := new(UnRegisterNodeManagerResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceTrackerService/unRegisterNodeManager", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceTrackerService service

type ResourceTrackerServiceServer interface {
	RegisterNodeManager(context.Context, *RegisterNodeManagerRequestProto) (*RegisterNodeManagerResponseProto, error)
	NodeHeartbeat(context.Context, *NodeHeartbeatRequestProto) (*NodeHeartbeatResponseProto, error)
	UnRegisterNodeManager(context.Context, *UnRegisterNodeManagerRequestProto) (*UnRegisterNodeManagerResponseProto, error)
}

func RegisterResourceTrackerServiceServer(s *grpc.Server, srv ResourceTrackerServiceServer) {
	s.RegisterService(&_ResourceTrackerService_serviceDesc, srv)
}

func _ResourceTrackerService_RegisterNodeManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeManagerRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTrackerServiceServer).RegisterNodeManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceTrackerService/RegisterNodeManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTrackerServiceServer).RegisterNodeManager(ctx, req.(*RegisterNodeManagerRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTrackerService_NodeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHeartbeatRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTrackerServiceServer).NodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceTrackerService/NodeHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTrackerServiceServer).NodeHeartbeat(ctx, req.(*NodeHeartbeatRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTrackerService_UnRegisterNodeManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterNodeManagerRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTrackerServiceServer).UnRegisterNodeManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceTrackerService/UnRegisterNodeManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTrackerServiceServer).UnRegisterNodeManager(ctx, req.(*UnRegisterNodeManagerRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceTrackerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.yarn.ResourceTrackerService",
	HandlerType: (*ResourceTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerNodeManager",
			Handler:    _ResourceTrackerService_RegisterNodeManager_Handler,
		},
		{
			MethodName: "nodeHeartbeat",
			Handler:    _ResourceTrackerService_NodeHeartbeat_Handler,
		},
		{
			MethodName: "unRegisterNodeManager",
			Handler:    _ResourceTrackerService_UnRegisterNodeManager_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("ResourceTracker.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x89, 0xcb, 0x88, 0x08, 0x91, 0xba, 0x28, 0xae, 0xed, 0x46, 0x23, 0x08, 0x5e, 0xa0,
	0x2b, 0x37, 0x16, 0x19, 0x75, 0x3d, 0x3e, 0xd3, 0x9f, 0x69, 0x91, 0xe6, 0xc5, 0x97, 0x8c, 0xe8,
	0x0d, 0x3c, 0x86, 0xc7, 0xf3, 0x18, 0xda, 0x99, 0x4d, 0x32, 0x8a, 0xd3, 0x4d, 0x20, 0xbc, 0xef,
	0xff, 0xbf, 0x84, 0xa7, 0x27, 0x15, 0x22, 0xb7, 0xe2, 0x70, 0x2f, 0xe4, 0x9e, 0x21, 0x36, 0x08,
	0x27, 0x36, 0xfb, 0x2b, 0x5a, 0x32, 0x07, 0xfb, 0x4e, 0xe2, 0xa7, 0xb3, 0xed, 0x59, 0x47, 0xc8,
	0x2b, 0xa4, 0x76, 0xbc, 0xd9, 0x70, 0x7f, 0x5b, 0x3b, 0xd4, 0x1d, 0x1e, 0xfb, 0xd4, 0xe5, 0xd7,
	0x9e, 0x3e, 0x1e, 0xf4, 0xdd, 0xf5, 0x9c, 0x11, 0x7d, 0x24, 0x68, 0xd6, 0x31, 0x41, 0x16, 0xbc,
	0xc4, 0x0d, 0x79, 0x6a, 0x20, 0xe6, 0xcc, 0x66, 0x22, 0x5b, 0xfd, 0x26, 0x2a, 0xbc, 0xb4, 0x88,
	0xe9, 0x76, 0xdb, 0x3f, 0x3d, 0x1f, 0xa7, 0x63, 0x60, 0x1f, 0xd1, 0xe1, 0xe6, 0x51, 0x1f, 0xf8,
	0x9f, 0xd9, 0x35, 0x48, 0xd2, 0x13, 0x28, 0x99, 0xd3, 0x22, 0xbf, 0xc8, 0x67, 0x85, 0x67, 0xf6,
	0x1f, 0x97, 0x1b, 0xde, 0xf4, 0xa4, 0xf5, 0x7f, 0xbc, 0xc3, 0xd8, 0xa2, 0xe1, 0xc1, 0x8f, 0xfd,
	0xec, 0x62, 0x17, 0x3e, 0x33, 0xcf, 0xaf, 0xf4, 0x09, 0x4b, 0x63, 0x29, 0x90, 0x5b, 0xa1, 0x08,
	0x77, 0xab, 0x98, 0x1f, 0x0e, 0xf6, 0xf0, 0xa1, 0xd4, 0xa7, 0x52, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xde, 0x34, 0xad, 0xcb, 0xef, 0x01, 0x00, 0x00,
}
