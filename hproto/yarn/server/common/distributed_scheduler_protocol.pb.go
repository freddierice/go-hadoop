// Code generated by protoc-gen-go.
// source: distributed_scheduler_protocol.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	distributed_scheduler_protocol.proto

It has these top-level messages:
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_yarn1 "."
import hadoop_yarn3 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DistributedSchedulerProtocolService service

type DistributedSchedulerProtocolServiceClient interface {
	RegisterApplicationMasterForDistributedScheduling(ctx context.Context, in *hadoop_yarn1.RegisterApplicationMasterRequestProto, opts ...grpc.CallOption) (*hadoop_yarn3.DistSchedRegisterResponseProto, error)
	FinishApplicationMaster(ctx context.Context, in *hadoop_yarn1.FinishApplicationMasterRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.FinishApplicationMasterResponseProto, error)
	AllocateForDistributedScheduling(ctx context.Context, in *hadoop_yarn3.DistSchedAllocateRequestProto, opts ...grpc.CallOption) (*hadoop_yarn3.DistSchedAllocateResponseProto, error)
}

type distributedSchedulerProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewDistributedSchedulerProtocolServiceClient(cc *grpc.ClientConn) DistributedSchedulerProtocolServiceClient {
	return &distributedSchedulerProtocolServiceClient{cc}
}

func (c *distributedSchedulerProtocolServiceClient) RegisterApplicationMasterForDistributedScheduling(ctx context.Context, in *hadoop_yarn1.RegisterApplicationMasterRequestProto, opts ...grpc.CallOption) (*hadoop_yarn3.DistSchedRegisterResponseProto, error) {
	out := new(hadoop_yarn3.DistSchedRegisterResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.DistributedSchedulerProtocolService/registerApplicationMasterForDistributedScheduling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedSchedulerProtocolServiceClient) FinishApplicationMaster(ctx context.Context, in *hadoop_yarn1.FinishApplicationMasterRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.FinishApplicationMasterResponseProto, error) {
	out := new(hadoop_yarn1.FinishApplicationMasterResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.DistributedSchedulerProtocolService/finishApplicationMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedSchedulerProtocolServiceClient) AllocateForDistributedScheduling(ctx context.Context, in *hadoop_yarn3.DistSchedAllocateRequestProto, opts ...grpc.CallOption) (*hadoop_yarn3.DistSchedAllocateResponseProto, error) {
	out := new(hadoop_yarn3.DistSchedAllocateResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.DistributedSchedulerProtocolService/allocateForDistributedScheduling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributedSchedulerProtocolService service

type DistributedSchedulerProtocolServiceServer interface {
	RegisterApplicationMasterForDistributedScheduling(context.Context, *hadoop_yarn1.RegisterApplicationMasterRequestProto) (*hadoop_yarn3.DistSchedRegisterResponseProto, error)
	FinishApplicationMaster(context.Context, *hadoop_yarn1.FinishApplicationMasterRequestProto) (*hadoop_yarn1.FinishApplicationMasterResponseProto, error)
	AllocateForDistributedScheduling(context.Context, *hadoop_yarn3.DistSchedAllocateRequestProto) (*hadoop_yarn3.DistSchedAllocateResponseProto, error)
}

func RegisterDistributedSchedulerProtocolServiceServer(s *grpc.Server, srv DistributedSchedulerProtocolServiceServer) {
	s.RegisterService(&_DistributedSchedulerProtocolService_serviceDesc, srv)
}

func _DistributedSchedulerProtocolService_RegisterApplicationMasterForDistributedScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RegisterApplicationMasterRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSchedulerProtocolServiceServer).RegisterApplicationMasterForDistributedScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.DistributedSchedulerProtocolService/RegisterApplicationMasterForDistributedScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSchedulerProtocolServiceServer).RegisterApplicationMasterForDistributedScheduling(ctx, req.(*hadoop_yarn1.RegisterApplicationMasterRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedSchedulerProtocolService_FinishApplicationMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.FinishApplicationMasterRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSchedulerProtocolServiceServer).FinishApplicationMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.DistributedSchedulerProtocolService/FinishApplicationMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSchedulerProtocolServiceServer).FinishApplicationMaster(ctx, req.(*hadoop_yarn1.FinishApplicationMasterRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedSchedulerProtocolService_AllocateForDistributedScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn3.DistSchedAllocateRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSchedulerProtocolServiceServer).AllocateForDistributedScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.DistributedSchedulerProtocolService/AllocateForDistributedScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSchedulerProtocolServiceServer).AllocateForDistributedScheduling(ctx, req.(*hadoop_yarn3.DistSchedAllocateRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributedSchedulerProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.yarn.DistributedSchedulerProtocolService",
	HandlerType: (*DistributedSchedulerProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerApplicationMasterForDistributedScheduling",
			Handler:    _DistributedSchedulerProtocolService_RegisterApplicationMasterForDistributedScheduling_Handler,
		},
		{
			MethodName: "finishApplicationMaster",
			Handler:    _DistributedSchedulerProtocolService_FinishApplicationMaster_Handler,
		},
		{
			MethodName: "allocateForDistributedScheduling",
			Handler:    _DistributedSchedulerProtocolService_AllocateForDistributedScheduling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("distributed_scheduler_protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x09, 0xee, 0xe2, 0x2e, 0x1b, 0xb1, 0xcc, 0x42, 0x50, 0x10, 0x14, 0x82, 0x33, 0x37,
	0x98, 0x22, 0xb3, 0x13, 0xa4, 0x73, 0x80, 0x12, 0xd3, 0x67, 0x1b, 0xc8, 0xe4, 0xc5, 0x24, 0x15,
	0x44, 0x70, 0xed, 0x01, 0x3c, 0x80, 0xd7, 0xf0, 0x76, 0xb6, 0xe9, 0x8c, 0xd3, 0x32, 0x1d, 0xe9,
	0xa6, 0x94, 0xf6, 0xfb, 0xff, 0x2f, 0x2f, 0x8f, 0x5e, 0x15, 0xca, 0x07, 0xa7, 0x9e, 0xea, 0x00,
	0x45, 0xee, 0x65, 0x05, 0x45, 0xad, 0xc1, 0xe5, 0xd6, 0x61, 0x40, 0x89, 0x9a, 0xc7, 0x17, 0x76,
	0x5a, 0x89, 0x02, 0xd1, 0xf2, 0x37, 0xe1, 0x4c, 0x72, 0xde, 0x3e, 0x73, 0x0f, 0xee, 0x55, 0x49,
	0xe8, 0x48, 0xdf, 0x71, 0xc9, 0xf5, 0xdf, 0xaf, 0xa6, 0x43, 0xe2, 0x66, 0x83, 0xe3, 0xe0, 0xe2,
	0xe7, 0x84, 0x5e, 0xde, 0xef, 0xcd, 0xeb, 0x9d, 0xf8, 0x71, 0xeb, 0x5d, 0x77, 0x21, 0xf6, 0x45,
	0xe8, 0xdc, 0x41, 0xd9, 0x90, 0xe0, 0x96, 0xd6, 0x6a, 0x25, 0x45, 0x50, 0x68, 0x1e, 0x44, 0xfb,
	0x61, 0x85, 0xee, 0xb0, 0x43, 0x99, 0x92, 0x2d, 0x78, 0xef, 0xbc, 0x3c, 0x3b, 0x96, 0xcf, 0xe0,
	0xa5, 0x06, 0x1f, 0xa2, 0x33, 0xb9, 0x1d, 0x64, 0xda, 0xde, 0x58, 0xb8, 0x0b, 0x67, 0xe0, 0x2d,
	0x1a, 0x0f, 0x11, 0x66, 0x1f, 0xf4, 0xec, 0x59, 0x19, 0xe5, 0xab, 0x83, 0x4e, 0x76, 0x37, 0xe8,
	0x59, 0x8d, 0x53, 0x03, 0xf3, 0x7c, 0x5a, 0xa2, 0xef, 0x7f, 0xa7, 0x17, 0x42, 0x6b, 0x6c, 0x00,
	0x38, 0x7a, 0x09, 0x37, 0xe3, 0x03, 0x2d, 0xb7, 0xb9, 0x29, 0xc3, 0xef, 0xd9, 0x9e, 0x3c, 0x4d,
	0xe9, 0x0c, 0x5d, 0xc9, 0x85, 0x15, 0x0d, 0x33, 0x08, 0xc6, 0xdd, 0xa6, 0xb3, 0xff, 0x16, 0xfb,
	0x49, 0xc8, 0x37, 0x21, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x7e, 0x20, 0x5a, 0x77, 0x02,
	0x00, 0x00,
}
