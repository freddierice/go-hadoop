// Code generated by protoc-gen-go.
// source: applicationclient_protocol.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_common "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ApplicationClientProtocolService service

type ApplicationClientProtocolServiceClient interface {
	GetNewApplication(ctx context.Context, in *GetNewApplicationRequestProto, opts ...grpc.CallOption) (*GetNewApplicationResponseProto, error)
	GetApplicationReport(ctx context.Context, in *GetApplicationReportRequestProto, opts ...grpc.CallOption) (*GetApplicationReportResponseProto, error)
	SubmitApplication(ctx context.Context, in *SubmitApplicationRequestProto, opts ...grpc.CallOption) (*SubmitApplicationResponseProto, error)
	FailApplicationAttempt(ctx context.Context, in *FailApplicationAttemptRequestProto, opts ...grpc.CallOption) (*FailApplicationAttemptResponseProto, error)
	ForceKillApplication(ctx context.Context, in *KillApplicationRequestProto, opts ...grpc.CallOption) (*KillApplicationResponseProto, error)
	GetClusterMetrics(ctx context.Context, in *GetClusterMetricsRequestProto, opts ...grpc.CallOption) (*GetClusterMetricsResponseProto, error)
	GetApplications(ctx context.Context, in *GetApplicationsRequestProto, opts ...grpc.CallOption) (*GetApplicationsResponseProto, error)
	GetClusterNodes(ctx context.Context, in *GetClusterNodesRequestProto, opts ...grpc.CallOption) (*GetClusterNodesResponseProto, error)
	GetQueueInfo(ctx context.Context, in *GetQueueInfoRequestProto, opts ...grpc.CallOption) (*GetQueueInfoResponseProto, error)
	GetQueueUserAcls(ctx context.Context, in *GetQueueUserAclsInfoRequestProto, opts ...grpc.CallOption) (*GetQueueUserAclsInfoResponseProto, error)
	GetDelegationToken(ctx context.Context, in *hadoop_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.GetDelegationTokenResponseProto, error)
	RenewDelegationToken(ctx context.Context, in *hadoop_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(ctx context.Context, in *hadoop_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.CancelDelegationTokenResponseProto, error)
	MoveApplicationAcrossQueues(ctx context.Context, in *MoveApplicationAcrossQueuesRequestProto, opts ...grpc.CallOption) (*MoveApplicationAcrossQueuesResponseProto, error)
	GetApplicationAttemptReport(ctx context.Context, in *GetApplicationAttemptReportRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptReportResponseProto, error)
	GetApplicationAttempts(ctx context.Context, in *GetApplicationAttemptsRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptsResponseProto, error)
	GetContainerReport(ctx context.Context, in *GetContainerReportRequestProto, opts ...grpc.CallOption) (*GetContainerReportResponseProto, error)
	GetContainers(ctx context.Context, in *GetContainersRequestProto, opts ...grpc.CallOption) (*GetContainersResponseProto, error)
	GetNewReservation(ctx context.Context, in *GetNewReservationRequestProto, opts ...grpc.CallOption) (*GetNewReservationResponseProto, error)
	SubmitReservation(ctx context.Context, in *ReservationSubmissionRequestProto, opts ...grpc.CallOption) (*ReservationSubmissionResponseProto, error)
	UpdateReservation(ctx context.Context, in *ReservationUpdateRequestProto, opts ...grpc.CallOption) (*ReservationUpdateResponseProto, error)
	DeleteReservation(ctx context.Context, in *ReservationDeleteRequestProto, opts ...grpc.CallOption) (*ReservationDeleteResponseProto, error)
	ListReservations(ctx context.Context, in *ReservationListRequestProto, opts ...grpc.CallOption) (*ReservationListResponseProto, error)
	GetNodeToLabels(ctx context.Context, in *GetNodesToLabelsRequestProto, opts ...grpc.CallOption) (*GetNodesToLabelsResponseProto, error)
	GetLabelsToNodes(ctx context.Context, in *GetLabelsToNodesRequestProto, opts ...grpc.CallOption) (*GetLabelsToNodesResponseProto, error)
	GetClusterNodeLabels(ctx context.Context, in *GetClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*GetClusterNodeLabelsResponseProto, error)
	UpdateApplicationPriority(ctx context.Context, in *UpdateApplicationPriorityRequestProto, opts ...grpc.CallOption) (*UpdateApplicationPriorityResponseProto, error)
	SignalToContainer(ctx context.Context, in *SignalContainerRequestProto, opts ...grpc.CallOption) (*SignalContainerResponseProto, error)
}

type applicationClientProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClientProtocolServiceClient(cc *grpc.ClientConn) ApplicationClientProtocolServiceClient {
	return &applicationClientProtocolServiceClient{cc}
}

func (c *applicationClientProtocolServiceClient) GetNewApplication(ctx context.Context, in *GetNewApplicationRequestProto, opts ...grpc.CallOption) (*GetNewApplicationResponseProto, error) {
	out := new(GetNewApplicationResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getNewApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetApplicationReport(ctx context.Context, in *GetApplicationReportRequestProto, opts ...grpc.CallOption) (*GetApplicationReportResponseProto, error) {
	out := new(GetApplicationReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getApplicationReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) SubmitApplication(ctx context.Context, in *SubmitApplicationRequestProto, opts ...grpc.CallOption) (*SubmitApplicationResponseProto, error) {
	out := new(SubmitApplicationResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/submitApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) FailApplicationAttempt(ctx context.Context, in *FailApplicationAttemptRequestProto, opts ...grpc.CallOption) (*FailApplicationAttemptResponseProto, error) {
	out := new(FailApplicationAttemptResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/failApplicationAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) ForceKillApplication(ctx context.Context, in *KillApplicationRequestProto, opts ...grpc.CallOption) (*KillApplicationResponseProto, error) {
	out := new(KillApplicationResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/forceKillApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetClusterMetrics(ctx context.Context, in *GetClusterMetricsRequestProto, opts ...grpc.CallOption) (*GetClusterMetricsResponseProto, error) {
	out := new(GetClusterMetricsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getClusterMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetApplications(ctx context.Context, in *GetApplicationsRequestProto, opts ...grpc.CallOption) (*GetApplicationsResponseProto, error) {
	out := new(GetApplicationsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetClusterNodes(ctx context.Context, in *GetClusterNodesRequestProto, opts ...grpc.CallOption) (*GetClusterNodesResponseProto, error) {
	out := new(GetClusterNodesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getClusterNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetQueueInfo(ctx context.Context, in *GetQueueInfoRequestProto, opts ...grpc.CallOption) (*GetQueueInfoResponseProto, error) {
	out := new(GetQueueInfoResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getQueueInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetQueueUserAcls(ctx context.Context, in *GetQueueUserAclsInfoRequestProto, opts ...grpc.CallOption) (*GetQueueUserAclsInfoResponseProto, error) {
	out := new(GetQueueUserAclsInfoResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getQueueUserAcls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetDelegationToken(ctx context.Context, in *hadoop_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.GetDelegationTokenResponseProto, error) {
	out := new(hadoop_common.GetDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) RenewDelegationToken(ctx context.Context, in *hadoop_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.RenewDelegationTokenResponseProto, error) {
	out := new(hadoop_common.RenewDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/renewDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) CancelDelegationToken(ctx context.Context, in *hadoop_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.CancelDelegationTokenResponseProto, error) {
	out := new(hadoop_common.CancelDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/cancelDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) MoveApplicationAcrossQueues(ctx context.Context, in *MoveApplicationAcrossQueuesRequestProto, opts ...grpc.CallOption) (*MoveApplicationAcrossQueuesResponseProto, error) {
	out := new(MoveApplicationAcrossQueuesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/moveApplicationAcrossQueues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetApplicationAttemptReport(ctx context.Context, in *GetApplicationAttemptReportRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptReportResponseProto, error) {
	out := new(GetApplicationAttemptReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getApplicationAttemptReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetApplicationAttempts(ctx context.Context, in *GetApplicationAttemptsRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptsResponseProto, error) {
	out := new(GetApplicationAttemptsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getApplicationAttempts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetContainerReport(ctx context.Context, in *GetContainerReportRequestProto, opts ...grpc.CallOption) (*GetContainerReportResponseProto, error) {
	out := new(GetContainerReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getContainerReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetContainers(ctx context.Context, in *GetContainersRequestProto, opts ...grpc.CallOption) (*GetContainersResponseProto, error) {
	out := new(GetContainersResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetNewReservation(ctx context.Context, in *GetNewReservationRequestProto, opts ...grpc.CallOption) (*GetNewReservationResponseProto, error) {
	out := new(GetNewReservationResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getNewReservation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) SubmitReservation(ctx context.Context, in *ReservationSubmissionRequestProto, opts ...grpc.CallOption) (*ReservationSubmissionResponseProto, error) {
	out := new(ReservationSubmissionResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/submitReservation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) UpdateReservation(ctx context.Context, in *ReservationUpdateRequestProto, opts ...grpc.CallOption) (*ReservationUpdateResponseProto, error) {
	out := new(ReservationUpdateResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/updateReservation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) DeleteReservation(ctx context.Context, in *ReservationDeleteRequestProto, opts ...grpc.CallOption) (*ReservationDeleteResponseProto, error) {
	out := new(ReservationDeleteResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/deleteReservation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) ListReservations(ctx context.Context, in *ReservationListRequestProto, opts ...grpc.CallOption) (*ReservationListResponseProto, error) {
	out := new(ReservationListResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/listReservations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetNodeToLabels(ctx context.Context, in *GetNodesToLabelsRequestProto, opts ...grpc.CallOption) (*GetNodesToLabelsResponseProto, error) {
	out := new(GetNodesToLabelsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getNodeToLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetLabelsToNodes(ctx context.Context, in *GetLabelsToNodesRequestProto, opts ...grpc.CallOption) (*GetLabelsToNodesResponseProto, error) {
	out := new(GetLabelsToNodesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getLabelsToNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) GetClusterNodeLabels(ctx context.Context, in *GetClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*GetClusterNodeLabelsResponseProto, error) {
	out := new(GetClusterNodeLabelsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/getClusterNodeLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) UpdateApplicationPriority(ctx context.Context, in *UpdateApplicationPriorityRequestProto, opts ...grpc.CallOption) (*UpdateApplicationPriorityResponseProto, error) {
	out := new(UpdateApplicationPriorityResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/updateApplicationPriority", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClientProtocolServiceClient) SignalToContainer(ctx context.Context, in *SignalContainerRequestProto, opts ...grpc.CallOption) (*SignalContainerResponseProto, error) {
	out := new(SignalContainerResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationClientProtocolService/signalToContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationClientProtocolService service

type ApplicationClientProtocolServiceServer interface {
	GetNewApplication(context.Context, *GetNewApplicationRequestProto) (*GetNewApplicationResponseProto, error)
	GetApplicationReport(context.Context, *GetApplicationReportRequestProto) (*GetApplicationReportResponseProto, error)
	SubmitApplication(context.Context, *SubmitApplicationRequestProto) (*SubmitApplicationResponseProto, error)
	FailApplicationAttempt(context.Context, *FailApplicationAttemptRequestProto) (*FailApplicationAttemptResponseProto, error)
	ForceKillApplication(context.Context, *KillApplicationRequestProto) (*KillApplicationResponseProto, error)
	GetClusterMetrics(context.Context, *GetClusterMetricsRequestProto) (*GetClusterMetricsResponseProto, error)
	GetApplications(context.Context, *GetApplicationsRequestProto) (*GetApplicationsResponseProto, error)
	GetClusterNodes(context.Context, *GetClusterNodesRequestProto) (*GetClusterNodesResponseProto, error)
	GetQueueInfo(context.Context, *GetQueueInfoRequestProto) (*GetQueueInfoResponseProto, error)
	GetQueueUserAcls(context.Context, *GetQueueUserAclsInfoRequestProto) (*GetQueueUserAclsInfoResponseProto, error)
	GetDelegationToken(context.Context, *hadoop_common.GetDelegationTokenRequestProto) (*hadoop_common.GetDelegationTokenResponseProto, error)
	RenewDelegationToken(context.Context, *hadoop_common.RenewDelegationTokenRequestProto) (*hadoop_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(context.Context, *hadoop_common.CancelDelegationTokenRequestProto) (*hadoop_common.CancelDelegationTokenResponseProto, error)
	MoveApplicationAcrossQueues(context.Context, *MoveApplicationAcrossQueuesRequestProto) (*MoveApplicationAcrossQueuesResponseProto, error)
	GetApplicationAttemptReport(context.Context, *GetApplicationAttemptReportRequestProto) (*GetApplicationAttemptReportResponseProto, error)
	GetApplicationAttempts(context.Context, *GetApplicationAttemptsRequestProto) (*GetApplicationAttemptsResponseProto, error)
	GetContainerReport(context.Context, *GetContainerReportRequestProto) (*GetContainerReportResponseProto, error)
	GetContainers(context.Context, *GetContainersRequestProto) (*GetContainersResponseProto, error)
	GetNewReservation(context.Context, *GetNewReservationRequestProto) (*GetNewReservationResponseProto, error)
	SubmitReservation(context.Context, *ReservationSubmissionRequestProto) (*ReservationSubmissionResponseProto, error)
	UpdateReservation(context.Context, *ReservationUpdateRequestProto) (*ReservationUpdateResponseProto, error)
	DeleteReservation(context.Context, *ReservationDeleteRequestProto) (*ReservationDeleteResponseProto, error)
	ListReservations(context.Context, *ReservationListRequestProto) (*ReservationListResponseProto, error)
	GetNodeToLabels(context.Context, *GetNodesToLabelsRequestProto) (*GetNodesToLabelsResponseProto, error)
	GetLabelsToNodes(context.Context, *GetLabelsToNodesRequestProto) (*GetLabelsToNodesResponseProto, error)
	GetClusterNodeLabels(context.Context, *GetClusterNodeLabelsRequestProto) (*GetClusterNodeLabelsResponseProto, error)
	UpdateApplicationPriority(context.Context, *UpdateApplicationPriorityRequestProto) (*UpdateApplicationPriorityResponseProto, error)
	SignalToContainer(context.Context, *SignalContainerRequestProto) (*SignalContainerResponseProto, error)
}

func RegisterApplicationClientProtocolServiceServer(s *grpc.Server, srv ApplicationClientProtocolServiceServer) {
	s.RegisterService(&_ApplicationClientProtocolService_serviceDesc, srv)
}

func _ApplicationClientProtocolService_GetNewApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewApplicationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetNewApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetNewApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetNewApplication(ctx, req.(*GetNewApplicationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetApplicationReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetApplicationReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationReport(ctx, req.(*GetApplicationReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_SubmitApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitApplicationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).SubmitApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/SubmitApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).SubmitApplication(ctx, req.(*SubmitApplicationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_FailApplicationAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailApplicationAttemptRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).FailApplicationAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/FailApplicationAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).FailApplicationAttempt(ctx, req.(*FailApplicationAttemptRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_ForceKillApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillApplicationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).ForceKillApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/ForceKillApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).ForceKillApplication(ctx, req.(*KillApplicationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMetricsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetClusterMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterMetrics(ctx, req.(*GetClusterMetricsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetApplications(ctx, req.(*GetApplicationsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterNodesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterNodes(ctx, req.(*GetClusterNodesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueInfoRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetQueueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetQueueInfo(ctx, req.(*GetQueueInfoRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetQueueUserAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueUserAclsInfoRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetQueueUserAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetQueueUserAcls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetQueueUserAcls(ctx, req.(*GetQueueUserAclsInfoRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.GetDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetDelegationToken(ctx, req.(*hadoop_common.GetDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_RenewDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.RenewDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).RenewDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/RenewDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).RenewDelegationToken(ctx, req.(*hadoop_common.RenewDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_CancelDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.CancelDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).CancelDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/CancelDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).CancelDelegationToken(ctx, req.(*hadoop_common.CancelDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_MoveApplicationAcrossQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveApplicationAcrossQueuesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).MoveApplicationAcrossQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/MoveApplicationAcrossQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).MoveApplicationAcrossQueues(ctx, req.(*MoveApplicationAcrossQueuesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetApplicationAttemptReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAttemptReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationAttemptReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetApplicationAttemptReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationAttemptReport(ctx, req.(*GetApplicationAttemptReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetApplicationAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAttemptsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetApplicationAttempts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetApplicationAttempts(ctx, req.(*GetApplicationAttemptsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetContainerReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetContainerReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetContainerReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetContainerReport(ctx, req.(*GetContainerReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetContainers(ctx, req.(*GetContainersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetNewReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewReservationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetNewReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetNewReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetNewReservation(ctx, req.(*GetNewReservationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_SubmitReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationSubmissionRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).SubmitReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/SubmitReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).SubmitReservation(ctx, req.(*ReservationSubmissionRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_UpdateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationUpdateRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).UpdateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/UpdateReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).UpdateReservation(ctx, req.(*ReservationUpdateRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_DeleteReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationDeleteRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).DeleteReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/DeleteReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).DeleteReservation(ctx, req.(*ReservationDeleteRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_ListReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationListRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).ListReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/ListReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).ListReservations(ctx, req.(*ReservationListRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetNodeToLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesToLabelsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetNodeToLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetNodeToLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetNodeToLabels(ctx, req.(*GetNodesToLabelsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetLabelsToNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsToNodesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetLabelsToNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetLabelsToNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetLabelsToNodes(ctx, req.(*GetLabelsToNodesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_GetClusterNodeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterNodeLabelsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterNodeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/GetClusterNodeLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).GetClusterNodeLabels(ctx, req.(*GetClusterNodeLabelsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_UpdateApplicationPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationPriorityRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).UpdateApplicationPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/UpdateApplicationPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).UpdateApplicationPriority(ctx, req.(*UpdateApplicationPriorityRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationClientProtocolService_SignalToContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalContainerRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationClientProtocolServiceServer).SignalToContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationClientProtocolService/SignalToContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationClientProtocolServiceServer).SignalToContainer(ctx, req.(*SignalContainerRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationClientProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.yarn.ApplicationClientProtocolService",
	HandlerType: (*ApplicationClientProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getNewApplication",
			Handler:    _ApplicationClientProtocolService_GetNewApplication_Handler,
		},
		{
			MethodName: "getApplicationReport",
			Handler:    _ApplicationClientProtocolService_GetApplicationReport_Handler,
		},
		{
			MethodName: "submitApplication",
			Handler:    _ApplicationClientProtocolService_SubmitApplication_Handler,
		},
		{
			MethodName: "failApplicationAttempt",
			Handler:    _ApplicationClientProtocolService_FailApplicationAttempt_Handler,
		},
		{
			MethodName: "forceKillApplication",
			Handler:    _ApplicationClientProtocolService_ForceKillApplication_Handler,
		},
		{
			MethodName: "getClusterMetrics",
			Handler:    _ApplicationClientProtocolService_GetClusterMetrics_Handler,
		},
		{
			MethodName: "getApplications",
			Handler:    _ApplicationClientProtocolService_GetApplications_Handler,
		},
		{
			MethodName: "getClusterNodes",
			Handler:    _ApplicationClientProtocolService_GetClusterNodes_Handler,
		},
		{
			MethodName: "getQueueInfo",
			Handler:    _ApplicationClientProtocolService_GetQueueInfo_Handler,
		},
		{
			MethodName: "getQueueUserAcls",
			Handler:    _ApplicationClientProtocolService_GetQueueUserAcls_Handler,
		},
		{
			MethodName: "getDelegationToken",
			Handler:    _ApplicationClientProtocolService_GetDelegationToken_Handler,
		},
		{
			MethodName: "renewDelegationToken",
			Handler:    _ApplicationClientProtocolService_RenewDelegationToken_Handler,
		},
		{
			MethodName: "cancelDelegationToken",
			Handler:    _ApplicationClientProtocolService_CancelDelegationToken_Handler,
		},
		{
			MethodName: "moveApplicationAcrossQueues",
			Handler:    _ApplicationClientProtocolService_MoveApplicationAcrossQueues_Handler,
		},
		{
			MethodName: "getApplicationAttemptReport",
			Handler:    _ApplicationClientProtocolService_GetApplicationAttemptReport_Handler,
		},
		{
			MethodName: "getApplicationAttempts",
			Handler:    _ApplicationClientProtocolService_GetApplicationAttempts_Handler,
		},
		{
			MethodName: "getContainerReport",
			Handler:    _ApplicationClientProtocolService_GetContainerReport_Handler,
		},
		{
			MethodName: "getContainers",
			Handler:    _ApplicationClientProtocolService_GetContainers_Handler,
		},
		{
			MethodName: "getNewReservation",
			Handler:    _ApplicationClientProtocolService_GetNewReservation_Handler,
		},
		{
			MethodName: "submitReservation",
			Handler:    _ApplicationClientProtocolService_SubmitReservation_Handler,
		},
		{
			MethodName: "updateReservation",
			Handler:    _ApplicationClientProtocolService_UpdateReservation_Handler,
		},
		{
			MethodName: "deleteReservation",
			Handler:    _ApplicationClientProtocolService_DeleteReservation_Handler,
		},
		{
			MethodName: "listReservations",
			Handler:    _ApplicationClientProtocolService_ListReservations_Handler,
		},
		{
			MethodName: "getNodeToLabels",
			Handler:    _ApplicationClientProtocolService_GetNodeToLabels_Handler,
		},
		{
			MethodName: "getLabelsToNodes",
			Handler:    _ApplicationClientProtocolService_GetLabelsToNodes_Handler,
		},
		{
			MethodName: "getClusterNodeLabels",
			Handler:    _ApplicationClientProtocolService_GetClusterNodeLabels_Handler,
		},
		{
			MethodName: "updateApplicationPriority",
			Handler:    _ApplicationClientProtocolService_UpdateApplicationPriority_Handler,
		},
		{
			MethodName: "signalToContainer",
			Handler:    _ApplicationClientProtocolService_SignalToContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() { proto.RegisterFile("applicationclient_protocol.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x97, 0xc1, 0x52, 0xd4, 0x4c,
	0x10, 0xc7, 0x6b, 0xaf, 0xf3, 0x7d, 0x2a, 0xa4, 0xd0, 0xaa, 0x45, 0x0f, 0x5c, 0x44, 0x45, 0x09,
	0x8a, 0x78, 0xb6, 0x60, 0x29, 0x2d, 0x4b, 0xa0, 0x90, 0x5d, 0x8e, 0x16, 0x86, 0xd9, 0xde, 0x65,
	0x8a, 0x6c, 0x26, 0xcc, 0x4c, 0xa0, 0x28, 0x3d, 0x7a, 0xb0, 0x7c, 0x0a, 0x5f, 0xc0, 0x77, 0x34,
	0x4c, 0x76, 0xa1, 0x7b, 0x26, 0x99, 0xcd, 0x6d, 0x6b, 0xff, 0xff, 0xee, 0xdf, 0x74, 0x32, 0xd3,
	0x3d, 0x61, 0x2b, 0x49, 0x9e, 0xa7, 0x82, 0x27, 0x46, 0xc8, 0x8c, 0xa7, 0x02, 0x32, 0x73, 0x92,
	0x2b, 0x69, 0x24, 0x97, 0x69, 0x6c, 0x7f, 0x44, 0xff, 0x9d, 0x25, 0x43, 0x29, 0xf3, 0xf8, 0x3a,
	0x51, 0xd9, 0xf2, 0xfd, 0x3e, 0xf0, 0x42, 0x09, 0x73, 0x5d, 0x89, 0xcb, 0xdd, 0x9b, 0x7f, 0x4f,
	0x34, 0xa8, 0x4b, 0xc1, 0xa1, 0x8a, 0xd4, 0x95, 0xb4, 0xf9, 0xb7, 0xcb, 0x56, 0xb6, 0xef, 0x92,
	0xf7, 0x6c, 0xf2, 0xc3, 0x69, 0xee, 0x7e, 0x15, 0x11, 0xa5, 0x6c, 0x71, 0x0c, 0xe6, 0x00, 0xae,
	0x90, 0x33, 0x5a, 0x8b, 0x11, 0x32, 0xfe, 0xe8, 0xea, 0x47, 0x70, 0x51, 0x80, 0xae, 0x52, 0x2d,
	0xbf, 0x9c, 0xe7, 0xd5, 0xb9, 0xcc, 0x34, 0x58, 0x73, 0x54, 0xb0, 0xa5, 0x92, 0x46, 0xe4, 0x5c,
	0x2a, 0x13, 0xad, 0xbb, 0x49, 0x3c, 0x0b, 0x61, 0xc6, 0x2d, 0xec, 0x18, 0x5b, 0x16, 0xa9, 0x8b,
	0xd3, 0x89, 0x30, 0xcd, 0x45, 0xf6, 0x5d, 0x3d, 0x50, 0x64, 0x8d, 0x17, 0xd3, 0xbe, 0xb3, 0x47,
	0xa3, 0x44, 0xa4, 0x48, 0xdf, 0x36, 0x06, 0x26, 0xb9, 0x89, 0x36, 0x48, 0x9a, 0x0f, 0xb5, 0x26,
	0xc2, 0x7d, 0xdd, 0x2a, 0x00, 0xc3, 0xcf, 0xd9, 0xd2, 0x48, 0x2a, 0x0e, 0x9f, 0x45, 0x8a, 0xbd,
	0xd1, 0x73, 0x92, 0xc9, 0x51, 0x09, 0xf3, 0x45, 0xd8, 0xe9, 0x3c, 0xd7, 0xf2, 0x75, 0xf6, 0xd2,
	0x42, 0x1b, 0x50, 0xfb, 0x60, 0x94, 0xe0, 0xda, 0xdf, 0x3c, 0x54, 0x0f, 0x6f, 0x1e, 0xd7, 0x8b,
	0x69, 0x23, 0xf6, 0x80, 0x6e, 0x1e, 0xed, 0x54, 0x45, 0x37, 0x82, 0x0e, 0x54, 0xe5, 0x39, 0x7d,
	0xce, 0x74, 0x25, 0x07, 0x72, 0x08, 0x35, 0x1c, 0xac, 0x86, 0x39, 0xd4, 0x89, 0x39, 0x5f, 0xd9,
	0xff, 0x25, 0xe7, 0x4b, 0x01, 0x05, 0x7c, 0xca, 0x46, 0x32, 0x7a, 0xea, 0x86, 0xde, 0x4a, 0x84,
	0xb0, 0x1a, 0xb0, 0xe1, 0xf4, 0x17, 0x6c, 0x61, 0x96, 0xfe, 0xb8, 0xec, 0x0f, 0xdb, 0x3c, 0xd5,
	0xfe, 0x39, 0x23, 0xb2, 0x87, 0x8a, 0x5b, 0xd8, 0x31, 0x52, 0xb3, 0xa8, 0x44, 0xee, 0x42, 0x0a,
	0x63, 0xfb, 0x60, 0x07, 0xf2, 0x1c, 0xb2, 0x3b, 0x28, 0x97, 0x93, 0x89, 0xb4, 0x79, 0x1c, 0x4b,
	0x3d, 0x34, 0x60, 0xc7, 0xd0, 0x6b, 0xb6, 0xa4, 0x20, 0x83, 0x2b, 0x17, 0xbb, 0xe1, 0xe4, 0x39,
	0xaa, 0x31, 0xd5, 0x1f, 0xb6, 0x60, 0x00, 0x46, 0xff, 0x60, 0x0f, 0x79, 0x92, 0x71, 0x48, 0x5d,
	0xb6, 0x9b, 0xaa, 0x57, 0xe7, 0x22, 0xf0, 0x37, 0xed, 0x22, 0x30, 0xfd, 0x77, 0x87, 0x3d, 0x9e,
	0xc8, 0x4b, 0xc0, 0x2d, 0x81, 0x2b, 0xa9, 0xb5, 0x7d, 0x4b, 0x3a, 0xda, 0x22, 0x6f, 0x6f, 0xbf,
	0xd9, 0x49, 0x16, 0xf2, 0xae, 0x7d, 0x94, 0xbb, 0x18, 0x7a, 0x3a, 0x6f, 0xdb, 0x93, 0xed, 0xf0,
	0x5b, 0x81, 0xf3, 0x47, 0x9c, 0x81, 0xc5, 0x04, 0xa3, 0x9c, 0x0e, 0x5c, 0xbb, 0x16, 0xed, 0x74,
	0xe0, 0xda, 0x84, 0x3a, 0xd0, 0x81, 0x9b, 0x02, 0x30, 0x5c, 0xda, 0x43, 0xd0, 0x93, 0x99, 0x49,
	0x44, 0x06, 0x6a, 0x5a, 0xbf, 0xdf, 0xe9, 0xa8, 0x81, 0x40, 0x5f, 0xcd, 0x35, 0x63, 0xe0, 0x37,
	0x76, 0x0f, 0x03, 0x75, 0xb4, 0xda, 0x18, 0x4e, 0x6b, 0x7b, 0x16, 0xf2, 0xf9, 0x7d, 0xbe, 0x1c,
	0xec, 0xe5, 0xdf, 0xe5, 0xbd, 0xa1, 0xf9, 0x92, 0x80, 0xf4, 0xb9, 0x97, 0x04, 0xe2, 0xc5, 0x34,
	0x33, 0x9b, 0xd6, 0x98, 0x46, 0x5b, 0x11, 0x52, 0xec, 0x30, 0xd6, 0xda, 0x25, 0x6e, 0xb4, 0xf1,
	0x3b, 0x35, 0x16, 0xf9, 0x30, 0x31, 0xd0, 0x5c, 0x23, 0x52, 0x8e, 0xa7, 0xd6, 0xc6, 0x1a, 0x6b,
	0xbc, 0x0e, 0x6d, 0x58, 0x9e, 0xed, 0x96, 0xb4, 0xdd, 0xa9, 0xb5, 0x0d, 0x6d, 0xe6, 0xc5, 0xb4,
	0x31, 0x5b, 0x48, 0x85, 0xc6, 0xcf, 0xd3, 0x1d, 0x69, 0x48, 0xda, 0xb3, 0xce, 0xc6, 0x91, 0xe6,
	0x39, 0x31, 0xe8, 0xcc, 0x8e, 0xce, 0x9b, 0x59, 0x37, 0x90, 0x7b, 0xc9, 0x29, 0x94, 0x23, 0xc7,
	0x1b, 0x88, 0x76, 0x12, 0xce, 0x64, 0x02, 0x5a, 0x9b, 0x63, 0xc5, 0x24, 0x61, 0xa7, 0x5b, 0xa5,
	0x0c, 0x64, 0x35, 0xa5, 0x3d, 0x14, 0x91, 0xc3, 0x28, 0xc7, 0xea, 0x5f, 0x5a, 0xd1, 0x1c, 0x9f,
	0x56, 0xb6, 0x1e, 0x18, 0xf5, 0x35, 0xd5, 0xc5, 0x2d, 0xec, 0x18, 0xfb, 0xb3, 0xc3, 0xba, 0xd5,
	0x8e, 0x44, 0x2d, 0xe7, 0x50, 0x09, 0x79, 0x73, 0xfb, 0x8f, 0x36, 0x49, 0xb6, 0xe3, 0x26, 0x1f,
	0x59, 0xc1, 0xdb, 0xb6, 0x31, 0xf4, 0x95, 0x2e, 0x6a, 0x31, 0xce, 0x92, 0x74, 0x20, 0x6f, 0xdb,
	0x83, 0xb3, 0x79, 0xfa, 0x56, 0x47, 0x3d, 0xaa, 0x71, 0xf3, 0x78, 0x4e, 0x44, 0xda, 0x79, 0xcf,
	0x9e, 0x48, 0x35, 0x8e, 0x93, 0x3c, 0xe1, 0x67, 0x40, 0xc2, 0xec, 0xf7, 0xcc, 0x4e, 0xb7, 0xf1,
	0x63, 0xe6, 0x57, 0xa7, 0xf3, 0xa7, 0xd3, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x4c, 0xdb,
	0x71, 0x4b, 0x0d, 0x00, 0x00,
}
