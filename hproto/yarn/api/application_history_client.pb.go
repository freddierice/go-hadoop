// Code generated by protoc-gen-go.
// source: application_history_client.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	application_history_client.proto
	yarn_service_protos.proto
	yarn_protos.proto
	client_SCM_protocol.proto
	applicationclient_protocol.proto
	applicationmaster_protocol.proto
	containermanagement_protocol.proto

It has these top-level messages:
	RegisterApplicationMasterRequestProto
	RegisterApplicationMasterResponseProto
	FinishApplicationMasterRequestProto
	FinishApplicationMasterResponseProto
	AllocateRequestProto
	NMTokenProto
	AllocateResponseProto
	GetNewApplicationRequestProto
	GetNewApplicationResponseProto
	GetApplicationReportRequestProto
	GetApplicationReportResponseProto
	SubmitApplicationRequestProto
	SubmitApplicationResponseProto
	FailApplicationAttemptRequestProto
	FailApplicationAttemptResponseProto
	KillApplicationRequestProto
	KillApplicationResponseProto
	GetClusterMetricsRequestProto
	GetClusterMetricsResponseProto
	MoveApplicationAcrossQueuesRequestProto
	MoveApplicationAcrossQueuesResponseProto
	GetApplicationsRequestProto
	GetApplicationsResponseProto
	GetClusterNodesRequestProto
	GetClusterNodesResponseProto
	GetQueueInfoRequestProto
	GetQueueInfoResponseProto
	GetQueueUserAclsInfoRequestProto
	GetQueueUserAclsInfoResponseProto
	GetNodesToLabelsRequestProto
	GetNodesToLabelsResponseProto
	GetLabelsToNodesRequestProto
	GetLabelsToNodesResponseProto
	GetClusterNodeLabelsRequestProto
	GetClusterNodeLabelsResponseProto
	UpdateApplicationPriorityRequestProto
	UpdateApplicationPriorityResponseProto
	SignalContainerRequestProto
	SignalContainerResponseProto
	StartContainerRequestProto
	StartContainerResponseProto
	StopContainerRequestProto
	StopContainerResponseProto
	StartContainersRequestProto
	ContainerExceptionMapProto
	StartContainersResponseProto
	StopContainersRequestProto
	StopContainersResponseProto
	GetContainerStatusesRequestProto
	GetContainerStatusesResponseProto
	IncreaseContainersResourceRequestProto
	IncreaseContainersResourceResponseProto
	GetApplicationAttemptReportRequestProto
	GetApplicationAttemptReportResponseProto
	GetApplicationAttemptsRequestProto
	GetApplicationAttemptsResponseProto
	GetContainerReportRequestProto
	GetContainerReportResponseProto
	GetContainersRequestProto
	GetContainersResponseProto
	UseSharedCacheResourceRequestProto
	UseSharedCacheResourceResponseProto
	ReleaseSharedCacheResourceRequestProto
	ReleaseSharedCacheResourceResponseProto
	GetNewReservationRequestProto
	GetNewReservationResponseProto
	ReservationSubmissionRequestProto
	ReservationSubmissionResponseProto
	ReservationUpdateRequestProto
	ReservationUpdateResponseProto
	ReservationDeleteRequestProto
	ReservationDeleteResponseProto
	ReservationListRequestProto
	ReservationListResponseProto
	RunSharedCacheCleanerTaskRequestProto
	RunSharedCacheCleanerTaskResponseProto
	SerializedExceptionProto
	ApplicationIdProto
	ApplicationAttemptIdProto
	ContainerIdProto
	ResourceProto
	ResourceUtilizationProto
	ResourceOptionProto
	NodeResourceMapProto
	PriorityProto
	ContainerProto
	ContainerReportProto
	URLProto
	LocalResourceProto
	ApplicationResourceUsageReportProto
	ApplicationReportProto
	ApplicationAttemptReportProto
	NodeIdProto
	NodeReportProto
	NodeIdToLabelsInfoProto
	LabelsToNodeIdsProto
	NodeLabelProto
	ResourceRequestProto
	ExecutionTypeRequestProto
	PreemptionMessageProto
	StrictPreemptionContractProto
	PreemptionContractProto
	PreemptionContainerProto
	PreemptionResourceRequestProto
	ResourceBlacklistRequestProto
	ApplicationSubmissionContextProto
	LogAggregationContextProto
	ApplicationACLMapProto
	YarnClusterMetricsProto
	QueueStatisticsProto
	QueueInfoProto
	QueueUserACLInfoProto
	ReservationIdProto
	ReservationRequestProto
	ReservationRequestsProto
	ReservationDefinitionProto
	ResourceAllocationRequestProto
	ReservationAllocationStateProto
	ContainerLaunchContextProto
	ContainerStatusProto
	ContainerResourceChangeRequestProto
	ContainerRetryContextProto
	StringLocalResourceMapProto
	StringStringMapProto
	StringBytesMapProto
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_common "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ApplicationHistoryProtocolService service

type ApplicationHistoryProtocolServiceClient interface {
	GetApplicationReport(ctx context.Context, in *GetApplicationReportRequestProto, opts ...grpc.CallOption) (*GetApplicationReportResponseProto, error)
	GetApplications(ctx context.Context, in *GetApplicationsRequestProto, opts ...grpc.CallOption) (*GetApplicationsResponseProto, error)
	GetApplicationAttemptReport(ctx context.Context, in *GetApplicationAttemptReportRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptReportResponseProto, error)
	GetApplicationAttempts(ctx context.Context, in *GetApplicationAttemptsRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptsResponseProto, error)
	GetContainerReport(ctx context.Context, in *GetContainerReportRequestProto, opts ...grpc.CallOption) (*GetContainerReportResponseProto, error)
	GetContainers(ctx context.Context, in *GetContainersRequestProto, opts ...grpc.CallOption) (*GetContainersResponseProto, error)
	GetDelegationToken(ctx context.Context, in *hadoop_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.GetDelegationTokenResponseProto, error)
	RenewDelegationToken(ctx context.Context, in *hadoop_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(ctx context.Context, in *hadoop_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.CancelDelegationTokenResponseProto, error)
}

type applicationHistoryProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationHistoryProtocolServiceClient(cc *grpc.ClientConn) ApplicationHistoryProtocolServiceClient {
	return &applicationHistoryProtocolServiceClient{cc}
}

func (c *applicationHistoryProtocolServiceClient) GetApplicationReport(ctx context.Context, in *GetApplicationReportRequestProto, opts ...grpc.CallOption) (*GetApplicationReportResponseProto, error) {
	out := new(GetApplicationReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getApplicationReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetApplications(ctx context.Context, in *GetApplicationsRequestProto, opts ...grpc.CallOption) (*GetApplicationsResponseProto, error) {
	out := new(GetApplicationsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetApplicationAttemptReport(ctx context.Context, in *GetApplicationAttemptReportRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptReportResponseProto, error) {
	out := new(GetApplicationAttemptReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getApplicationAttemptReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetApplicationAttempts(ctx context.Context, in *GetApplicationAttemptsRequestProto, opts ...grpc.CallOption) (*GetApplicationAttemptsResponseProto, error) {
	out := new(GetApplicationAttemptsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getApplicationAttempts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetContainerReport(ctx context.Context, in *GetContainerReportRequestProto, opts ...grpc.CallOption) (*GetContainerReportResponseProto, error) {
	out := new(GetContainerReportResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getContainerReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetContainers(ctx context.Context, in *GetContainersRequestProto, opts ...grpc.CallOption) (*GetContainersResponseProto, error) {
	out := new(GetContainersResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) GetDelegationToken(ctx context.Context, in *hadoop_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.GetDelegationTokenResponseProto, error) {
	out := new(hadoop_common.GetDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/getDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) RenewDelegationToken(ctx context.Context, in *hadoop_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.RenewDelegationTokenResponseProto, error) {
	out := new(hadoop_common.RenewDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/renewDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationHistoryProtocolServiceClient) CancelDelegationToken(ctx context.Context, in *hadoop_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hadoop_common.CancelDelegationTokenResponseProto, error) {
	out := new(hadoop_common.CancelDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ApplicationHistoryProtocolService/cancelDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationHistoryProtocolService service

type ApplicationHistoryProtocolServiceServer interface {
	GetApplicationReport(context.Context, *GetApplicationReportRequestProto) (*GetApplicationReportResponseProto, error)
	GetApplications(context.Context, *GetApplicationsRequestProto) (*GetApplicationsResponseProto, error)
	GetApplicationAttemptReport(context.Context, *GetApplicationAttemptReportRequestProto) (*GetApplicationAttemptReportResponseProto, error)
	GetApplicationAttempts(context.Context, *GetApplicationAttemptsRequestProto) (*GetApplicationAttemptsResponseProto, error)
	GetContainerReport(context.Context, *GetContainerReportRequestProto) (*GetContainerReportResponseProto, error)
	GetContainers(context.Context, *GetContainersRequestProto) (*GetContainersResponseProto, error)
	GetDelegationToken(context.Context, *hadoop_common.GetDelegationTokenRequestProto) (*hadoop_common.GetDelegationTokenResponseProto, error)
	RenewDelegationToken(context.Context, *hadoop_common.RenewDelegationTokenRequestProto) (*hadoop_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(context.Context, *hadoop_common.CancelDelegationTokenRequestProto) (*hadoop_common.CancelDelegationTokenResponseProto, error)
}

func RegisterApplicationHistoryProtocolServiceServer(s *grpc.Server, srv ApplicationHistoryProtocolServiceServer) {
	s.RegisterService(&_ApplicationHistoryProtocolService_serviceDesc, srv)
}

func _ApplicationHistoryProtocolService_GetApplicationReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetApplicationReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationReport(ctx, req.(*GetApplicationReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplications(ctx, req.(*GetApplicationsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetApplicationAttemptReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAttemptReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationAttemptReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetApplicationAttemptReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationAttemptReport(ctx, req.(*GetApplicationAttemptReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetApplicationAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAttemptsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetApplicationAttempts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetApplicationAttempts(ctx, req.(*GetApplicationAttemptsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetContainerReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetContainerReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetContainerReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetContainerReport(ctx, req.(*GetContainerReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetContainers(ctx, req.(*GetContainersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_GetDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.GetDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).GetDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/GetDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).GetDelegationToken(ctx, req.(*hadoop_common.GetDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_RenewDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.RenewDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).RenewDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/RenewDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).RenewDelegationToken(ctx, req.(*hadoop_common.RenewDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationHistoryProtocolService_CancelDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_common.CancelDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationHistoryProtocolServiceServer).CancelDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ApplicationHistoryProtocolService/CancelDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationHistoryProtocolServiceServer).CancelDelegationToken(ctx, req.(*hadoop_common.CancelDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationHistoryProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.yarn.ApplicationHistoryProtocolService",
	HandlerType: (*ApplicationHistoryProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getApplicationReport",
			Handler:    _ApplicationHistoryProtocolService_GetApplicationReport_Handler,
		},
		{
			MethodName: "getApplications",
			Handler:    _ApplicationHistoryProtocolService_GetApplications_Handler,
		},
		{
			MethodName: "getApplicationAttemptReport",
			Handler:    _ApplicationHistoryProtocolService_GetApplicationAttemptReport_Handler,
		},
		{
			MethodName: "getApplicationAttempts",
			Handler:    _ApplicationHistoryProtocolService_GetApplicationAttempts_Handler,
		},
		{
			MethodName: "getContainerReport",
			Handler:    _ApplicationHistoryProtocolService_GetContainerReport_Handler,
		},
		{
			MethodName: "getContainers",
			Handler:    _ApplicationHistoryProtocolService_GetContainers_Handler,
		},
		{
			MethodName: "getDelegationToken",
			Handler:    _ApplicationHistoryProtocolService_GetDelegationToken_Handler,
		},
		{
			MethodName: "renewDelegationToken",
			Handler:    _ApplicationHistoryProtocolService_RenewDelegationToken_Handler,
		},
		{
			MethodName: "cancelDelegationToken",
			Handler:    _ApplicationHistoryProtocolService_CancelDelegationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("application_history_client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x4a, 0xf3, 0x30,
	0x18, 0xc6, 0xe9, 0xd9, 0x47, 0x3e, 0x54, 0x08, 0x53, 0xb0, 0x7a, 0xa0, 0x27, 0xfe, 0x41, 0xed,
	0x54, 0xf4, 0xdc, 0x6d, 0x82, 0x1e, 0xca, 0xe6, 0x79, 0x0d, 0xf1, 0x75, 0x2b, 0x76, 0x79, 0x63,
	0x92, 0x29, 0x45, 0x2f, 0x40, 0xbc, 0x0a, 0x6f, 0xc8, 0x7b, 0xd2, 0xa5, 0x83, 0x25, 0xa1, 0xeb,
	0x7a, 0xda, 0xfc, 0x9e, 0xe7, 0x97, 0xb7, 0x09, 0x21, 0x3b, 0x4c, 0xca, 0x3c, 0xe3, 0xcc, 0x64,
	0x28, 0xd2, 0x51, 0xa6, 0x0d, 0xaa, 0x22, 0xe5, 0x79, 0x06, 0xc2, 0x24, 0x52, 0xa1, 0x41, 0xfa,
	0x7f, 0xc4, 0x1e, 0x11, 0x65, 0x52, 0x30, 0x25, 0xe2, 0xd5, 0x01, 0xf0, 0x89, 0xca, 0x4c, 0x51,
	0x2e, 0xc6, 0x9b, 0xd3, 0xaf, 0xa9, 0x06, 0xf5, 0x9a, 0x71, 0x48, 0xed, 0x37, 0x5d, 0x2e, 0x9d,
	0xff, 0xfc, 0x23, 0xbb, 0x9d, 0x79, 0xf9, 0x6d, 0xd9, 0x7d, 0x37, 0x5d, 0xe3, 0x98, 0x0f, 0xca,
	0x08, 0x9d, 0x90, 0xd6, 0x10, 0x8c, 0xc3, 0xf5, 0x41, 0xa2, 0x32, 0xf4, 0x24, 0x71, 0xb4, 0xc9,
	0x4d, 0x05, 0xd2, 0x87, 0x97, 0x09, 0x68, 0x63, 0x0b, 0xe3, 0xa4, 0x01, 0xae, 0x25, 0x0a, 0x0d,
	0x96, 0xa7, 0x4f, 0x64, 0xcd, 0xd7, 0x6a, 0x7a, 0x50, 0x53, 0xa1, 0x3d, 0xd9, 0x61, 0x3d, 0xe9,
	0x7a, 0xbe, 0x22, 0xb2, 0xe5, 0x8b, 0x3a, 0xc6, 0xc0, 0x58, 0x9a, 0xd9, 0x98, 0x17, 0x35, 0x55,
	0x1e, 0xe9, 0x6d, 0xe0, 0xb2, 0x79, 0xca, 0xdd, 0xcc, 0x3b, 0xd9, 0xa8, 0xdc, 0x8b, 0xa6, 0xed,
	0xe5, 0x85, 0xfe, 0x2f, 0x38, 0x6d, 0x14, 0x70, 0xe5, 0x48, 0xe8, 0x9f, 0xbc, 0x87, 0xc2, 0xb0,
	0x4c, 0x80, 0x9a, 0xcd, 0x7f, 0x14, 0xf6, 0x04, 0x80, 0x27, 0x3d, 0x5e, 0x0a, 0xbb, 0xc2, 0x07,
	0xb2, 0xe2, 0x0a, 0x35, 0xdd, 0x5b, 0x18, 0xf7, 0x67, 0xdb, 0xaf, 0xe3, 0x5c, 0x83, 0xb6, 0x23,
	0x5d, 0x43, 0x0e, 0x43, 0x3b, 0xf8, 0x3d, 0x3e, 0x83, 0x98, 0xdf, 0x5c, 0x8e, 0xe3, 0x31, 0xda,
	0x82, 0x00, 0xa9, 0xbe, 0xb9, 0x35, 0xb8, 0x2b, 0x2d, 0x48, 0x4b, 0x81, 0x80, 0xb7, 0x50, 0xdb,
	0x0e, 0x7a, 0xfa, 0x15, 0x50, 0xf5, 0x11, 0xd6, 0x06, 0x5c, 0xf5, 0x07, 0x59, 0xe7, 0x4c, 0x70,
	0xc8, 0x43, 0x77, 0x58, 0xd5, 0xab, 0xa2, 0x3c, 0xf9, 0x59, 0xb3, 0x84, 0x63, 0xef, 0x5e, 0x91,
	0x6d, 0x54, 0xc3, 0x84, 0x49, 0xc6, 0x47, 0xe0, 0x1d, 0x91, 0x7d, 0x6f, 0xba, 0xf1, 0xe2, 0xc7,
	0xe6, 0x33, 0x8a, 0xbe, 0xa3, 0xe8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xaa, 0xc8, 0xa4, 0xec,
	0x04, 0x00, 0x00,
}
