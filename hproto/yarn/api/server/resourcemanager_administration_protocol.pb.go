// Code generated by protoc-gen-go.
// source: resourcemanager_administration_protocol.proto
// DO NOT EDIT!

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	resourcemanager_administration_protocol.proto

It has these top-level messages:
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_yarn1 "server"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ResourceManagerAdministrationProtocolService service

type ResourceManagerAdministrationProtocolServiceClient interface {
	RefreshQueues(ctx context.Context, in *hadoop_yarn1.RefreshQueuesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshQueuesResponseProto, error)
	RefreshNodes(ctx context.Context, in *hadoop_yarn1.RefreshNodesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshNodesResponseProto, error)
	RefreshSuperUserGroupsConfiguration(ctx context.Context, in *hadoop_yarn1.RefreshSuperUserGroupsConfigurationRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshSuperUserGroupsConfigurationResponseProto, error)
	RefreshUserToGroupsMappings(ctx context.Context, in *hadoop_yarn1.RefreshUserToGroupsMappingsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshUserToGroupsMappingsResponseProto, error)
	RefreshAdminAcls(ctx context.Context, in *hadoop_yarn1.RefreshAdminAclsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshAdminAclsResponseProto, error)
	RefreshServiceAcls(ctx context.Context, in *hadoop_yarn1.RefreshServiceAclsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshServiceAclsResponseProto, error)
	GetGroupsForUser(ctx context.Context, in *hadoop_yarn1.GetGroupsForUserRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.GetGroupsForUserResponseProto, error)
	UpdateNodeResource(ctx context.Context, in *hadoop_yarn1.UpdateNodeResourceRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.UpdateNodeResourceResponseProto, error)
	RefreshNodesResources(ctx context.Context, in *hadoop_yarn1.RefreshNodesResourcesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshNodesResourcesResponseProto, error)
	AddToClusterNodeLabels(ctx context.Context, in *hadoop_yarn1.AddToClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.AddToClusterNodeLabelsResponseProto, error)
	RemoveFromClusterNodeLabels(ctx context.Context, in *hadoop_yarn1.RemoveFromClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RemoveFromClusterNodeLabelsResponseProto, error)
	ReplaceLabelsOnNodes(ctx context.Context, in *hadoop_yarn1.ReplaceLabelsOnNodeRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.ReplaceLabelsOnNodeResponseProto, error)
	CheckForDecommissioningNodes(ctx context.Context, in *hadoop_yarn1.CheckForDecommissioningNodesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.CheckForDecommissioningNodesResponseProto, error)
	RefreshClusterMaxPriority(ctx context.Context, in *hadoop_yarn1.RefreshClusterMaxPriorityRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshClusterMaxPriorityResponseProto, error)
}

type resourceManagerAdministrationProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewResourceManagerAdministrationProtocolServiceClient(cc *grpc.ClientConn) ResourceManagerAdministrationProtocolServiceClient {
	return &resourceManagerAdministrationProtocolServiceClient{cc}
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshQueues(ctx context.Context, in *hadoop_yarn1.RefreshQueuesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshQueuesResponseProto, error) {
	out := new(hadoop_yarn1.RefreshQueuesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshQueues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshNodes(ctx context.Context, in *hadoop_yarn1.RefreshNodesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshNodesResponseProto, error) {
	out := new(hadoop_yarn1.RefreshNodesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshSuperUserGroupsConfiguration(ctx context.Context, in *hadoop_yarn1.RefreshSuperUserGroupsConfigurationRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshSuperUserGroupsConfigurationResponseProto, error) {
	out := new(hadoop_yarn1.RefreshSuperUserGroupsConfigurationResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshSuperUserGroupsConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshUserToGroupsMappings(ctx context.Context, in *hadoop_yarn1.RefreshUserToGroupsMappingsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshUserToGroupsMappingsResponseProto, error) {
	out := new(hadoop_yarn1.RefreshUserToGroupsMappingsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshUserToGroupsMappings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshAdminAcls(ctx context.Context, in *hadoop_yarn1.RefreshAdminAclsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshAdminAclsResponseProto, error) {
	out := new(hadoop_yarn1.RefreshAdminAclsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshAdminAcls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshServiceAcls(ctx context.Context, in *hadoop_yarn1.RefreshServiceAclsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshServiceAclsResponseProto, error) {
	out := new(hadoop_yarn1.RefreshServiceAclsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshServiceAcls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) GetGroupsForUser(ctx context.Context, in *hadoop_yarn1.GetGroupsForUserRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.GetGroupsForUserResponseProto, error) {
	out := new(hadoop_yarn1.GetGroupsForUserResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/getGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) UpdateNodeResource(ctx context.Context, in *hadoop_yarn1.UpdateNodeResourceRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.UpdateNodeResourceResponseProto, error) {
	out := new(hadoop_yarn1.UpdateNodeResourceResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/updateNodeResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshNodesResources(ctx context.Context, in *hadoop_yarn1.RefreshNodesResourcesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshNodesResourcesResponseProto, error) {
	out := new(hadoop_yarn1.RefreshNodesResourcesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshNodesResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) AddToClusterNodeLabels(ctx context.Context, in *hadoop_yarn1.AddToClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.AddToClusterNodeLabelsResponseProto, error) {
	out := new(hadoop_yarn1.AddToClusterNodeLabelsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/addToClusterNodeLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RemoveFromClusterNodeLabels(ctx context.Context, in *hadoop_yarn1.RemoveFromClusterNodeLabelsRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RemoveFromClusterNodeLabelsResponseProto, error) {
	out := new(hadoop_yarn1.RemoveFromClusterNodeLabelsResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/removeFromClusterNodeLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) ReplaceLabelsOnNodes(ctx context.Context, in *hadoop_yarn1.ReplaceLabelsOnNodeRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.ReplaceLabelsOnNodeResponseProto, error) {
	out := new(hadoop_yarn1.ReplaceLabelsOnNodeResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/replaceLabelsOnNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) CheckForDecommissioningNodes(ctx context.Context, in *hadoop_yarn1.CheckForDecommissioningNodesRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.CheckForDecommissioningNodesResponseProto, error) {
	out := new(hadoop_yarn1.CheckForDecommissioningNodesResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/checkForDecommissioningNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerAdministrationProtocolServiceClient) RefreshClusterMaxPriority(ctx context.Context, in *hadoop_yarn1.RefreshClusterMaxPriorityRequestProto, opts ...grpc.CallOption) (*hadoop_yarn1.RefreshClusterMaxPriorityResponseProto, error) {
	out := new(hadoop_yarn1.RefreshClusterMaxPriorityResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.yarn.ResourceManagerAdministrationProtocolService/refreshClusterMaxPriority", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceManagerAdministrationProtocolService service

type ResourceManagerAdministrationProtocolServiceServer interface {
	RefreshQueues(context.Context, *hadoop_yarn1.RefreshQueuesRequestProto) (*hadoop_yarn1.RefreshQueuesResponseProto, error)
	RefreshNodes(context.Context, *hadoop_yarn1.RefreshNodesRequestProto) (*hadoop_yarn1.RefreshNodesResponseProto, error)
	RefreshSuperUserGroupsConfiguration(context.Context, *hadoop_yarn1.RefreshSuperUserGroupsConfigurationRequestProto) (*hadoop_yarn1.RefreshSuperUserGroupsConfigurationResponseProto, error)
	RefreshUserToGroupsMappings(context.Context, *hadoop_yarn1.RefreshUserToGroupsMappingsRequestProto) (*hadoop_yarn1.RefreshUserToGroupsMappingsResponseProto, error)
	RefreshAdminAcls(context.Context, *hadoop_yarn1.RefreshAdminAclsRequestProto) (*hadoop_yarn1.RefreshAdminAclsResponseProto, error)
	RefreshServiceAcls(context.Context, *hadoop_yarn1.RefreshServiceAclsRequestProto) (*hadoop_yarn1.RefreshServiceAclsResponseProto, error)
	GetGroupsForUser(context.Context, *hadoop_yarn1.GetGroupsForUserRequestProto) (*hadoop_yarn1.GetGroupsForUserResponseProto, error)
	UpdateNodeResource(context.Context, *hadoop_yarn1.UpdateNodeResourceRequestProto) (*hadoop_yarn1.UpdateNodeResourceResponseProto, error)
	RefreshNodesResources(context.Context, *hadoop_yarn1.RefreshNodesResourcesRequestProto) (*hadoop_yarn1.RefreshNodesResourcesResponseProto, error)
	AddToClusterNodeLabels(context.Context, *hadoop_yarn1.AddToClusterNodeLabelsRequestProto) (*hadoop_yarn1.AddToClusterNodeLabelsResponseProto, error)
	RemoveFromClusterNodeLabels(context.Context, *hadoop_yarn1.RemoveFromClusterNodeLabelsRequestProto) (*hadoop_yarn1.RemoveFromClusterNodeLabelsResponseProto, error)
	ReplaceLabelsOnNodes(context.Context, *hadoop_yarn1.ReplaceLabelsOnNodeRequestProto) (*hadoop_yarn1.ReplaceLabelsOnNodeResponseProto, error)
	CheckForDecommissioningNodes(context.Context, *hadoop_yarn1.CheckForDecommissioningNodesRequestProto) (*hadoop_yarn1.CheckForDecommissioningNodesResponseProto, error)
	RefreshClusterMaxPriority(context.Context, *hadoop_yarn1.RefreshClusterMaxPriorityRequestProto) (*hadoop_yarn1.RefreshClusterMaxPriorityResponseProto, error)
}

func RegisterResourceManagerAdministrationProtocolServiceServer(s *grpc.Server, srv ResourceManagerAdministrationProtocolServiceServer) {
	s.RegisterService(&_ResourceManagerAdministrationProtocolService_serviceDesc, srv)
}

func _ResourceManagerAdministrationProtocolService_RefreshQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshQueuesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshQueues(ctx, req.(*hadoop_yarn1.RefreshQueuesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshNodesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshNodes(ctx, req.(*hadoop_yarn1.RefreshNodesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshSuperUserGroupsConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshSuperUserGroupsConfigurationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshSuperUserGroupsConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshSuperUserGroupsConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshSuperUserGroupsConfiguration(ctx, req.(*hadoop_yarn1.RefreshSuperUserGroupsConfigurationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshUserToGroupsMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshUserToGroupsMappingsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshUserToGroupsMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshUserToGroupsMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshUserToGroupsMappings(ctx, req.(*hadoop_yarn1.RefreshUserToGroupsMappingsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshAdminAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshAdminAclsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshAdminAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshAdminAcls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshAdminAcls(ctx, req.(*hadoop_yarn1.RefreshAdminAclsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshServiceAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshServiceAclsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshServiceAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshServiceAcls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshServiceAcls(ctx, req.(*hadoop_yarn1.RefreshServiceAclsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_GetGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.GetGroupsForUserRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).GetGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/GetGroupsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).GetGroupsForUser(ctx, req.(*hadoop_yarn1.GetGroupsForUserRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_UpdateNodeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.UpdateNodeResourceRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).UpdateNodeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/UpdateNodeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).UpdateNodeResource(ctx, req.(*hadoop_yarn1.UpdateNodeResourceRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshNodesResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshNodesResourcesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshNodesResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshNodesResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshNodesResources(ctx, req.(*hadoop_yarn1.RefreshNodesResourcesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_AddToClusterNodeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.AddToClusterNodeLabelsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).AddToClusterNodeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/AddToClusterNodeLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).AddToClusterNodeLabels(ctx, req.(*hadoop_yarn1.AddToClusterNodeLabelsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RemoveFromClusterNodeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RemoveFromClusterNodeLabelsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RemoveFromClusterNodeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RemoveFromClusterNodeLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RemoveFromClusterNodeLabels(ctx, req.(*hadoop_yarn1.RemoveFromClusterNodeLabelsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_ReplaceLabelsOnNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.ReplaceLabelsOnNodeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).ReplaceLabelsOnNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/ReplaceLabelsOnNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).ReplaceLabelsOnNodes(ctx, req.(*hadoop_yarn1.ReplaceLabelsOnNodeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_CheckForDecommissioningNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.CheckForDecommissioningNodesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).CheckForDecommissioningNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/CheckForDecommissioningNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).CheckForDecommissioningNodes(ctx, req.(*hadoop_yarn1.CheckForDecommissioningNodesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerAdministrationProtocolService_RefreshClusterMaxPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hadoop_yarn1.RefreshClusterMaxPriorityRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshClusterMaxPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.yarn.ResourceManagerAdministrationProtocolService/RefreshClusterMaxPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerAdministrationProtocolServiceServer).RefreshClusterMaxPriority(ctx, req.(*hadoop_yarn1.RefreshClusterMaxPriorityRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManagerAdministrationProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.yarn.ResourceManagerAdministrationProtocolService",
	HandlerType: (*ResourceManagerAdministrationProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "refreshQueues",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshQueues_Handler,
		},
		{
			MethodName: "refreshNodes",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshNodes_Handler,
		},
		{
			MethodName: "refreshSuperUserGroupsConfiguration",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshSuperUserGroupsConfiguration_Handler,
		},
		{
			MethodName: "refreshUserToGroupsMappings",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshUserToGroupsMappings_Handler,
		},
		{
			MethodName: "refreshAdminAcls",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshAdminAcls_Handler,
		},
		{
			MethodName: "refreshServiceAcls",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshServiceAcls_Handler,
		},
		{
			MethodName: "getGroupsForUser",
			Handler:    _ResourceManagerAdministrationProtocolService_GetGroupsForUser_Handler,
		},
		{
			MethodName: "updateNodeResource",
			Handler:    _ResourceManagerAdministrationProtocolService_UpdateNodeResource_Handler,
		},
		{
			MethodName: "refreshNodesResources",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshNodesResources_Handler,
		},
		{
			MethodName: "addToClusterNodeLabels",
			Handler:    _ResourceManagerAdministrationProtocolService_AddToClusterNodeLabels_Handler,
		},
		{
			MethodName: "removeFromClusterNodeLabels",
			Handler:    _ResourceManagerAdministrationProtocolService_RemoveFromClusterNodeLabels_Handler,
		},
		{
			MethodName: "replaceLabelsOnNodes",
			Handler:    _ResourceManagerAdministrationProtocolService_ReplaceLabelsOnNodes_Handler,
		},
		{
			MethodName: "checkForDecommissioningNodes",
			Handler:    _ResourceManagerAdministrationProtocolService_CheckForDecommissioningNodes_Handler,
		},
		{
			MethodName: "refreshClusterMaxPriority",
			Handler:    _ResourceManagerAdministrationProtocolService_RefreshClusterMaxPriority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("resourcemanager_administration_protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x95, 0xab, 0xa1, 0x12, 0xb2, 0x00, 0x89, 0xd2, 0x1b, 0x6a, 0x11, 0xd0, 0xa6, 0xa8,
	0xfc, 0xbb, 0xc0, 0x61, 0xbb, 0xa8, 0x3d, 0xc0, 0x42, 0xd9, 0xb6, 0x47, 0xb4, 0x98, 0x64, 0x9a,
	0xb5, 0xd8, 0x64, 0xcc, 0x38, 0xa9, 0x5a, 0x71, 0xe5, 0x80, 0x90, 0x78, 0x07, 0xc4, 0xdb, 0xf1,
	0x16, 0x24, 0x71, 0x0a, 0x76, 0x12, 0xbc, 0xe9, 0xa5, 0xda, 0xae, 0x7f, 0xf3, 0x7d, 0xdf, 0x38,
	0x33, 0x1b, 0xb6, 0x45, 0xa0, 0xb1, 0xa0, 0x08, 0x52, 0x91, 0x89, 0x04, 0x68, 0x26, 0xe2, 0x54,
	0x66, 0x52, 0xe7, 0x24, 0x72, 0x89, 0xd9, 0x4c, 0x11, 0xe6, 0x18, 0xe1, 0x22, 0xac, 0x3f, 0xf0,
	0x2b, 0x73, 0x11, 0x23, 0xaa, 0xf0, 0x5c, 0x50, 0xb6, 0xfa, 0x4c, 0x03, 0x9d, 0x02, 0x6d, 0x57,
	0xff, 0xcc, 0xcc, 0xe7, 0x59, 0x5b, 0xae, 0xfa, 0x5a, 0x46, 0x60, 0x74, 0xb4, 0x51, 0xd9, 0xf9,
	0xbd, 0xc2, 0x36, 0xa7, 0x0d, 0x38, 0x31, 0xe0, 0xc8, 0xb1, 0x3d, 0x68, 0x5c, 0x0f, 0x4d, 0x35,
	0xff, 0xc0, 0x56, 0x08, 0x4e, 0x4a, 0xed, 0xf9, 0xbb, 0x02, 0x0a, 0xd0, 0x7c, 0x23, 0xb4, 0x82,
	0x84, 0x53, 0xfb, 0x6c, 0x0a, 0x9f, 0xcb, 0xbf, 0x79, 0x2d, 0xb1, 0x7a, 0xd7, 0xc7, 0x69, 0x85,
	0x99, 0x86, 0x1a, 0xe4, 0xef, 0xd9, 0xd5, 0xc6, 0xe1, 0x0d, 0xc6, 0xa5, 0xc1, 0x7a, 0x5f, 0x61,
	0x7d, 0xe4, 0xe8, 0x6f, 0x78, 0x30, 0x5b, 0xfe, 0x57, 0xc0, 0xee, 0x34, 0xfa, 0x87, 0x85, 0x02,
	0x3a, 0x2e, 0xef, 0x65, 0x9f, 0xb0, 0x50, 0x7a, 0x8c, 0xd9, 0x89, 0x4c, 0x0a, 0xd3, 0x37, 0x7f,
	0xde, 0xa7, 0xe7, 0xab, 0x70, 0xd2, 0xbc, 0xb8, 0x7c, 0xb5, 0x1d, 0xf2, 0x7b, 0xc0, 0x6e, 0x37,
	0x21, 0x2b, 0xfe, 0x08, 0x4d, 0xc5, 0x44, 0x28, 0x25, 0xb3, 0x44, 0xf3, 0xc7, 0x7d, 0xf2, 0x7d,
	0xa4, 0x13, 0xea, 0xc9, 0xf0, 0x2a, 0x3b, 0x8c, 0x64, 0xd7, 0x9a, 0x2c, 0xf5, 0x68, 0x8c, 0xa2,
	0x85, 0xe6, 0xf7, 0xfa, 0xa4, 0xfe, 0x1e, 0x3b, 0xae, 0xf7, 0x97, 0xa0, 0xb6, 0x15, 0x32, 0x7e,
	0xf1, 0x6c, 0xcc, 0xbc, 0xd5, 0x66, 0x0f, 0x7a, 0x2f, 0xf3, 0x1f, 0xe0, 0xd8, 0x6d, 0x2e, 0x85,
	0x5b, 0xbd, 0x25, 0x90, 0x9b, 0xee, 0xf7, 0xb0, 0x7e, 0x38, 0xad, 0xde, 0xf6, 0x5b, 0xc7, 0x9e,
	0xde, 0xba, 0x68, 0xab, 0xb7, 0x42, 0xc5, 0x22, 0x87, 0x6a, 0x28, 0x2f, 0x76, 0xae, 0xd5, 0xdb,
	0x71, 0x07, 0xf0, 0xf4, 0xd6, 0x07, 0xdb, 0x86, 0x67, 0xec, 0x06, 0xb9, 0x6b, 0x50, 0x43, 0x9a,
	0x87, 0xbe, 0x55, 0x31, 0x8c, 0x63, 0xbb, 0x3d, 0x84, 0xb7, 0x9d, 0xbf, 0xb0, 0x9b, 0x22, 0x8e,
	0x8f, 0x70, 0xbc, 0x28, 0x74, 0x0e, 0x54, 0xa1, 0xaf, 0xc5, 0x47, 0x28, 0x1f, 0xa5, 0x2b, 0x35,
	0xea, 0x85, 0x1c, 0xef, 0x87, 0x83, 0x0a, 0xba, 0xbb, 0x93, 0xe2, 0x29, 0xec, 0x11, 0xa6, 0xdd,
	0x08, 0xed, 0xdd, 0xf9, 0x2f, 0xe9, 0xdd, 0x1d, 0x4f, 0x95, 0x1d, 0x46, 0xb3, 0xeb, 0x04, 0x6a,
	0x21, 0xa2, 0xe6, 0xf4, 0x6d, 0x66, 0x7e, 0xd4, 0xda, 0x53, 0xda, 0x41, 0x1c, 0xf3, 0xad, 0xe5,
	0xb4, 0x6d, 0xfa, 0x23, 0x60, 0x6b, 0xd1, 0x1c, 0xa2, 0x4f, 0xe5, 0x1c, 0xbe, 0x84, 0x08, 0xd3,
	0x54, 0x6a, 0x5d, 0xfe, 0xc6, 0x94, 0xab, 0x6d, 0xdc, 0xdd, 0x66, 0xc6, 0x1e, 0xd4, 0x89, 0xf1,
	0xf4, 0x12, 0x65, 0x76, 0x9e, 0xaf, 0x01, 0xbb, 0xd5, 0x4c, 0x62, 0x73, 0x5d, 0x13, 0x71, 0x76,
	0x40, 0x12, 0x49, 0xe6, 0xe7, 0x7c, 0xa7, 0x6f, 0xba, 0xba, 0x9c, 0x93, 0xe4, 0xd1, 0xd0, 0x1a,
	0x2b, 0xc6, 0xee, 0x2b, 0xb6, 0x86, 0x94, 0x84, 0x42, 0x89, 0xf2, 0x72, 0x1c, 0x81, 0xfa, 0x5d,
	0xb8, 0xbb, 0x3e, 0xe8, 0x45, 0xf8, 0x2d, 0x08, 0x7e, 0x06, 0xc1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0xa0, 0x78, 0xb0, 0xae, 0x07, 0x00, 0x00,
}
