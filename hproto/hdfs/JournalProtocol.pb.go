// Code generated by protoc-gen-go.
// source: JournalProtocol.proto
// DO NOT EDIT!

/*
Package hdfs is a generated protocol buffer package.

It is generated from these files:
	JournalProtocol.proto

It has these top-level messages:
	JournalInfoProto
	JournalRequestProto
	JournalResponseProto
	StartLogSegmentRequestProto
	StartLogSegmentResponseProto
	FenceRequestProto
	FenceResponseProto
*/
package hdfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "."
import _ "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Journal information used by the journal receiver to identify a journal.
type JournalInfoProto struct {
	ClusterID        *string `protobuf:"bytes,1,req,name=clusterID" json:"clusterID,omitempty"`
	LayoutVersion    *uint32 `protobuf:"varint,2,opt,name=layoutVersion" json:"layoutVersion,omitempty"`
	NamespaceID      *uint32 `protobuf:"varint,3,opt,name=namespaceID" json:"namespaceID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JournalInfoProto) Reset()                    { *m = JournalInfoProto{} }
func (m *JournalInfoProto) String() string            { return proto.CompactTextString(m) }
func (*JournalInfoProto) ProtoMessage()               {}
func (*JournalInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JournalInfoProto) GetClusterID() string {
	if m != nil && m.ClusterID != nil {
		return *m.ClusterID
	}
	return ""
}

func (m *JournalInfoProto) GetLayoutVersion() uint32 {
	if m != nil && m.LayoutVersion != nil {
		return *m.LayoutVersion
	}
	return 0
}

func (m *JournalInfoProto) GetNamespaceID() uint32 {
	if m != nil && m.NamespaceID != nil {
		return *m.NamespaceID
	}
	return 0
}

// *
// journalInfo - the information about the journal
// firstTxnId - the first txid in the journal records
// numTxns - Number of transactions in editlog
// records - bytes containing serialized journal records
// epoch - change to this represents change of journal writer
type JournalRequestProto struct {
	JournalInfo      *JournalInfoProto `protobuf:"bytes,1,req,name=journalInfo" json:"journalInfo,omitempty"`
	FirstTxnId       *uint64           `protobuf:"varint,2,req,name=firstTxnId" json:"firstTxnId,omitempty"`
	NumTxns          *uint32           `protobuf:"varint,3,req,name=numTxns" json:"numTxns,omitempty"`
	Records          []byte            `protobuf:"bytes,4,req,name=records" json:"records,omitempty"`
	Epoch            *uint64           `protobuf:"varint,5,req,name=epoch" json:"epoch,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *JournalRequestProto) Reset()                    { *m = JournalRequestProto{} }
func (m *JournalRequestProto) String() string            { return proto.CompactTextString(m) }
func (*JournalRequestProto) ProtoMessage()               {}
func (*JournalRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JournalRequestProto) GetJournalInfo() *JournalInfoProto {
	if m != nil {
		return m.JournalInfo
	}
	return nil
}

func (m *JournalRequestProto) GetFirstTxnId() uint64 {
	if m != nil && m.FirstTxnId != nil {
		return *m.FirstTxnId
	}
	return 0
}

func (m *JournalRequestProto) GetNumTxns() uint32 {
	if m != nil && m.NumTxns != nil {
		return *m.NumTxns
	}
	return 0
}

func (m *JournalRequestProto) GetRecords() []byte {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *JournalRequestProto) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

// *
// void response
type JournalResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *JournalResponseProto) Reset()                    { *m = JournalResponseProto{} }
func (m *JournalResponseProto) String() string            { return proto.CompactTextString(m) }
func (*JournalResponseProto) ProtoMessage()               {}
func (*JournalResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// journalInfo - the information about the journal
// txid - first txid in the new log
type StartLogSegmentRequestProto struct {
	JournalInfo      *JournalInfoProto `protobuf:"bytes,1,req,name=journalInfo" json:"journalInfo,omitempty"`
	Txid             *uint64           `protobuf:"varint,2,req,name=txid" json:"txid,omitempty"`
	Epoch            *uint64           `protobuf:"varint,3,req,name=epoch" json:"epoch,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StartLogSegmentRequestProto) Reset()                    { *m = StartLogSegmentRequestProto{} }
func (m *StartLogSegmentRequestProto) String() string            { return proto.CompactTextString(m) }
func (*StartLogSegmentRequestProto) ProtoMessage()               {}
func (*StartLogSegmentRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartLogSegmentRequestProto) GetJournalInfo() *JournalInfoProto {
	if m != nil {
		return m.JournalInfo
	}
	return nil
}

func (m *StartLogSegmentRequestProto) GetTxid() uint64 {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return 0
}

func (m *StartLogSegmentRequestProto) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

// *
// void response
type StartLogSegmentResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StartLogSegmentResponseProto) Reset()                    { *m = StartLogSegmentResponseProto{} }
func (m *StartLogSegmentResponseProto) String() string            { return proto.CompactTextString(m) }
func (*StartLogSegmentResponseProto) ProtoMessage()               {}
func (*StartLogSegmentResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// *
// journalInfo - the information about the journal
// txid - first txid in the new log
type FenceRequestProto struct {
	JournalInfo      *JournalInfoProto `protobuf:"bytes,1,req,name=journalInfo" json:"journalInfo,omitempty"`
	Epoch            *uint64           `protobuf:"varint,2,req,name=epoch" json:"epoch,omitempty"`
	FencerInfo       *string           `protobuf:"bytes,3,opt,name=fencerInfo" json:"fencerInfo,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FenceRequestProto) Reset()                    { *m = FenceRequestProto{} }
func (m *FenceRequestProto) String() string            { return proto.CompactTextString(m) }
func (*FenceRequestProto) ProtoMessage()               {}
func (*FenceRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FenceRequestProto) GetJournalInfo() *JournalInfoProto {
	if m != nil {
		return m.JournalInfo
	}
	return nil
}

func (m *FenceRequestProto) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *FenceRequestProto) GetFencerInfo() string {
	if m != nil && m.FencerInfo != nil {
		return *m.FencerInfo
	}
	return ""
}

// *
// previousEpoch - previous epoch if any or zero
// lastTransactionId - last valid transaction Id in the journal
// inSync - if all journal segments are available and in sync
type FenceResponseProto struct {
	PreviousEpoch     *uint64 `protobuf:"varint,1,opt,name=previousEpoch" json:"previousEpoch,omitempty"`
	LastTransactionId *uint64 `protobuf:"varint,2,opt,name=lastTransactionId" json:"lastTransactionId,omitempty"`
	InSync            *bool   `protobuf:"varint,3,opt,name=inSync" json:"inSync,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *FenceResponseProto) Reset()                    { *m = FenceResponseProto{} }
func (m *FenceResponseProto) String() string            { return proto.CompactTextString(m) }
func (*FenceResponseProto) ProtoMessage()               {}
func (*FenceResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FenceResponseProto) GetPreviousEpoch() uint64 {
	if m != nil && m.PreviousEpoch != nil {
		return *m.PreviousEpoch
	}
	return 0
}

func (m *FenceResponseProto) GetLastTransactionId() uint64 {
	if m != nil && m.LastTransactionId != nil {
		return *m.LastTransactionId
	}
	return 0
}

func (m *FenceResponseProto) GetInSync() bool {
	if m != nil && m.InSync != nil {
		return *m.InSync
	}
	return false
}

func init() {
	proto.RegisterType((*JournalInfoProto)(nil), "hadoop.hdfs.JournalInfoProto")
	proto.RegisterType((*JournalRequestProto)(nil), "hadoop.hdfs.JournalRequestProto")
	proto.RegisterType((*JournalResponseProto)(nil), "hadoop.hdfs.JournalResponseProto")
	proto.RegisterType((*StartLogSegmentRequestProto)(nil), "hadoop.hdfs.StartLogSegmentRequestProto")
	proto.RegisterType((*StartLogSegmentResponseProto)(nil), "hadoop.hdfs.StartLogSegmentResponseProto")
	proto.RegisterType((*FenceRequestProto)(nil), "hadoop.hdfs.FenceRequestProto")
	proto.RegisterType((*FenceResponseProto)(nil), "hadoop.hdfs.FenceResponseProto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for JournalProtocolService service

type JournalProtocolServiceClient interface {
	// *
	// Request sent by active namenode to backup node via
	// EditLogBackupOutputStream to stream editlog records.
	Journal(ctx context.Context, in *JournalRequestProto, opts ...grpc.CallOption) (*JournalResponseProto, error)
	// *
	// Request sent by active namenode to backup node to notify
	// that the NameNode has rolled its edit logs and is now writing a
	// new log segment.
	StartLogSegment(ctx context.Context, in *StartLogSegmentRequestProto, opts ...grpc.CallOption) (*StartLogSegmentResponseProto, error)
	// *
	// Request to fence a journal receiver.
	Fence(ctx context.Context, in *FenceRequestProto, opts ...grpc.CallOption) (*FenceResponseProto, error)
}

type journalProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewJournalProtocolServiceClient(cc *grpc.ClientConn) JournalProtocolServiceClient {
	return &journalProtocolServiceClient{cc}
}

func (c *journalProtocolServiceClient) Journal(ctx context.Context, in *JournalRequestProto, opts ...grpc.CallOption) (*JournalResponseProto, error) {
	out := new(JournalResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.JournalProtocolService/journal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalProtocolServiceClient) StartLogSegment(ctx context.Context, in *StartLogSegmentRequestProto, opts ...grpc.CallOption) (*StartLogSegmentResponseProto, error) {
	out := new(StartLogSegmentResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.JournalProtocolService/startLogSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalProtocolServiceClient) Fence(ctx context.Context, in *FenceRequestProto, opts ...grpc.CallOption) (*FenceResponseProto, error) {
	out := new(FenceResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.hdfs.JournalProtocolService/fence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JournalProtocolService service

type JournalProtocolServiceServer interface {
	// *
	// Request sent by active namenode to backup node via
	// EditLogBackupOutputStream to stream editlog records.
	Journal(context.Context, *JournalRequestProto) (*JournalResponseProto, error)
	// *
	// Request sent by active namenode to backup node to notify
	// that the NameNode has rolled its edit logs and is now writing a
	// new log segment.
	StartLogSegment(context.Context, *StartLogSegmentRequestProto) (*StartLogSegmentResponseProto, error)
	// *
	// Request to fence a journal receiver.
	Fence(context.Context, *FenceRequestProto) (*FenceResponseProto, error)
}

func RegisterJournalProtocolServiceServer(s *grpc.Server, srv JournalProtocolServiceServer) {
	s.RegisterService(&_JournalProtocolService_serviceDesc, srv)
}

func _JournalProtocolService_Journal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalProtocolServiceServer).Journal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.JournalProtocolService/Journal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalProtocolServiceServer).Journal(ctx, req.(*JournalRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalProtocolService_StartLogSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLogSegmentRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalProtocolServiceServer).StartLogSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.JournalProtocolService/StartLogSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalProtocolServiceServer).StartLogSegment(ctx, req.(*StartLogSegmentRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalProtocolService_Fence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FenceRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalProtocolServiceServer).Fence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.hdfs.JournalProtocolService/Fence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalProtocolServiceServer).Fence(ctx, req.(*FenceRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _JournalProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.hdfs.JournalProtocolService",
	HandlerType: (*JournalProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "journal",
			Handler:    _JournalProtocolService_Journal_Handler,
		},
		{
			MethodName: "startLogSegment",
			Handler:    _JournalProtocolService_StartLogSegment_Handler,
		},
		{
			MethodName: "fence",
			Handler:    _JournalProtocolService_Fence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("JournalProtocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6e, 0xd3, 0x3c,
	0x14, 0xc0, 0xe5, 0xac, 0xfd, 0xf6, 0xf5, 0x94, 0x89, 0xcd, 0x8c, 0x2a, 0x0a, 0xa3, 0x94, 0x08,
	0xa4, 0x22, 0xa1, 0x5c, 0xec, 0x05, 0x90, 0xa6, 0x81, 0x56, 0x84, 0x10, 0x4a, 0x11, 0xf7, 0x96,
	0x7b, 0xda, 0x06, 0xa5, 0x76, 0xb0, 0x9d, 0xa9, 0xbb, 0xe3, 0x72, 0xe2, 0x11, 0xb8, 0xe2, 0x51,
	0x78, 0x34, 0x1c, 0x37, 0x5d, 0x9d, 0xb6, 0xda, 0xd5, 0x6e, 0x5a, 0x9f, 0xff, 0xbf, 0xe3, 0x73,
	0x1c, 0x78, 0xfa, 0x51, 0x96, 0x4a, 0xb0, 0xfc, 0x8b, 0x92, 0x46, 0x72, 0x99, 0x27, 0x45, 0x75,
	0xa0, 0xdd, 0x39, 0x9b, 0x48, 0x59, 0x24, 0xf3, 0xc9, 0x54, 0x47, 0x50, 0xfd, 0xae, 0x0c, 0xd1,
	0xf1, 0x95, 0x3d, 0x8f, 0x51, 0x5d, 0xa3, 0x5a, 0x69, 0xe2, 0x25, 0x1c, 0xd7, 0x39, 0x46, 0x62,
	0x2a, 0x5d, 0x1e, 0x7a, 0x06, 0x1d, 0x9e, 0x97, 0xda, 0xa0, 0x1a, 0x5d, 0x86, 0x64, 0x10, 0x0c,
	0x3b, 0xe9, 0x46, 0x41, 0x5f, 0xc1, 0x51, 0xce, 0x6e, 0x64, 0x69, 0xbe, 0xa1, 0xd2, 0x99, 0x14,
	0x61, 0x30, 0x20, 0xc3, 0xa3, 0xb4, 0xa9, 0xa4, 0x03, 0xe8, 0x0a, 0xb6, 0x40, 0x5d, 0x30, 0x8e,
	0x36, 0xcb, 0x81, 0xf3, 0xf1, 0x55, 0xf1, 0x5f, 0x02, 0x4f, 0xea, 0xd2, 0x29, 0xfe, 0x28, 0x51,
	0x9b, 0x55, 0xf5, 0x77, 0xd0, 0xfd, 0xbe, 0x21, 0x72, 0xf5, 0xbb, 0xe7, 0xcf, 0x13, 0xaf, 0xa5,
	0x64, 0x9b, 0x38, 0xf5, 0x23, 0x68, 0x1f, 0x60, 0x9a, 0x29, 0x6d, 0xbe, 0x2e, 0xc5, 0x68, 0x62,
	0xe9, 0x82, 0x61, 0x2b, 0xf5, 0x34, 0x34, 0x84, 0x43, 0x51, 0x2e, 0xec, 0x59, 0x5b, 0xac, 0xc0,
	0x62, 0xad, 0xc5, 0xca, 0xa2, 0x90, 0x4b, 0x35, 0xd1, 0x61, 0xcb, 0x5a, 0x1e, 0xa5, 0x6b, 0x91,
	0x9e, 0x42, 0x1b, 0x0b, 0xc9, 0xe7, 0x61, 0xdb, 0xa5, 0x5b, 0x09, 0x71, 0x0f, 0x4e, 0xef, 0x3a,
	0xd0, 0x85, 0x14, 0x1a, 0x1d, 0x4e, 0x7c, 0x4b, 0xe0, 0xd9, 0xd8, 0x30, 0x65, 0x3e, 0xc9, 0xd9,
	0x18, 0x67, 0x0b, 0x14, 0xe6, 0x61, 0x5b, 0xa4, 0xd0, 0x32, 0xcb, 0x6c, 0xdd, 0x9c, 0x3b, 0x6f,
	0x10, 0x0f, 0x7c, 0xc4, 0x3e, 0x9c, 0xed, 0x90, 0xf8, 0xa8, 0xbf, 0x08, 0x9c, 0x7c, 0x40, 0xc1,
	0xf1, 0x61, 0x01, 0xef, 0x60, 0x02, 0x0f, 0xc6, 0x4d, 0xa6, 0xaa, 0xa5, 0x5c, 0xd6, 0x6a, 0x27,
	0x3a, 0xa9, 0xa7, 0x89, 0x7f, 0x12, 0xa0, 0x35, 0x8c, 0xc7, 0x58, 0x6d, 0x5c, 0xa1, 0xf0, 0x3a,
	0x93, 0xa5, 0x7e, 0xef, 0x92, 0x12, 0x1b, 0xd9, 0x4a, 0x9b, 0x4a, 0xfa, 0x16, 0x4e, 0x72, 0x66,
	0x67, 0xac, 0x98, 0xd0, 0x8c, 0x1b, 0xbb, 0x84, 0x6e, 0xfa, 0x95, 0xe7, 0xae, 0x81, 0xf6, 0xe0,
	0xbf, 0x4c, 0x8c, 0x6f, 0x04, 0x77, 0x18, 0xff, 0xa7, 0xb5, 0x74, 0xfe, 0x3b, 0x80, 0xde, 0xd6,
	0xa3, 0xaa, 0xde, 0x4b, 0xc6, 0x91, 0x7e, 0x86, 0xc3, 0xba, 0x45, 0x3a, 0xd8, 0x77, 0x15, 0xfe,
	0x0d, 0x46, 0x2f, 0xf7, 0x7b, 0xf8, 0x6d, 0x4d, 0xe1, 0xb1, 0x6e, 0x8e, 0x86, 0x0e, 0x1b, 0x51,
	0xf7, 0xac, 0x50, 0xf4, 0xe6, 0x7e, 0x4f, 0xbf, 0xce, 0x15, 0xb4, 0xdd, 0x1d, 0xd3, 0x7e, 0x23,
	0x66, 0x67, 0xea, 0xd1, 0x8b, 0x7d, 0x76, 0x2f, 0xd3, 0xc5, 0x25, 0xbc, 0x96, 0x6a, 0x96, 0x30,
	0xfb, 0x82, 0xe7, 0xd8, 0x70, 0x2e, 0x1a, 0x1f, 0xa0, 0x8b, 0xed, 0xef, 0x92, 0xfb, 0xd7, 0xb7,
	0x84, 0xfc, 0x21, 0xe4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x16, 0x6e, 0x03, 0xb5, 0x04,
	0x00, 0x00,
}
