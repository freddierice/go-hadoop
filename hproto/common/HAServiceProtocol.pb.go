// Code generated by protoc-gen-go.
// source: HAServiceProtocol.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	HAServiceProtocol.proto

It has these top-level messages:
	HAStateChangeRequestInfoProto
	MonitorHealthRequestProto
	MonitorHealthResponseProto
	TransitionToActiveRequestProto
	TransitionToActiveResponseProto
	TransitionToStandbyRequestProto
	TransitionToStandbyResponseProto
	GetServiceStatusRequestProto
	GetServiceStatusResponseProto
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HAServiceStateProto int32

const (
	HAServiceStateProto_INITIALIZING HAServiceStateProto = 0
	HAServiceStateProto_ACTIVE       HAServiceStateProto = 1
	HAServiceStateProto_STANDBY      HAServiceStateProto = 2
)

var HAServiceStateProto_name = map[int32]string{
	0: "INITIALIZING",
	1: "ACTIVE",
	2: "STANDBY",
}
var HAServiceStateProto_value = map[string]int32{
	"INITIALIZING": 0,
	"ACTIVE":       1,
	"STANDBY":      2,
}

func (x HAServiceStateProto) Enum() *HAServiceStateProto {
	p := new(HAServiceStateProto)
	*p = x
	return p
}
func (x HAServiceStateProto) String() string {
	return proto.EnumName(HAServiceStateProto_name, int32(x))
}
func (x *HAServiceStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HAServiceStateProto_value, data, "HAServiceStateProto")
	if err != nil {
		return err
	}
	*x = HAServiceStateProto(value)
	return nil
}
func (HAServiceStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HARequestSource int32

const (
	HARequestSource_REQUEST_BY_USER        HARequestSource = 0
	HARequestSource_REQUEST_BY_USER_FORCED HARequestSource = 1
	HARequestSource_REQUEST_BY_ZKFC        HARequestSource = 2
)

var HARequestSource_name = map[int32]string{
	0: "REQUEST_BY_USER",
	1: "REQUEST_BY_USER_FORCED",
	2: "REQUEST_BY_ZKFC",
}
var HARequestSource_value = map[string]int32{
	"REQUEST_BY_USER":        0,
	"REQUEST_BY_USER_FORCED": 1,
	"REQUEST_BY_ZKFC":        2,
}

func (x HARequestSource) Enum() *HARequestSource {
	p := new(HARequestSource)
	*p = x
	return p
}
func (x HARequestSource) String() string {
	return proto.EnumName(HARequestSource_name, int32(x))
}
func (x *HARequestSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HARequestSource_value, data, "HARequestSource")
	if err != nil {
		return err
	}
	*x = HARequestSource(value)
	return nil
}
func (HARequestSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HAStateChangeRequestInfoProto struct {
	ReqSource        *HARequestSource `protobuf:"varint,1,req,name=reqSource,enum=hadoop.common.HARequestSource" json:"reqSource,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *HAStateChangeRequestInfoProto) Reset()                    { *m = HAStateChangeRequestInfoProto{} }
func (m *HAStateChangeRequestInfoProto) String() string            { return proto.CompactTextString(m) }
func (*HAStateChangeRequestInfoProto) ProtoMessage()               {}
func (*HAStateChangeRequestInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HAStateChangeRequestInfoProto) GetReqSource() HARequestSource {
	if m != nil && m.ReqSource != nil {
		return *m.ReqSource
	}
	return HARequestSource_REQUEST_BY_USER
}

// *
// void request
type MonitorHealthRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MonitorHealthRequestProto) Reset()                    { *m = MonitorHealthRequestProto{} }
func (m *MonitorHealthRequestProto) String() string            { return proto.CompactTextString(m) }
func (*MonitorHealthRequestProto) ProtoMessage()               {}
func (*MonitorHealthRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// void response
type MonitorHealthResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MonitorHealthResponseProto) Reset()                    { *m = MonitorHealthResponseProto{} }
func (m *MonitorHealthResponseProto) String() string            { return proto.CompactTextString(m) }
func (*MonitorHealthResponseProto) ProtoMessage()               {}
func (*MonitorHealthResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// void request
type TransitionToActiveRequestProto struct {
	ReqInfo          *HAStateChangeRequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *TransitionToActiveRequestProto) Reset()                    { *m = TransitionToActiveRequestProto{} }
func (m *TransitionToActiveRequestProto) String() string            { return proto.CompactTextString(m) }
func (*TransitionToActiveRequestProto) ProtoMessage()               {}
func (*TransitionToActiveRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransitionToActiveRequestProto) GetReqInfo() *HAStateChangeRequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

// *
// void response
type TransitionToActiveResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *TransitionToActiveResponseProto) Reset()                    { *m = TransitionToActiveResponseProto{} }
func (m *TransitionToActiveResponseProto) String() string            { return proto.CompactTextString(m) }
func (*TransitionToActiveResponseProto) ProtoMessage()               {}
func (*TransitionToActiveResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// *
// void request
type TransitionToStandbyRequestProto struct {
	ReqInfo          *HAStateChangeRequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *TransitionToStandbyRequestProto) Reset()                    { *m = TransitionToStandbyRequestProto{} }
func (m *TransitionToStandbyRequestProto) String() string            { return proto.CompactTextString(m) }
func (*TransitionToStandbyRequestProto) ProtoMessage()               {}
func (*TransitionToStandbyRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransitionToStandbyRequestProto) GetReqInfo() *HAStateChangeRequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

// *
// void response
type TransitionToStandbyResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *TransitionToStandbyResponseProto) Reset()         { *m = TransitionToStandbyResponseProto{} }
func (m *TransitionToStandbyResponseProto) String() string { return proto.CompactTextString(m) }
func (*TransitionToStandbyResponseProto) ProtoMessage()    {}
func (*TransitionToStandbyResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6}
}

// *
// void request
type GetServiceStatusRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServiceStatusRequestProto) Reset()                    { *m = GetServiceStatusRequestProto{} }
func (m *GetServiceStatusRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetServiceStatusRequestProto) ProtoMessage()               {}
func (*GetServiceStatusRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// *
// Returns the state of the service
type GetServiceStatusResponseProto struct {
	State *HAServiceStateProto `protobuf:"varint,1,req,name=state,enum=hadoop.common.HAServiceStateProto" json:"state,omitempty"`
	// If state is STANDBY, indicate whether it is
	// ready to become active.
	ReadyToBecomeActive *bool `protobuf:"varint,2,opt,name=readyToBecomeActive" json:"readyToBecomeActive,omitempty"`
	// If not ready to become active, a textual explanation of why not
	NotReadyReason   *string `protobuf:"bytes,3,opt,name=notReadyReason" json:"notReadyReason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetServiceStatusResponseProto) Reset()                    { *m = GetServiceStatusResponseProto{} }
func (m *GetServiceStatusResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetServiceStatusResponseProto) ProtoMessage()               {}
func (*GetServiceStatusResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetServiceStatusResponseProto) GetState() HAServiceStateProto {
	if m != nil && m.State != nil {
		return *m.State
	}
	return HAServiceStateProto_INITIALIZING
}

func (m *GetServiceStatusResponseProto) GetReadyToBecomeActive() bool {
	if m != nil && m.ReadyToBecomeActive != nil {
		return *m.ReadyToBecomeActive
	}
	return false
}

func (m *GetServiceStatusResponseProto) GetNotReadyReason() string {
	if m != nil && m.NotReadyReason != nil {
		return *m.NotReadyReason
	}
	return ""
}

func init() {
	proto.RegisterType((*HAStateChangeRequestInfoProto)(nil), "hadoop.common.HAStateChangeRequestInfoProto")
	proto.RegisterType((*MonitorHealthRequestProto)(nil), "hadoop.common.MonitorHealthRequestProto")
	proto.RegisterType((*MonitorHealthResponseProto)(nil), "hadoop.common.MonitorHealthResponseProto")
	proto.RegisterType((*TransitionToActiveRequestProto)(nil), "hadoop.common.TransitionToActiveRequestProto")
	proto.RegisterType((*TransitionToActiveResponseProto)(nil), "hadoop.common.TransitionToActiveResponseProto")
	proto.RegisterType((*TransitionToStandbyRequestProto)(nil), "hadoop.common.TransitionToStandbyRequestProto")
	proto.RegisterType((*TransitionToStandbyResponseProto)(nil), "hadoop.common.TransitionToStandbyResponseProto")
	proto.RegisterType((*GetServiceStatusRequestProto)(nil), "hadoop.common.GetServiceStatusRequestProto")
	proto.RegisterType((*GetServiceStatusResponseProto)(nil), "hadoop.common.GetServiceStatusResponseProto")
	proto.RegisterEnum("hadoop.common.HAServiceStateProto", HAServiceStateProto_name, HAServiceStateProto_value)
	proto.RegisterEnum("hadoop.common.HARequestSource", HARequestSource_name, HARequestSource_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for HAServiceProtocolService service

type HAServiceProtocolServiceClient interface {
	// *
	// Monitor the health of a service.
	MonitorHealth(ctx context.Context, in *MonitorHealthRequestProto, opts ...grpc.CallOption) (*MonitorHealthResponseProto, error)
	// *
	// Request service to tranisition to active state.
	TransitionToActive(ctx context.Context, in *TransitionToActiveRequestProto, opts ...grpc.CallOption) (*TransitionToActiveResponseProto, error)
	// *
	// Request service to transition to standby state.
	TransitionToStandby(ctx context.Context, in *TransitionToStandbyRequestProto, opts ...grpc.CallOption) (*TransitionToStandbyResponseProto, error)
	// *
	// Get the current status of the service.
	GetServiceStatus(ctx context.Context, in *GetServiceStatusRequestProto, opts ...grpc.CallOption) (*GetServiceStatusResponseProto, error)
}

type hAServiceProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewHAServiceProtocolServiceClient(cc *grpc.ClientConn) HAServiceProtocolServiceClient {
	return &hAServiceProtocolServiceClient{cc}
}

func (c *hAServiceProtocolServiceClient) MonitorHealth(ctx context.Context, in *MonitorHealthRequestProto, opts ...grpc.CallOption) (*MonitorHealthResponseProto, error) {
	out := new(MonitorHealthResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.common.HAServiceProtocolService/monitorHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAServiceProtocolServiceClient) TransitionToActive(ctx context.Context, in *TransitionToActiveRequestProto, opts ...grpc.CallOption) (*TransitionToActiveResponseProto, error) {
	out := new(TransitionToActiveResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.common.HAServiceProtocolService/transitionToActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAServiceProtocolServiceClient) TransitionToStandby(ctx context.Context, in *TransitionToStandbyRequestProto, opts ...grpc.CallOption) (*TransitionToStandbyResponseProto, error) {
	out := new(TransitionToStandbyResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.common.HAServiceProtocolService/transitionToStandby", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAServiceProtocolServiceClient) GetServiceStatus(ctx context.Context, in *GetServiceStatusRequestProto, opts ...grpc.CallOption) (*GetServiceStatusResponseProto, error) {
	out := new(GetServiceStatusResponseProto)
	err := grpc.Invoke(ctx, "/hadoop.common.HAServiceProtocolService/getServiceStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HAServiceProtocolService service

type HAServiceProtocolServiceServer interface {
	// *
	// Monitor the health of a service.
	MonitorHealth(context.Context, *MonitorHealthRequestProto) (*MonitorHealthResponseProto, error)
	// *
	// Request service to tranisition to active state.
	TransitionToActive(context.Context, *TransitionToActiveRequestProto) (*TransitionToActiveResponseProto, error)
	// *
	// Request service to transition to standby state.
	TransitionToStandby(context.Context, *TransitionToStandbyRequestProto) (*TransitionToStandbyResponseProto, error)
	// *
	// Get the current status of the service.
	GetServiceStatus(context.Context, *GetServiceStatusRequestProto) (*GetServiceStatusResponseProto, error)
}

func RegisterHAServiceProtocolServiceServer(s *grpc.Server, srv HAServiceProtocolServiceServer) {
	s.RegisterService(&_HAServiceProtocolService_serviceDesc, srv)
}

func _HAServiceProtocolService_MonitorHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorHealthRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAServiceProtocolServiceServer).MonitorHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.common.HAServiceProtocolService/MonitorHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAServiceProtocolServiceServer).MonitorHealth(ctx, req.(*MonitorHealthRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAServiceProtocolService_TransitionToActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionToActiveRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAServiceProtocolServiceServer).TransitionToActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.common.HAServiceProtocolService/TransitionToActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAServiceProtocolServiceServer).TransitionToActive(ctx, req.(*TransitionToActiveRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAServiceProtocolService_TransitionToStandby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionToStandbyRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAServiceProtocolServiceServer).TransitionToStandby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.common.HAServiceProtocolService/TransitionToStandby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAServiceProtocolServiceServer).TransitionToStandby(ctx, req.(*TransitionToStandbyRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAServiceProtocolService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStatusRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAServiceProtocolServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hadoop.common.HAServiceProtocolService/GetServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAServiceProtocolServiceServer).GetServiceStatus(ctx, req.(*GetServiceStatusRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _HAServiceProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hadoop.common.HAServiceProtocolService",
	HandlerType: (*HAServiceProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "monitorHealth",
			Handler:    _HAServiceProtocolService_MonitorHealth_Handler,
		},
		{
			MethodName: "transitionToActive",
			Handler:    _HAServiceProtocolService_TransitionToActive_Handler,
		},
		{
			MethodName: "transitionToStandby",
			Handler:    _HAServiceProtocolService_TransitionToStandby_Handler,
		},
		{
			MethodName: "getServiceStatus",
			Handler:    _HAServiceProtocolService_GetServiceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("HAServiceProtocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xdf, 0x6e, 0x93, 0x50,
	0x18, 0x97, 0x2e, 0x3a, 0xf7, 0xcd, 0x6d, 0xe4, 0x34, 0xd1, 0x8a, 0x5b, 0xad, 0x5c, 0x98, 0x3a,
	0x27, 0x9a, 0x5e, 0x99, 0xe8, 0x85, 0xb4, 0xa3, 0x2b, 0x51, 0xab, 0x1e, 0x98, 0x66, 0x4b, 0x4c,
	0x83, 0xf4, 0x58, 0x48, 0xd6, 0xf3, 0x75, 0x70, 0xda, 0x64, 0x6f, 0xe0, 0x63, 0xf8, 0x0e, 0xbe,
	0x8e, 0x0f, 0x23, 0x14, 0x96, 0x51, 0x40, 0xdc, 0x8d, 0x37, 0x2d, 0x9c, 0xf3, 0xfb, 0xc7, 0xf9,
	0xbe, 0xef, 0xc0, 0xbd, 0x81, 0x6e, 0xb1, 0x60, 0xe1, 0xbb, 0xec, 0x63, 0x80, 0x02, 0x5d, 0x3c,
	0xd3, 0x66, 0xf1, 0x03, 0xd9, 0xf2, 0x9c, 0x31, 0xe2, 0x4c, 0x73, 0x71, 0x3a, 0x45, 0xae, 0x7e,
	0x85, 0xbd, 0x08, 0x29, 0x1c, 0xc1, 0x7a, 0x9e, 0xc3, 0x27, 0x8c, 0xb2, 0xf3, 0x39, 0x0b, 0x85,
	0xc9, 0xbf, 0xe3, 0x92, 0x48, 0x5e, 0xc3, 0x46, 0xc0, 0xce, 0x2d, 0x9c, 0x07, 0x2e, 0x6b, 0x48,
	0xad, 0x5a, 0x7b, 0xbb, 0xd3, 0xd4, 0x56, 0x34, 0xb4, 0x81, 0x9e, 0xb2, 0x12, 0x14, 0xbd, 0x22,
	0xa8, 0x0f, 0xe0, 0xfe, 0x7b, 0xe4, 0xbe, 0xc0, 0x60, 0xc0, 0x9c, 0x33, 0xe1, 0xa5, 0xc0, 0xa5,
	0xb4, 0xba, 0x0b, 0x4a, 0x6e, 0x33, 0x9c, 0x21, 0x0f, 0x93, 0xc4, 0xaa, 0x07, 0x4d, 0x3b, 0x70,
	0x78, 0xe8, 0x0b, 0x1f, 0xb9, 0x8d, 0xba, 0x2b, 0xfc, 0x05, 0xcb, 0xf2, 0x49, 0x1f, 0xd6, 0x23,
	0xa7, 0x38, 0xea, 0x32, 0xd8, 0x66, 0xe7, 0xa0, 0x10, 0xac, 0xe2, 0xcb, 0xe8, 0x25, 0x59, 0x7d,
	0x04, 0x0f, 0xcb, 0x9c, 0xb2, 0x61, 0xfc, 0x55, 0x48, 0x24, 0xcb, 0xc7, 0xdf, 0x2e, 0xfe, 0x4b,
	0x1a, 0x15, 0x5a, 0xa5, 0x56, 0xd9, 0x38, 0x4d, 0xd8, 0x3d, 0x62, 0x22, 0x2d, 0x70, 0xac, 0x3a,
	0x0f, 0x57, 0x4e, 0xf6, 0x97, 0x04, 0x7b, 0x45, 0x40, 0x46, 0x81, 0xbc, 0x84, 0x9b, 0x61, 0x9c,
	0x26, 0x2d, 0xa9, 0x5a, 0xcc, 0x7a, 0xc5, 0x4d, 0x28, 0x34, 0x21, 0x90, 0x17, 0x50, 0x0f, 0x98,
	0x33, 0xbe, 0xb0, 0xb1, 0xcb, 0x22, 0x34, 0x4b, 0x8e, 0xab, 0x51, 0x6b, 0x49, 0xed, 0xdb, 0xb4,
	0x6c, 0x8b, 0x3c, 0x86, 0x6d, 0x8e, 0x82, 0xc6, 0x3b, 0xd1, 0x4f, 0x88, 0xbc, 0xb1, 0x16, 0x81,
	0x37, 0x68, 0x6e, 0x75, 0xff, 0x0d, 0xd4, 0x4b, 0x7c, 0x89, 0x0c, 0x77, 0xcc, 0xa1, 0x69, 0x9b,
	0xfa, 0x3b, 0xf3, 0xd4, 0x1c, 0x1e, 0xc9, 0x37, 0x08, 0xc0, 0x2d, 0xbd, 0x67, 0x9b, 0x9f, 0x0d,
	0x59, 0x22, 0x9b, 0xb0, 0x6e, 0xd9, 0xfa, 0xf0, 0xb0, 0x7b, 0x22, 0xd7, 0xf6, 0xbf, 0xc0, 0x4e,
	0xae, 0x19, 0x49, 0x1d, 0x76, 0xa8, 0xf1, 0xe9, 0xd8, 0xb0, 0xec, 0x51, 0xf7, 0x64, 0x74, 0x6c,
	0x19, 0x34, 0x12, 0x50, 0xe0, 0x6e, 0x6e, 0x71, 0xd4, 0xff, 0x40, 0x7b, 0xc6, 0x61, 0x24, 0xb8,
	0x4a, 0x38, 0x7d, 0xdb, 0xef, 0xc9, 0xb5, 0xce, 0xef, 0x35, 0x68, 0x14, 0x26, 0x2a, 0x7d, 0x25,
	0x63, 0xd8, 0x9a, 0x66, 0xfb, 0x98, 0xb4, 0x73, 0xa7, 0xf9, 0xd7, 0x11, 0x50, 0x9e, 0x54, 0x23,
	0xb3, 0x15, 0x0b, 0x81, 0x88, 0x42, 0x97, 0x92, 0x67, 0x39, 0x81, 0xea, 0x91, 0x51, 0xb4, 0x6b,
	0xc0, 0xb3, 0xa6, 0x0b, 0xa8, 0x8b, 0x62, 0x33, 0x92, 0x2a, 0x99, 0x92, 0xd9, 0x50, 0x9e, 0x5f,
	0x07, 0x9f, 0xf5, 0x9d, 0x82, 0x3c, 0xc9, 0xf5, 0x2f, 0x79, 0x9a, 0x13, 0xa9, 0x9a, 0x00, 0xe5,
	0xe0, 0x9f, 0xe0, 0x8c, 0x5d, 0xf7, 0x15, 0x28, 0x18, 0x4c, 0x34, 0x67, 0xe6, 0xb8, 0x1e, 0xbb,
	0x64, 0x7a, 0x4e, 0x72, 0x65, 0x76, 0x8b, 0x77, 0xe9, 0xf2, 0x3f, 0xfc, 0x21, 0x49, 0x3f, 0x25,
	0xe9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xd8, 0x57, 0xbf, 0x6b, 0x05, 0x00, 0x00,
}
